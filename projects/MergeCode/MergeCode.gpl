'Created: 9/24/2013 3:03:25 PM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module GPL

	Public Const PROGRAM_VERSION As String = "WCP 1.1.65a_LONGSCARA"

	Public Const MAX_ROBOT_COUNT As Integer = 5
	Public Const MAX_ARM_COUNT_PER_ROBOT As Integer = 4
	Public Const MAX_FINGER_COUNT_PER_ARM As Integer = 25
	Public Const MAX_CANTAPS_IO_BOARD_COUNT As Integer = 3
	Public Const MAX_AXIS_COUNT As Integer = 20

	Public Dim theSystem As System
	Public Dim thePDBManager As PDBManager
	Public Dim errorHandler As RobotErrorHandler
	Public Dim errorLogWriter_new As ErrorLoger
	Public Dim errorLogWriter_old As ErrorLoger_oldVersion
	Public Dim theStationManager As StationManager
	
	Public Dim theMoveEx As MoveEx
	Public Dim theLatchManager As LatchManager
	Public Dim theNetworkManager As NetworkManager
	Public Dim protocolHandler As RobotProtocolHandler

	Public Dim rt1 As RT1ItemList
	Public Dim theUserSaveData As UserSaveData
	
	Public Dim dynaxIO As DynaxIOMap
	Public Dim tpIO As TPIOMap
	Public Dim robotIO As RobotIOMap
	Public Dim cantapsIOCount As Integer = 0
	Public Dim cantapsIO(MAX_CANTAPS_IO_BOARD_COUNT) As CantapsIOMap
	
	Public Dim theJogManager As JogManager
	
	Public Dim robotCount As Integer = 0
	Public Dim myRobot(MAX_ROBOT_COUNT) As RNDRobot
	'Public Dim MyCheckMotorState As RNDRobot.checkMotorState
	
	Public Delegate Sub StartUpFunction()
	Private Dim m_startUpFunction As StartUpFunction

	Public Sub Init
		' All Thread run this Init....
	End Sub
	
    Public Sub MAIN
		Dim i As Integer
		Dim ex As Exception
		
		MyConsole.LogSocketStart()
	
		thePDBManager = New PDBManager
		errorHandler = New RobotErrorHandler
		
		Try
			Dim errorLogFile As New StreamWriter("/NVRAM/file1 -size 7800 -wrap", True)
'			errorLogFile.Close()
'			errorLogWriter_new = New ErrorLoger
'			errorLogWriter_old = Nothing
			MyConsole.WriteLine(" !! NVRAM not installed...")
			errorLogWriter_new = Nothing
			errorLogWriter_old = New ErrorLoger_oldVersion
		Catch ex
			MyConsole.WriteLine(" !! NVRAM not installed...")
			errorLogWriter_new = Nothing
			errorLogWriter_old = New ErrorLoger_oldVersion
		End Try

		protocolHandler = New RobotProtocolHandler
		
		rt1 = New RT1ItemList("/flash/data/pdbLIST.dat")
		theUserSaveData = New UserSaveData("/flash/data/saveData.dat")
		theSystem = New System("/flash/data/system.dat")
		theStationManager = New StationManager(theSystem.StationCount, theSystem.MappintStationCount)
		
		dynaxIO = New DynaxIOMap
		tpIO = New TPIOMap
		robotIO = New RobotIOMap
		
		theMoveEx = New MoveEx()
		theJogManager = New JogManager
		theNetworkManager = New NetworkManager()
		
		Try
			theLatchManager = New LatchManager
		Catch ex
			theLatchManager = Nothing
			If ex.ErrorCode = -212 Then
				MyConsole.WriteLine(" !! Latch Licence not installed...")
			Else
				MyConsole.WriteLine(" !! LatchManager Error... " + CStr(ex.errorCode))
			End If
		End Try
		
		If errorLogWriter_new Is Nothing Then
			errorLogWriter_old.errorLogStart()
		Else
			errorLogWriter_new.errorLogStart()
		End If
		
		RobotConfig()

'		encoderErrorCheckAndClear()
		
		theSystem.demoMode = 0
		If theSystem.interLockCheckModeAutoOn = True Then
			theSystem.interlockMode = 1
		End If
		
		For i = 1 To robotCount
			myRobot(i-1).robotMotionThreadStart
		Next i
		theJogManager.jogCommandThreadStart()
		
		For i = 1 To cantapsIOCount
			cantapsIO(i-1).TcpCantopsIOTreadStart()
		Next i
		
		If cantapsIOCount > 0 Then
			Dim waitCount As Integer = 0
			While (waitCount < 30)
				For i = 1 To cantapsIOCount
					If cantapsIO(i-1).isConnected = False Then
						Exit For
					ElseIf i = cantapsIOCount Then
						Exit While
					End If
				Next i
				Thread.Sleep(100)
				waitCount = waitCount + 1
			End While
		End If
		
		robotIO.ioMonitorStart()
		
		Dim founded As Boolean
		Dim r,a As Integer
		For r = 1 To robotCount
			For a = 1 To myRobot(r-1).armCount
				If myRobot(r-1).arm(a-1).isUseCrashDetectSensor = True Or myRobot(r-1).arm(a-1).realtimeSlipCheckSensor <> 0 Then
					founded = True
					Exit For
				End If
			Next a
			If founded = True Then
				Exit For
			End If
		Next r
		If founded = True Then
			robotIO.crashDetectCheckStart()
		End If
		
		If theSystem.useZPosErrorCheck = 1 Then
			For r = 1 To robotCount
				If Not(myRobot(r-1).theZPosErrDetector Is Nothing) Then
					myRobot(r-1).theZPosErrDetector.checkStart()
				End If
			Next r
		End If
		
		theNetworkManager.communicationStart()
		
		
		If Not(m_startUpFunction Is Nothing) Then
			MyConsole.WriteLine(" !! Run StartUp Function")
			m_startUpFunction()
		End If
		
		MyConsole.WriteLine("")
		MyConsole.WriteLine("!! ROBOT PROGRAM [ " + PROGRAM_VERSION + " ] STARTED !!")
		MyConsole.WriteLine("")
		
	End Sub
	
	Public Sub setStartUpFunction(runFunction As StartUpFunction)
			m_startUpFunction = runFunction
		End Sub
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module ContinualLogFileModule

	Public Class ContinualLogFile
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	
		Private Dim logFileMutex As New Mutex
	
		Private Const MAX_FILE_COUNT As Integer = 10
		Private Const MAX_LINES As Integer = 200
		Private nowLineIndex As Integer = 0
		Private nowFileStreamWriter As StreamWriter
		Private logName As String
		
		Private Function getFilePath() As String
			Dim strArray1() As String
			Dim strArray2() As String
			Dim timeStamp As String = Controller.PDB(121)
			strArray1 = timeStamp.Split(" ")
			strArray2 = strArray1(1).Split(":")

			Return "/flash/data/LogFile/" + logName + "/" + strArray1(0) + "_" + strArray2(0) + "_" + strArray2(1) + "_" + strArray2(2) + ".txt"
		End Function
		
		Private Sub createNewFile()
			Dim ex As Exception
			Try
				File.CreateDirectory("/flash/data/LogFile/" + logName)
			Catch ex
				If ex.ErrorCode = -510 Then 'already exist
					Exit Try
				Else
					Throw ex
				End If
			End Try
			
			Dim files() As String
			Dim ii As Integer
			files = File.GetFiles("/flash/data/LogFile/" + logName)
			If files.Length >= MAX_FILE_COUNT Then
			
				Dim i As Integer
				Dim j As Integer
				Dim ret As Integer
				Dim tempStr As String
				For i = 1 To files.Length - 1
				For j = i+1 To files.Length
					ret = String.Compare(files(i-1),files(j-1))
					If ret >= 1 Then
						tempStr = files(i-1)
						files(i-1) = files(j-1)
						files(j-1) = tempStr
					End If
				Next j
				Next i
				For ii = 1 To files.Length - MAX_FILE_COUNT + 1
			    	File.DeleteFile("/flash/data/LogFile/" + logName + "/" + files(ii-1))
				Next ii
			End If

			nowLineIndex = 0
			nowFileStreamWriter = New StreamWriter(getFilePath())
		End Sub
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(logName As String)
			Me.logName = logName
			createNewFile()
		End Sub
		
		Public Sub WriteLine(str As String)
			Dim ex As Exception
			
			Try
				logFileMutex.lock()
				nowFileStreamWriter.WriteLine(str)
				nowFileStreamWriter.Flush
				nowLineIndex = nowLineIndex + 1
				
				Dim i As Integer
				If nowLineIndex >= MAX_LINES Then
					nowFileStreamWriter.Close()
					createNewFile()	
				End If
				logFileMutex.unLock()
			Catch ex
				logFileMutex.unLock()
				Throw ex
			End Try
		
		End Sub
	
	End Class
		
		
		
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module PDBModule

	Public Const PDB_ROBOT_TYPE As Integer = 116
	Public Const PDB_CONTROLLER_NAME As Integer = 109
	Public Const PDB_HOME_METHOD As Integer = 2803
	Public Const PDB_SYSTEM_SPEED As Integer = 601
	Public Const PDB_MOTOR_HOME_STATE As Integer = 2800
	Public Const PDB_HOMING_SEQUENCT As Integer = 2802
	
	Public Const PDB_IPADDRESS As Integer = 420
	
	Public Const PDB_ENCODER_TYPE As Integer = 10201
	Public Const PDB_ENCODER_STATUS As Integer = 12200
	Public Const PDB_ENCODER_ALRAM As Integer = 12251
	Public Const PDB_ENCODER_AXIS_SELECT As Integer = 14500
	Public Const PDB_ENCODER_RESET_AND_REBOOT As Integer = 14065
	
	Public Const PDB_MAX_HARD_LIMIT As Integer = 16075
	Public Const PDB_MIN_HARD_LIMIT As Integer = 16076
	Public Const PDB_MAX_SOFT_LIMIT As Integer = 16077
	Public Const PDB_MIN_SOFT_LIMIT As Integer = 16078
	
	Public Const PDB_LATCH_QUEUE_SIZE As Integer = 2251
	Public Const PDB_LATCH_SENSOR As Integer = 2250
	
	Public Const PDB_HOME_SENSOR As Integer = 10105
	Public Const PDB_POSITIVE_LIMIT_SENSOR As Integer = 10106
	Public Const PDB_NEGATIVE_LIMIT_SENSOR As Integer = 10107
	
	Public Const PDB_DC_BUS_RAW_VOLTAGE As Integer = 12684
	
	Public Class PDBManager
	
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SHARED ''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Function getPDB(id As Integer) As String
			Return Controller.PDB(id, Robot.Selected)
		End Function
		
		Public Function getPDB(id As Integer, index As Integer) As String
			If index > 0 Then
				Return Controller.PDB(id, Robot.Selected, 0, index)
			Else
				Return Controller.PDB(id, Robot.Selected)
			End If
		End Function
		
		Public Function getAxisPDB(id As Integer, axisName As String) As String
			Return getPDB(id, myRobot(Robot.Selected-1).controlAxis(axisName))
		End Function
	
		Public Sub setPDB(id As Integer, value As Double)
			setPDB(id,0,value)
		End Sub
		
		Public Sub setPDB(id As Integer, index As Integer, value As Double)
			If index = 0 Then
				Controller.PDBnum(id, Robot.Selected) = value
			Else
				Controller.PDBnum(id, Robot.Selected, 0, index) = value
			End If
		End Sub
		
		Public Sub setAxisPDB(id As Integer, axisName As String, value As Double)
			setPDB(id, myRobot(Robot.Selected-1).controlAxis(axisName), value)
		End Sub
		
		Public Sub setPDB_str(id As Integer, value As String)
			setPDB_str(id,0,value)
		End Sub
		
		Public Sub setPDB_str(id As Integer, index As Integer, value As String)
			If id = 901 Then ' save PDB
				'do nothing. only when "SAVEFLASH" protocol Then save all data.
			Else
				If index = 0 Then
					Controller.PDB(id, Robot.Selected) = value
				Else
					Controller.PDB(id, Robot.Selected, 0, index) = value
				End If
			End If
		End Sub
		
		Public Sub setAxisPDB_str(id As Integer, axisName As String, value As String)
			setPDB_str(id, myRobot(Robot.Selected-1).controlAxis(axisName), value)
		End Sub
		
		Public Sub save()
			DataFile.AddSaveReservationPDB()
		End Sub
		
		Public Function getMotorMaxSpeedPersent(index As Integer) As Integer
			Dim mortorSpeed As Double
			Dim mortorScaleFactor As Double
			Dim mortorResolution As Double
			Dim mortorRPM As Double
			Dim axis As Integer
			Dim i As Integer
			
			If myRobot(Robot.Selected-1).zAxisCount > 1 And _
			myRobot(Robot.Selected-1).tpToControlAxis(index) = myRobot(Robot.Selected-1).zIndexToAxis(1) Then 'mulit Z
				Dim maxMortorRPM As Double = 0
				For i = 1 To myRobot(Robot.Selected-1).zAxisCount
					axis = myRobot(Robot.Selected-1).zIndexToAxis(i)
			
					mortorSpeed = Controller.PDbNum(2700,Robot.Selected,0,axis)
					mortorScaleFactor = Math.Abs(Controller.PDbNum(2300,Robot.Selected,0,axis))
					mortorResolution = Controller.PDbNum(10203,Robot.Selected,0,axis)
					mortorRPM = CInt((mortorSpeed * mortorScaleFactor / mortorResolution) * 60.0)
					
					If maxMortorRPM < mortorRPM Then
						maxMortorRPM = mortorRPM
					End If
				Next i
				
				Return CInt(maxMortorRPM / 30.0) ' * 100 / 3000 = / 30
			
			Else
				axis = index
			
				mortorSpeed = Controller.PDbNum(2700,Robot.Selected,0,axis)
				mortorScaleFactor = Math.Abs(Controller.PDbNum(2300,Robot.Selected,0,axis))
				mortorResolution = Controller.PDbNum(10203,Robot.Selected,0,axis)
				mortorRPM = CInt((mortorSpeed * mortorScaleFactor / mortorResolution) * 60.0)
				
				Return CInt(mortorRPM / 30.0) ' * 100 / 3000 = / 30
			End If
		End Function
		
		Public Function getMotorAccelTime(index As Integer) As Double
			Dim mortorSpeed As Double
			Dim mortorAccel As Double
		
			mortorSpeed = Controller.PDbNum(2700,Robot.Selected,0,index)
			mortorAccel = Controller.PDbNum(2702,Robot.Selected,0,index)
			
			Return mortorSpeed / mortorAccel
		End Function
		
		Public Sub setMotorMaxSpeedPersent(index As Integer, persent As Integer)
			Dim mortorSpeed As Double
			Dim mortorScaleFactor As Double
			Dim mortorResolution As Double
			Dim mortorRPM As Double
			Dim axis As Integer
			Dim i As Integer
			
			If persent < 1 Then
				persent = 1
			End If
			If persent > 166 Then ' max 5000 rpm (166%)
				persent = 166
			End If
			
			If myRobot(Robot.Selected-1).zAxisCount > 1 And _
			myRobot(Robot.Selected-1).tpToControlAxis(index) = myRobot(Robot.Selected-1).zIndexToAxis(1) Then 'mulit Z
				Dim minMortorSpeed As Double = -1
				
				For i = 1 To myRobot(Robot.Selected-1).zAxisCount
					axis = myRobot(Robot.Selected-1).zIndexToAxis(i)
					
					mortorScaleFactor = Math.Abs(Controller.PDbNum(2300,Robot.Selected,0,axis))
					mortorResolution = Controller.PDbNum(10203,Robot.Selected,0,axis)
			
					mortorSpeed = (persent / 2.0) * mortorResolution / mortorScaleFactor
					
					If minMortorSpeed > mortorSpeed Or i = 1 Then
						minMortorSpeed = mortorSpeed
					End If
				Next i
				
				For i = 1 To myRobot(Robot.Selected-1).zAxisCount
					axis = myRobot(Robot.Selected-1).zIndexToAxis(i)
					Controller.PDbNum(2700,Robot.Selected,0,axis) = minMortorSpeed
				Next i
				
			Else
				axis = index
				
				mortorScaleFactor = Math.Abs(Controller.PDbNum(2300,Robot.Selected,0,axis))
				mortorResolution = Controller.PDbNum(10203,Robot.Selected,0,axis)
		
				mortorSpeed = (persent / 2.0) * mortorResolution / mortorScaleFactor
				Controller.PDbNum(2700,Robot.Selected,0,axis) = mortorSpeed
				
				' for smart motion and scara
				If CInt(thePDBManager.getPDB(PDB_ROBOT_TYPE)) <> 1 Then
					If axis = myRobot(Robot.Selected-1).controlAxis("T") Then
						Controller.PDbNum(2701,Robot.Selected,0,2) = mortorSpeed
					Else
						For i = 0 To myRobot(Robot.Selected-1).armCount - 1
							If axis = myRobot(Robot.Selected-1).arm(i).controlAxis Then
								If myRobot(Robot.Selected-1).linkLength = 0 Then
									Controller.PDbNum(2701,Robot.Selected,0,1) = mortorSpeed
								Else
									Controller.PDbNum(2701,Robot.Selected,0,1) = (myRobot(Robot.Selected-1).linkLength * 4) / (180 / mortorSpeed)
								End If
								Exit For
							End If
						Next i
					End If
				End If
			End If
		End Sub
		
		Public Sub setMotorAccelTime(index As Integer, second As Double)
			Dim axis As Integer
			Dim i As Integer
			
			If second < 0.1 Then 'min 0.1 s
				second = 0.1
			End If
			
			If myRobot(Robot.Selected-1).zAxisCount > 1 And index = myRobot(Robot.Selected-1).zIndexToAxis(1) Then 'mulit Z

				For i = 1 To myRobot(Robot.Selected-1).zAxisCount
					axis = myRobot(Robot.Selected-1).zIndexToAxis(i)
					Controller.PDbNum(2702,Robot.Selected,0,axis) = Controller.PDbNum(2700,Robot.Selected,0,axis) / second
				Next i
				
			Else
				axis = index

				Controller.PDbNum(2702,Robot.Selected,0,axis) = Controller.PDbNum(2700,Robot.Selected,0,axis) / second
				
				' for smart motion and scara
				If CInt(thePDBManager.getPDB(PDB_ROBOT_TYPE)) <> 1 Then
					If axis = myRobot(Robot.Selected-1).controlAxis("T") Then
						Controller.PDbNum(2703,Robot.Selected,0,2) = Controller.PDbNum(2701,Robot.Selected,0,2) / second
					Else
						For i = 0 To myRobot(Robot.Selected-1).armCount - 1
							If axis = myRobot(Robot.Selected-1).arm(i).controlAxis Then
								Controller.PDbNum(2703,Robot.Selected,0,1) = Controller.PDbNum(2701,Robot.Selected,0,1) / second
								Exit For
							End If
						Next i
					End If
				End If
			End If
		End Sub
		
		Public Sub setLimit(index As Integer,newHardMax As Double,newHardMin As Double,newSoftMax As Double,newSoftMin As Double)
			Dim nowSoftMin As Double = CDbl(getPDB(PDB_MIN_SOFT_LIMIT,index))
			Dim nowSoftMax As Double = CDbl(getPDB(PDB_MAX_SOFT_LIMIT,index))
			Dim nowHardMin As Double = CDbl(getPDB(PDB_MIN_HARD_LIMIT,index))
			Dim nowHardMax As Double = CDbl(getPDB(PDB_MAX_HARD_LIMIT,index))
			
			Dim setupOrder(4) As Integer
			Dim setupOrderIndex As Integer
			setupOrderIndex = 0
			If newSoftMax > nowSoftMin Then
				If newHardMax > nowSoftMax Then
					setupOrder(setupOrderIndex) = 1
					setupOrderIndex = setupOrderIndex + 1
					setupOrder(setupOrderIndex) = 3
					setupOrderIndex = setupOrderIndex + 1
				Else
					setupOrder(setupOrderIndex) = 3
					setupOrderIndex = setupOrderIndex + 1
					setupOrder(setupOrderIndex) = 1
					setupOrderIndex = setupOrderIndex + 1
				End If
				If newHardMin < nowSoftMin Then
					setupOrder(setupOrderIndex) = 2
					setupOrderIndex = setupOrderIndex + 1
					setupOrder(setupOrderIndex) = 4
					setupOrderIndex = setupOrderIndex + 1
				Else
					setupOrder(setupOrderIndex) = 4
					setupOrderIndex = setupOrderIndex + 1
					setupOrder(setupOrderIndex) = 2
					setupOrderIndex = setupOrderIndex + 1
				End If
			Else
				If newHardMin < nowSoftMin Then
					setupOrder(setupOrderIndex) = 2
					setupOrderIndex = setupOrderIndex + 1
					setupOrder(setupOrderIndex) = 4
					setupOrderIndex = setupOrderIndex + 1
				Else
					setupOrder(setupOrderIndex) = 4
					setupOrderIndex = setupOrderIndex + 1
					setupOrder(setupOrderIndex) = 2
					setupOrderIndex = setupOrderIndex + 1
				End If
				If newHardMax > nowSoftMax Then
					setupOrder(setupOrderIndex) = 1
					setupOrderIndex = setupOrderIndex + 1
					setupOrder(setupOrderIndex) = 3
					setupOrderIndex = setupOrderIndex + 1
				Else
					setupOrder(setupOrderIndex) = 3
					setupOrderIndex = setupOrderIndex + 1
					setupOrder(setupOrderIndex) = 1
					setupOrderIndex = setupOrderIndex + 1
				End If
			End If
		
			Dim i As Integer
			For i = 0 To 3
				Select setupOrder(i)
				Case 1
					setPDB(PDB_MAX_HARD_LIMIT,index,newHardMax)
				Case 2
					setPDB(PDB_MIN_HARD_LIMIT,index,newHardMin)
				Case 3
					setPDB(PDB_MAX_SOFT_LIMIT,index,newSoftMax)
				Case 4
					setPDB(PDB_MIN_SOFT_LIMIT,index,newSoftMin)
				End Select
			Next
		End Sub
		
	End Class
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module PointDataModule

	Public Const MAX_POINT_DATA As Integer = 999
	
	Public Const HOME_POINT_INDEX As Integer = 498
	Public Const SAFE_TURN_POINT_INDEX As Integer = 500
	
	Public Class PointDataManager
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim datafile As DataFile
		Private Dim curIndex As Integer = 0
		Private filename As String
		
		Private Sub checkPointNo(no As Integer)
			If no < 1 Or no > MAX_POINT_DATA Then
				ThrowError(ERR_INVALID_PD_INDEX)
			End If
		End Sub
		
		Private Function getKeyName(no As Integer) As String
			Return "PD" & Format(no, "000")
		End Function
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(filename As String)
			datafile = Nothing
			Me.filename = filename
			load()
		End Sub
		
		Public Sub load()
			Dim ex As Exception
			Try
				datafile = New DataFile(filename, MAX_POINT_DATA)
			Catch ex
				If ex.ErrorCode = -508 Then 'file not exist
					datafile = New DataFile()
					datafile.fileName = filename
					datafile.setMaxLineCount(MAX_POINT_DATA)
				Else
					Throw ex
				End If
			End Try
		End Sub
		
		Public Sub save()
			If Not(datafile Is Nothing) Then
				datafile.Save
			End If
		End Sub
		
		Public Function getLocation(no As Integer) As LocationEx
			checkPointNo(no)
			Dim resultLoc As LocationEx
			Dim dataStr As String = datafile.GetValue(getKeyName(no))
			If dataStr = "" Then
				Return Nothing
			Else
				resultLoc = New LocationEx(dataStr)
				If resultLoc.isAllZero = True Then
					Return Nothing
				Else
					Return resultLoc
				End If
			End If
		End Function
		
		Public Sub SetLocation(no As Integer, loc As LocationEx)
			CheckPointNo(no)
			datafile.SetValue(getKeyName(no), loc.toFullString())
		End Sub
	
		Public Sub startWrite(start As Integer)
			curIndex = start
		End Sub
		
		Public Sub endWrite()
			curIndex = 0
		End Sub
		
		Public Function getCurWriteIndex() As Integer
			Return curIndex
		End Function
		
		Public Sub setDataToCurrentIndex(loc As LocationEx)
			If curIndex < 1 Or MAX_POINT_DATA < curIndex Then
				ThrowError(ERR_WRONG_PD_COMMAND)
			End If
			
			SetLocation(curIndex, loc)
			curIndex = curIndex + 1
		End Sub
		
	End Class
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module ProfileManagerModule

	Public Class ProfileManager
	
	
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SHARED ''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Shared Dim m_systemSpeedChanged As Boolean = False
		Private Shared Dim m_systemSpeed As Integer
		Public Shared Property systemSpeed As Integer
	        Set (value As Integer)
				m_systemSpeedChanged = True
				m_systemSpeed = assertSpeedValue(value)
				thePDBManager.SetPDB(PDB_SYSTEM_SPEED,m_systemSpeed)
	        End Set
	        Get 
	            Return m_systemSpeed
	        End Get
	    End Property
		
		Private Shared Dim m_systemManualSpeed As Integer
		Public Shared Property systemManualSpeed As Integer
	        Set (value As Integer)
				m_systemManualSpeed = assertSpeedValue(value)
	        End Set
	        Get 
	            Return m_systemManualSpeed
	        End Get
	    End Property
		
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim datafile As DataFile
		Private Dim filename As String

		Private Dim m_saveToFile As Boolean = True
		Public Property saveToFile As Boolean
	        Get
	            Return m_saveToFile
	        End Get
			Set (value As Boolean)
	            m_saveToFile = value
	        End Set
	    End Property
		
		Private Dim m_useOnOffSpeedAsGetPutSpeed As Boolean = False
		Public Property useOnOffSpeedAsGetPutSpeed As Boolean
	        Get
	            Return m_useOnOffSpeedAsGetPutSpeed
	        End Get
			Set (value As Boolean)
	            m_useOnOffSpeedAsGetPutSpeed = value
	        End Set
	    End Property
		
		Private Dim m_useOnOffSpeedToReadySpeed As Boolean = True
		Public Property useOnOffSpeedToReadySpeed As Boolean
	        Get
	            Return m_useOnOffSpeedToReadySpeed
	        End Get
			Set (value As Boolean)
	            m_useOnOffSpeedToReadySpeed = value
	        End Set
	    End Property
		
		'Profile
		Private Dim m_pfFastJ As ProfileEx
		Private Dim m_pfFastC As ProfileEx
		Private Dim m_pfSlowJ As ProfileEx
		Private Dim m_pfSlowC As ProfileEx
		Private Dim m_pfZUp   As ProfileEx
		Private Dim m_pfZDown As ProfileEx
		Private Dim m_pfZMap  As ProfileEx
		Private Dim m_pfHomeJ As ProfileEx
		Private Dim m_pfHomeC As ProfileEx
		
		Private Dim m_pfMaxJ As ProfileEx
		
		Private Dim m_robotSpeed As Integer
		Public Property robotSpeed As Integer
	        Set (value As Integer)
				m_robotSpeed = assertSpeedValue(value)
				homeSpeed = m_homeSpeed
				waferOnSpeed = m_waferOnSpeed
				waferOffSpeed = m_waferOffSpeed
				zUpSpeed = m_zUpSpeed
				zDownSpeed = m_zDownSpeed
				jogSpeed = m_jogSpeed
				mappingSpeed = m_mappingSpeed
	        End Set
	        Get 
	            Return m_robotSpeed
	        End Get
	    End Property
		
		Private Dim m_homeSpeed As Integer
		Public Property homeSpeed As Integer
	        Set (value As Integer)
				m_homeSpeed = assertSpeedValue(value)
				If robotCount > 1 Then
					m_pfHomeJ.pf.Speed = m_homeSpeed * m_robotSpeed / 100
					m_pfHomeC.pf.Speed = m_homeSpeed * m_robotSpeed / 100
				Else
					m_pfHomeJ.pf.Speed = m_homeSpeed
					m_pfHomeC.pf.Speed = m_homeSpeed
				End If
	        End Set
	        Get 
	            Return m_homeSpeed
	        End Get
	    End Property
		
		Private Dim m_waferOnSpeed As Integer
		Public Property waferOnSpeed As Integer
	        Set (value As Integer)
				m_waferOnSpeed = assertSpeedValue(value)
				If robotCount > 1 Then
					m_pfSlowJ.pf.Speed = m_waferOnSpeed * m_robotSpeed / 100
					m_pfSlowC.pf.Speed = m_waferOnSpeed * m_robotSpeed / 100
				Else
					m_pfSlowJ.pf.Speed = m_waferOnSpeed
					m_pfSlowC.pf.Speed = m_waferOnSpeed
				End If
	        End Set
	        Get 
	            Return m_waferOnSpeed
	        End Get
	    End Property
		
		Private Dim m_waferOffSpeed As Integer
		Public Property waferOffSpeed As Integer
	        Set (value As Integer)
				m_waferOffSpeed = assertSpeedValue(value)
				If robotCount > 1 Then
					m_pfFastJ.pf.Speed = m_waferOffSpeed * m_robotSpeed / 100
					m_pfFastC.pf.Speed = m_waferOffSpeed * m_robotSpeed / 100
				Else
					m_pfFastJ.pf.Speed = m_waferOffSpeed
					m_pfFastC.pf.Speed = m_waferOffSpeed
				End If
	        End Set
	        Get 
	            Return m_waferOffSpeed
	        End Get
	    End Property
		
		Private Dim m_zUpSpeed As Integer
		Public Property zUpSpeed As Integer
	        Set (value As Integer)
				m_zUpSpeed = assertSpeedValue(value)
				If robotCount > 1 Then
					m_pfZUp.pf.Speed = m_zUpSpeed * m_robotSpeed / 100
				Else
					m_pfZUp.pf.Speed = m_zUpSpeed
				End If
	        End Set
	        Get 
	            Return m_zUpSpeed
	        End Get
	    End Property
		
		Private Dim m_zDownSpeed As Integer
		Public Property zDownSpeed As Integer
	        Set (value As Integer)
				m_zDownSpeed = assertSpeedValue(value)
				If robotCount > 1 Then
					m_pfZDown.pf.Speed = m_zDownSpeed * m_robotSpeed / 100
				Else
					m_pfZDown.pf.Speed = m_zDownSpeed
				End If
	        End Set
	        Get 
	            Return m_zDownSpeed
	        End Get
	    End Property
		
		Private Dim m_jogSpeed As Integer
		Public Property jogSpeed As Integer
	        Set (value As Integer)
				m_jogSpeed = assertSpeedValue(value)
	        End Set
	        Get 
	            Return m_jogSpeed
	        End Get
	    End Property
		
		Private Dim m_mappingSpeed As Integer
		Public Property mappingSpeed As Integer
	        Set (value As Integer)
				m_mappingSpeed = assertSpeedValue(value)
				If robotCount > 1 Then
					m_pfZMap.pf.Speed = m_mappingSpeed * m_robotSpeed / 100
				Else
					m_pfZMap.pf.Speed = m_mappingSpeed
				End If
	        End Set
	        Get
	            Return m_mappingSpeed
	        End Get
	    End Property
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Dim nowHoming As Boolean = False
		
		Public Sub New(filename As String)
			datafile = Nothing
			Me.filename = filename
			load()
		End Sub
		
		Public Sub load()
			Dim ex As Exception
			Try
				datafile = New DataFile(filename)
			Catch ex
				If ex.ErrorCode = -508 Then 'file not exist
					datafile = New DataFile()
					datafile.fileName = filename
				Else
					Throw ex
				End If
			End Try
			
			systemSpeed = assertSpeedValue(CInt(theSystem.getValue("SystemSpeed","40")))
			If thesystem.useAutoManualSpeed = True Then
				systemManualSpeed = assertSpeedValue(CInt(datafile.getValue("SystemManualSpeed","40")))
			End If 
			m_homeSpeed = assertSpeedValue(CInt(datafile.GetValue("HomeSpeed","20")))
			m_waferOnSpeed = assertSpeedValue(CInt(datafile.GetValue("WaferOnSpeed","100")))
			m_waferOffSpeed = assertSpeedValue(CInt(datafile.GetValue("WaferOffSpeed","100")))
			m_zUpSpeed = assertSpeedValue(CInt(datafile.GetValue("ZUpSpeed","15")))
			m_zDownSpeed = assertSpeedValue(CInt(datafile.GetValue("ZDownSpeed","15")))
			m_jogSpeed = assertSpeedValue(CInt(datafile.GetValue("JogSpeed","40")))
			m_mappingSpeed = assertSpeedValue(CInt(datafile.GetValue("MappingSpeed","30")))
			
			m_pfMaxJ = New ProfileEx("100,0,100,100,0.15,0.15,0,-1")
			
			m_pfFastJ = New ProfileEx(datafile.GetValue("PfFastJ","100,0,100,100,0.15,0.15,0,-1"))
			m_pfFastC = New ProfileEx(datafile.GetValue("PfFastC","100,0,100,100,0.15,0.15,-1,-1"))
			m_pfSlowJ = New ProfileEx(datafile.GetValue("PfSlowJ","100,0,100,100,0.15,0.15,0,-1"))
			m_pfSlowC = New ProfileEx(datafile.GetValue("PfSlowC","100,0,100,100,0.15,0.15,-1,-1"))
			m_pfZUp   = New ProfileEx(datafile.GetValue("PfZUp","15,0,100,100,0.2,0.2,0,-1"))
			m_pfZDown = New ProfileEx(datafile.GetValue("PfZDown","15,0,100,100,0.2,0.2,0,-1"))
			m_pfZMap  = New ProfileEx(datafile.GetValue("PfZMap","30,0,100,100,0.2,0.2,0,-1"))
			m_pfHomeJ = New ProfileEx(datafile.GetValue("PfHomeJ","20,0,100,100,0.2,0.2,0,-1"))
			m_pfHomeC = New ProfileEx(datafile.GetValue("PfHomeC","20,0,100,100,0.2,0.2,-1,-1"))
			
			'it need to here
			robotSpeed = assertSpeedValue(CInt(datafile.GetValue("RobotSpeed","100")))
		End Sub
		
		Public Sub save()
			If saveToFile = False And protocolHandler.useFlashSaveProtocol = False Then
				Exit Sub
			End If
			
			If m_systemSpeedChanged = True Then
				theSystem.SetValue("SystemSpeed", CStr(systemSpeed))
				If thesystem.useAutoManualSpeed = True Then
					datafile.SetValue("SystemManualSpeed", CStr(m_systemManualSpeed))
				End If 
				theSystem.save
			End If

			datafile.SetValue("RobotSpeed", CStr(m_robotSpeed))
			datafile.SetValue("HomeSpeed", CStr(m_homeSpeed))
			datafile.SetValue("WaferOnSpeed", CStr(m_waferOnSpeed))
			datafile.SetValue("WaferOffSpeed", CStr(m_waferOffSpeed))
			datafile.SetValue("ZUpSpeed", CStr(m_zUpSpeed))
			datafile.SetValue("ZDownSpeed", CStr(m_zDownSpeed))
			datafile.SetValue("JogSpeed", CStr(m_jogSpeed))
			datafile.SetValue("MappingSpeed", CStr(m_mappingSpeed))
			
			datafile.SetValue("PfFastJ", m_pfFastJ.toString())
			datafile.SetValue("PfFastC", m_pfFastC.toString())
			datafile.SetValue("PfSlowJ", m_pfSlowJ.toString())
			datafile.SetValue("PfSlowC", m_pfSlowC.toString())
			datafile.SetValue("PfZUp",   m_pfZUp.toString())
			datafile.SetValue("PfZDown", m_pfZDown.toString())
			datafile.SetValue("PfZMap",  m_pfZMap.toString())
			datafile.SetValue("PfHomeJ",  m_pfHomeJ.toString())
			datafile.SetValue("PfHomeC",  m_pfHomeC.toString())
			
			If Not(datafile Is Nothing) Then
				datafile.Save
			End If
		End Sub
		
		Public Function getReadyProfile(fast As Boolean) As ProfileEx
			If nowHoming = True Then
				Return m_pfHomeJ.clone
			Else
				If useOnOffSpeedToReadySpeed = True Then
					If fast Then
						Return m_pfFastJ.clone
					Else
						Return m_pfSlowJ.clone
					End If
				Else
					Return m_pfMaxJ.clone
				End If
			End If
		End Function
		
		Public Function getProfile(type As Integer, fast As Boolean) As ProfileEx
			If nowHoming = True Then
				If type = COORD_CARTESIAN Then
					Return m_pfHomeC.clone
				Else
					Return m_pfHomeJ.clone
				End If
			Else
				If type = COORD_CARTESIAN Then
					If fast Then
						Return m_pfFastC.clone
					Else
						Return m_pfSlowC.clone
					End If
				Else
					If fast Then
						Return m_pfFastJ.clone
					Else
						Return m_pfSlowJ.clone
					End If
				End If
			End If
		End Function
		
		Public Function getZProfile(up As Boolean) As ProfileEx
			If up = True Then
				Return m_pfZUp.clone
			Else
				Return m_pfZDown.clone
			End If
		End Function
		
		Public Function getMapProfile() As ProfileEx
			Return m_pfZMap.clone
		End Function
		
	End Class
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN


Module RT1Module

'example
'ID,Label,Type,#Val,AxisParam,Attr,Need Poweroff,Need Reboot
'100,Controller manufacturer,String,1,0,RO,0,0

	Public Class RT1Item
		Public Dim itemID As Integer
		Public Dim label As String = ""
		Public Dim type As String = ""
		Public Dim valueCount As Integer = 0
		Public Dim axisParam As Boolean = False
		Public Dim attr As String = ""
		Public Dim needPowerOff As Boolean = False
		Public Dim needReboot As Boolean = False
	End Class
	
	Public Class RT1ItemList
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	
		Private Dim rt1Datafile As DataFile
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(filename As String)
			rt1Datafile = New DataFile(filename,800)
		End Sub
		
		Public Function getItemRawStr(id As Integer) As String
			Dim itemDetailStr As String
			itemDetailStr = rt1Datafile.GetValue_binarySearch(id)
			Return itemDetailStr
		End Function
		
		Public Function getRT1Item(id As Integer) As RT1Item
			Dim resultItem As New RT1Item
			Dim itemDetailStr As String
			itemDetailStr = getItemRawStr(id)
			
			resultItem.itemID = id
			
			If itemDetailStr <> "" Then
				Dim splitStr() As String
				splitStr = itemDetailStr.Split(",")
		
				resultItem.label = splitStr(0)
				resultItem.type = splitStr(1)
				resultItem.valueCount = CInt(splitStr(2))
				resultItem.axisParam = CInt(splitStr(3))
				resultItem.attr = splitStr(4)
				resultItem.needPowerOff = CInt(splitStr(5))
				resultItem.needReboot = CInt(splitStr(6))
			End If
			
			Return resultItem
		End Function
		
	End Class
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module StationModule
	
	Public Class MappingParam
		Public Dim crossCriteria As Integer
		Public Dim doubleCriteria As Integer
		Public Dim waferThickness As Double
		Public Dim baseSlotZPos As Double
	End Class
	
	Public Class Station
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim datafile As DataFile
		Private Dim filename As String
		
		Private Dim m_stationNumber As Integer
		Public ReadOnly Property stationNumber As Integer
	        Get 
	            Return m_stationNumber
	        End Get
	    End Property
		
		Private Dim m_slotCount As Integer
		Public Property slotCount As Integer
	        Set (value As Integer)
	        	m_slotCount = value
	        End Set
	        Get 
	            Return m_slotCount
	        End Get
	    End Property
		
		Private Dim m_slotPitch As Double
		Public Property slotPitch As Double
	        Set (value As Double)
	          	m_slotPitch = value
	        End Set
	        Get 
	            Return m_slotPitch
	        End Get
	    End Property
		
		Private Dim m_inSpecialSequence As String = ""
		Public Property inSpecialSequence As String
	        Set (value As String)
	        	m_inSpecialSequence = value
	        End Set
	        Get 
	            Return m_inSpecialSequence
	        End Get
	    End Property
		
		Private Dim m_outSpecialSequence As String = ""
		Public Property outSpecialSequence As String
	        Set (value As String)
	        	m_outSpecialSequence = value
	        End Set
	        Get 
	            Return m_outSpecialSequence
	        End Get
	    End Property
		
		Private Dim m_gripTypeIndex As Integer
		Public Property typeListIndex As Integer
	        Set (value As Integer)
	        	m_gripTypeIndex = value
	        End Set
	        Get 
	            Return m_gripTypeIndex
	        End Get
	    End Property
		
		Private Dim m_getDownOffset As Double
		Public Property getDownOffset As Double
	        Set (value As Double)
	        	m_getDownOffset = value
	        End Set
	        Get 
	            Return m_getDownOffset
	        End Get
	    End Property
		
		Private Dim m_getUpOffset As Double
		Public Property getUpOffset As Double
	        Set (value As Double)
	           	m_getUpOffset = value
	        End Set
	        Get 
	            Return m_getUpOffset
	        End Get
	    End Property
		
		Private Dim m_putUpOffset As Double
		Public Property putUpOffset As Double
	        Set (value As Double)
	           	m_putUpOffset = value
	        End Set
	        Get 
	            Return m_putUpOffset
	        End Get
	    End Property
		
		Private Dim m_putDownOffset As Double
		Public Property putDownOffset As Double
	        Set (value As Double)
	           	m_putDownOffset = value
	        End Set
	        Get 
	            Return m_putDownOffset
	        End Get
	    End Property
		
		Private Dim m_getOffset As Double
		Public Property getOffset As Double
	        Set (value As Double)
	           	m_getOffset = value
	        End Set
	        Get 
	            Return m_getOffset
	        End Get
	    End Property
		
		Private Dim m_putOffset As Double
		Public Property putOffset As Double
	        Set (value As Double)
	           	m_putOffset = value
	        End Set
	        Get 
	            Return m_putOffset
	        End Get
	    End Property
		
		Private Dim m_teachingPointCountPerArm As Integer
		Public Property teachingPointCountPerArm As Integer
	        Set (value As Integer)
				m_teachingPointCountPerArm = value
	        End Set
	        Get 
				If CInt(thePDBManager.getPDB(PDB_ROBOT_TYPE)) = 1 Then 'joint only
					Return 1
				Else
	            	Return m_teachingPointCountPerArm
				End If
	        End Get
	    End Property
		
		'160502 add Double Teaching Point lower, upper If slot count > 25
		Private Dim m_DoubleteachingPoint As Integer = 0
		Public Property DoubleteachingPoint As Integer
	        Set (value As Integer)
				m_DoubleteachingPoint = value
	        End Set
	        Get 
				If CInt(thePDBManager.getPDB(PDB_ROBOT_TYPE)) <> 1 Then 'joint only
					Return 0
				Else
	            	Return m_DoubleteachingPoint
				End If
	        End Get
	    End Property
		
		' Mapping
		Private Dim m_mappingParam As New MappingParam
		Public ReadOnly Property mappingParam As MappingParam
	        Get 
	            Return m_mappingParam
	        End Get
	    End Property
			

		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(index As Integer, filename As String)
			datafile = Nothing
			Me.filename = filename
			m_stationNumber = index
			load()
		End Sub
		
		Public Sub load()
			Dim i As Integer
			Dim ex As Exception
			
			Try
				datafile = New DataFile(filename)
			Catch ex
				If ex.ErrorCode = -508 Then 'file not exist
					datafile = New DataFile()
					datafile.fileName = filename
				Else
					Throw ex
				End If
			End Try
			
			m_slotCount = CInt(datafile.GetValue("Slot","1"))
			m_slotPitch = CDbl(datafile.GetValue("Pitch")) / 100
			m_getDownOffset = CDbl(datafile.GetValue("GetDownOffset")) / 100
			m_getUpOffset = CDbl(datafile.GetValue("GetUpOffset")) / 100
			m_putUpOffset = CDbl(datafile.GetValue("PutUpOffset")) / 100
			m_putDownOffset = CDbl(datafile.GetValue("PutDownOffset")) / 100
			m_getOffset = CDbl(datafile.GetValue("GetOffset")) / 100
			m_putOffset = CDbl(datafile.GetValue("PutOffset")) / 100
			m_teachingPointCountPerArm = CInt(datafile.GetValue("TeachingPointCountPerArm","1"))
			m_gripTypeIndex = CInt(datafile.GetValue("GripTypeIndex","1"))
			m_inSpecialSequence = datafile.GetValue("InSpecialSequence","")
			m_outSpecialSequence = datafile.GetValue("OutSpecialSequence","")
			m_DoubleteachingPoint = datafile.Getvalue("DoubleteachingPoint")
			
			'Mapping
			m_mappingParam.crossCriteria = CDbl(datafile.GetValue("MappingCrossCriteria"))
			m_mappingParam.doubleCriteria = CDbl(datafile.GetValue("MappingDoubleCriteria"))
			m_mappingParam.waferThickness = CDbl(datafile.GetValue("MappingWaferThickness"))
			m_mappingParam.baseSlotZPos = CDbl(datafile.GetValue("MappingBaseSlotZPos"))
		End Sub
		
		Public Sub save()
			Dim i As Integer
			
			datafile.SetValue("Slot", CStr(m_slotCount))
			datafile.SetValue("Pitch", CStr(CInt(m_slotPitch * 100)))
			datafile.SetValue("GetDownOffset", CStr(CInt(m_getDownOffset * 100)))
			datafile.SetValue("GetUpOffset", CStr(CInt(m_getUpOffset * 100)))
			datafile.SetValue("PutUpOffset", CStr(CInt(m_putUpOffset * 100)))
			datafile.SetValue("PutDownOffset", CStr(CInt(m_putDownOffset * 100)))
			datafile.SetValue("GetOffset", CStr(CInt(m_getOffset * 100)))
			datafile.SetValue("PutOffset", CStr(CInt(m_putOffset * 100)))
			datafile.SetValue("TeachingPointCountPerArm", CStr(m_teachingPointCountPerArm))
			datafile.SetValue("GripTypeIndex", CStr(m_gripTypeIndex))
			datafile.SetValue("InSpecialSequence", m_inSpecialSequence)
			datafile.SetValue("OutSpecialSequence", m_outSpecialSequence)
			datafile.Setvalue("DoubleteachingPoint",CStr(m_DoubleteachingPoint))
			
			'Mapping
			datafile.SetValue("MappingCrossCriteria", CStr(m_mappingParam.CrossCriteria))
			datafile.SetValue("MappingDoubleCriteria", CStr(m_mappingParam.DoubleCriteria))
			datafile.SetValue("MappingWaferThickness", CStr(m_mappingParam.WaferThickness))
			datafile.SetValue("MappingBaseSlotZPos", CStr(m_mappingParam.BaseSlotZPos))
			
			datafile.Save()
		End Sub
		
		Public Sub checkSlotNumber(slot As Integer, arm As RobotArm)
			Dim armList(1) As RobotArm
			armList(0) = arm
			checkSlotNumber(slot, armList)
		End Sub
		
		Public Sub checkSlotNumber(slot As Integer, armList() As RobotArm)
			Dim i,j As Integer
			Dim temp As Integer

			Dim maxSlot As Integer = slot
			Dim baseArm As RobotArm = Nothing
			Dim matched As Boolean
			
			temp = 0
			For i = 0 To myRobot(Robot.Selected-1).armCount - 1
				If Not(baseArm Is Nothing) Then
					temp = temp + myRobot(Robot.Selected-1).arm(i).outerBladeSlotInterval
				End If
				
				matched = False
				For j = 0 To armList.getUpperBound(0) - 1
					If myRobot(Robot.Selected-1).arm(i).controlAxis = armList(j).controlAxis Then
						If baseArm Is Nothing Then
							baseArm = myRobot(Robot.Selected-1).arm(i)
						End If
						matched = True
						Exit For
					End If
				Next j
				
				If Not(baseArm Is Nothing) Then
					temp = temp + myRobot(Robot.Selected-1).arm(i).interBladeSlotInterval * (myRobot(Robot.Selected-1).arm(i).fingerCount - 1)
				End If
				
				If matched = True Then
					maxSlot = slot + temp
				End If
			Next i
			
			If slot < 1 Or maxSlot > slotCount Then
				ThrowError(ERR_INVALID_SLOT)
			End If
		End Sub
		
		Public Function isUseSmartMotion() As Boolean
			If Me.teachingPointCountPerArm >= 2 Then
				Return True
			Else
				Return False
			End If
		End Function
		
		Public Function teachingLocation(arm As RobotArm, index As Integer) As LocationEx
			Return teachingLocation(1,arm,index)
		End Function
		
			
		Public Function teachingLocation(slot As Integer, arm As RobotArm, index As Integer) As LocationEx
			Dim RobotAxisCount As Integer = myRobot(Robot.Selected-1).AxisCount
			Dim existAxis(RobotAxisCount) As Integer
			Dim checkpoint(RobotAxisCount) As Double
			Dim tempslotcount As Integer 
			If index < 1 Or teachingPointCountPerArm < index Then
				ThrowError(ERR_INVALID_PD_INDEX)
			End If
			
			'If use same control axis, Then use same teaching point
			Dim targetArmIndex As Integer = arm.armIndex
			Dim i As Integer
			For i = 0 To myRobot(Robot.Selected-1).armCount - 1
				If arm.controlAxis = myRobot(Robot.Selected-1).arm(i).controlAxis Then
					targetArmIndex = myRobot(Robot.Selected-1).arm(i).armIndex
					Exit For
				End If
			Next i
			
			Dim result As locationEx = myRobot(Robot.Selected-1).thePointDataManager.getLocation( _
						(targetArmIndex-1) * theSystem.ArmTeachingPointInterval + _
						(index-1) * theSystem.ReadyTeachingPointInterval + _
						stationNumber)
						
			If DoubleteachingPoint = 1 And slotCount > 25 Then
				Dim temp As locationEx = myRobot(Robot.Selected-1).thePointDataManager.getLocation( _
					(targetArmIndex-1) * theSystem.ArmTeachingPointInterval + _
					(index-1) * theSystem.ReadyTeachingPointInterval + _
					stationNumber + 200)
					
				If temp Is Nothing Then
					ThrowError(ERR_NO_DATA)
				End If
				
				For i = 0 To RobotAxisCount
					existAxis(i) = 0
					checkpoint(i) = 0				
				Next i 
					
				existAxis(0) = myRobot(Robot.Selected-1).controlAxis("T")
				existAxis(1) = myRobot(Robot.Selected-1).controlAxis("Z")
				existAxis(2) = myRobot(Robot.Selected-1).controlAxis("R")
				existAxis(3) = myRobot(Robot.Selected-1).controlAxis("L")
				existAxis(4) = myRobot(Robot.Selected-1).controlAxis("V")
				
				If existAxis(0) <> -1 Then
					checkpoint(0) = (temp.loc.angle(myRobot(Robot.Selected-1).controlAxis("T")) _
					- result.loc.angle(myRobot(Robot.Selected-1).controlAxis("T")))
				End If
				If existAxis(1) <> -1 Then

					If myRobot(Robot.Selected-1).ZAxisCount <> 1 Then
						Dim upperZ As Double = temp.loc.angle(myRobot(Robot.Selected-1).controlAxis("Z"))
						Dim lowerZ As Double = result.loc.angle(myRobot(Robot.Selected-1).controlAxis("Z"))
						
						For i = 2 To myRobot(Robot.Selected-1).zAxisCount
							lowerZ = lowerZ + result.loc.angle(myRobot(Robot.Selected-1).controlAxis(CStr(i)))
 							upperZ = upperZ + temp.loc.angle(myRobot(Robot.Selected-1).controlAxis(CStr(i))) 
						Next i
						checkpoint(1) = (upperZ - lowerZ)/(slotcount-arm.fingercount)
					Else
						checkpoint(1) = _
							(temp.loc.angle(myRobot(Robot.Selected-1).controlAxis("Z")) _
							- result.loc.angle(myRobot(Robot.Selected-1).controlAxis("Z")))/(slotcount-arm.fingercount)
					End If 
					
				End If
				If existAxis(2) <> -1 Then
			
					checkpoint(2) = (temp.loc.angle(myRobot(Robot.Selected-1).controlAxis("R")) _
					- result.loc.angle(myRobot(Robot.Selected-1).controlAxis("R")))
				End If
				If existAxis(3) <> -1 Then
					checkpoint(3) = (temp.loc.angle(myRobot(Robot.Selected-1).controlAxis("L")) _
					- result.loc.angle(myRobot(Robot.Selected-1).controlAxis("L")))
				End If
				If existAxis(4) <> -1 Then
					checkpoint(4) = (temp.loc.angle(myRobot(Robot.Selected-1).controlAxis("V")) _
					- result.loc.angle(myRobot(Robot.Selected-1).controlAxis("V")))
				End If			

			
					
				If Math.Abs(checkpoint(0)) > 5 Or Math.Abs(checkpoint(2)) > 5 Or Math.Abs(checkpoint(3)) > 5 Or Math.Abs(checkpoint(4)) > 5 Or Math.Abs(checkpoint(1)) < (slotpitch/2) Then
					ThrowError(ERR_WRONG_TEACHING_DATA)
				End If	
				
				If slot = slotcount Then
					temp.loc.angle(myRobot(Robot.Selected-1).controlAxis("Z")) = result.loc.angle(myRobot(Robot.Selected-1).controlAxis("Z"))
					If myRobot(Robot.Selected-1).ZAxisCount <> 1 Then
						For i = 2 To myRobot(Robot.Selected-1).zAxisCount
							temp.loc.angle(myRobot(Robot.Selected-1).controlAxis(CStr(i))) = result.loc.angle(myRobot(Robot.Selected-1).controlAxis(CStr(i)))
						Next i
					End If					
					result = temp.clone
				Else
					If existAxis(0) <> -1 Then
						result.loc.angle(myRobot(Robot.Selected-1).controlAxis("T")) += (checkpoint(0)/(slotcount-arm.fingercount))*(slot-1)
					End If 
					If existAxis(2) <> -1 Then
						result.loc.angle(myRobot(Robot.Selected-1).controlAxis("R")) += (checkpoint(2)/(slotcount-arm.fingercount))*(slot-1)
					End If 
					If existAxis(3) <> -1 Then
						result.loc.angle(myRobot(Robot.Selected-1).controlAxis("L")) += (checkpoint(3)/(slotcount-arm.fingercount))*(slot-1)
					End If 
					If existAxis(4) <> -1 Then
						Dim Vmod As Double 					
						result.loc.angle(myRobot(Robot.Selected-1).controlAxis("V")) += (checkpoint(4)/(slotcount-arm.fingercount))*(slot-1)
						Vmod = result.loc.angle(myRobot(Robot.Selected-1).controlAxis("V")) Mod 0.02
						If Vmod <> 0 Then
							If Vmod < 0.01 Then
								result.loc.angle(myRobot(Robot.Selected-1).controlAxis("V")) -= Vmod
							Else 
								Vmod = 0.02 - Vmod
								result.loc.angle(myRobot(Robot.Selected-1).controlAxis("V")) += Vmod
							End If
						End If
					End If 
				End If
			End If
			
			If result Is Nothing Then
				ThrowError(ERR_NO_DATA)
			End If
			
			If DoubleteachingPoint = 1 Then 	
				If checkpoint(1) < (slotpitch/2) Then
					result.liftUp((slot-1) * slotPitch)
				Else
					result.liftUp((slot-1) * checkpoint(1))
				End If 
			ElseIf	DoubleteachingPoint = 0 Then		
				result.liftUp((slot-1) * slotPitch)
			End If

			Return result
		End Function
		
		Public Function readyLocation(slot As Integer, arm As RobotArm, mode As Integer) As LocationEx
			Dim readyLoc As LocationEx = teachingLocation(slot,arm,teachingPointCountPerArm)
			If readyLoc Is Nothing Then
				ThrowError(ERR_NO_DATA)
			End If
			readyLoc.setFixedPosition(teachingLocation(slot,arm,1))
			
			If mode = GET_MODE Then
				If arm.isBackSide = True Then
					readyLoc.liftUp(getDownOffset)
				Else
					readyLoc.liftDown(getDownOffset)
				End If
			ElseIf mode = PUT_MODE Then
				readyLoc.liftUp(putUpOffset)
			ElseIf mode = TARGET_MODE Then
			Else
				throwError(ERR_INVALID_ARGUMENT)
			End If
			Return readyLoc
		End Function
		
		Public Function MapteachingLocation(arm As RobotArm, index As Integer) As LocationEx
			Return MapteachingLocation(1,arm,index)
		End Function
		
			
		Public Function MapteachingLocation(slot As Integer, arm As RobotArm, index As Integer) As LocationEx
			Dim RobotAxisCount As Integer = myRobot(Robot.Selected-1).AxisCount
			Dim existAxis(RobotAxisCount) As Integer
			Dim checkpoint(RobotAxisCount) As Double
			Dim tempslotcount As Integer 
			If index < 1 Or teachingPointCountPerArm < index Then
				ThrowError(ERR_INVALID_PD_INDEX)
			End If
			
			'If use same control axis, Then use same teaching point
			Dim targetArmIndex As Integer = arm.armIndex
			Dim i As Integer
			For i = 0 To myRobot(Robot.Selected-1).armCount - 1
				If arm.controlAxis = myRobot(Robot.Selected-1).arm(i).controlAxis Then
					targetArmIndex = myRobot(Robot.Selected-1).arm(i).armIndex
					Exit For
				End If
			Next i
			
			Dim result As locationEx = myRobot(Robot.Selected-1).thePointDataManager.getLocation( _
						 + (index-1) * theSystem.ReadyTeachingPointInterval + _
						stationNumber + theSystem.MapStartTeachingPointBase)
						
			If DoubleteachingPoint = 1 And slotCount > 25 Then
				Dim temp As locationEx = myRobot(Robot.Selected-1).thePointDataManager.getLocation( _
					(targetArmIndex-1) * theSystem.ArmTeachingPointInterval + _
					(index-1) * theSystem.ReadyTeachingPointInterval + _
					stationNumber + 200)
					
				If temp Is Nothing Then
					ThrowError(ERR_NO_DATA)
				End If
				
				For i = 0 To RobotAxisCount
					existAxis(i) = 0
					checkpoint(i) = 0				
				Next i 
					
				existAxis(0) = myRobot(Robot.Selected-1).controlAxis("T")
				existAxis(1) = myRobot(Robot.Selected-1).controlAxis("Z")
				existAxis(2) = myRobot(Robot.Selected-1).controlAxis("R")
				existAxis(3) = myRobot(Robot.Selected-1).controlAxis("L")
				existAxis(4) = myRobot(Robot.Selected-1).controlAxis("V")
				
				If existAxis(0) <> -1 Then
					checkpoint(0) = (temp.loc.angle(myRobot(Robot.Selected-1).controlAxis("T")) _
					- result.loc.angle(myRobot(Robot.Selected-1).controlAxis("T")))
				End If
				If existAxis(1) <> -1 Then

					If myRobot(Robot.Selected-1).ZAxisCount <> 1 Then
						Dim upperZ As Double = temp.loc.angle(myRobot(Robot.Selected-1).controlAxis("Z"))
						Dim lowerZ As Double = result.loc.angle(myRobot(Robot.Selected-1).controlAxis("Z"))
						
						For i = 2 To myRobot(Robot.Selected-1).zAxisCount
							lowerZ = lowerZ + result.loc.angle(myRobot(Robot.Selected-1).controlAxis(CStr(i)))
 							upperZ = upperZ + temp.loc.angle(myRobot(Robot.Selected-1).controlAxis(CStr(i))) 
						Next i
						checkpoint(1) = (upperZ - lowerZ)/(slotcount-arm.fingercount)
					Else
						checkpoint(1) = _
							(temp.loc.angle(myRobot(Robot.Selected-1).controlAxis("Z")) _
							- result.loc.angle(myRobot(Robot.Selected-1).controlAxis("Z")))/(slotcount-arm.fingercount)
					End If 
					
				End If
				If existAxis(2) <> -1 Then
			
					checkpoint(2) = (temp.loc.angle(myRobot(Robot.Selected-1).controlAxis("R")) _
					- result.loc.angle(myRobot(Robot.Selected-1).controlAxis("R")))
				End If
				If existAxis(3) <> -1 Then
					checkpoint(3) = (temp.loc.angle(myRobot(Robot.Selected-1).controlAxis("L")) _
					- result.loc.angle(myRobot(Robot.Selected-1).controlAxis("L")))
				End If
				If existAxis(4) <> -1 Then
					checkpoint(4) = (temp.loc.angle(myRobot(Robot.Selected-1).controlAxis("V")) _
					- result.loc.angle(myRobot(Robot.Selected-1).controlAxis("V")))
				End If			

			
					
				If Math.Abs(checkpoint(0)) > 5 Or Math.Abs(checkpoint(2)) > 5 Or Math.Abs(checkpoint(3)) > 5 Or Math.Abs(checkpoint(4)) > 5 Or Math.Abs(checkpoint(1)) < (slotpitch/2) Then
					ThrowError(ERR_WRONG_TEACHING_DATA)
				End If	
				
				If slot = slotcount Then
					temp.loc.angle(myRobot(Robot.Selected-1).controlAxis("Z")) = result.loc.angle(myRobot(Robot.Selected-1).controlAxis("Z"))
					If myRobot(Robot.Selected-1).ZAxisCount <> 1 Then
						For i = 2 To myRobot(Robot.Selected-1).zAxisCount
							temp.loc.angle(myRobot(Robot.Selected-1).controlAxis(CStr(i))) = result.loc.angle(myRobot(Robot.Selected-1).controlAxis(CStr(i)))
						Next i
					End If					
					result = temp.clone
				Else
					If existAxis(0) <> -1 Then
						result.loc.angle(myRobot(Robot.Selected-1).controlAxis("T")) += (checkpoint(0)/(slotcount-arm.fingercount))*(slot-1)
					End If 
					If existAxis(2) <> -1 Then
						result.loc.angle(myRobot(Robot.Selected-1).controlAxis("R")) += (checkpoint(2)/(slotcount-arm.fingercount))*(slot-1)
					End If 
					If existAxis(3) <> -1 Then
						result.loc.angle(myRobot(Robot.Selected-1).controlAxis("L")) += (checkpoint(3)/(slotcount-arm.fingercount))*(slot-1)
					End If 
					If existAxis(4) <> -1 Then
						Dim Vmod As Double 					
						result.loc.angle(myRobot(Robot.Selected-1).controlAxis("V")) += (checkpoint(4)/(slotcount-arm.fingercount))*(slot-1)
						Vmod = result.loc.angle(myRobot(Robot.Selected-1).controlAxis("V")) Mod 0.02
						If Vmod <> 0 Then
							If Vmod < 0.01 Then
								result.loc.angle(myRobot(Robot.Selected-1).controlAxis("V")) -= Vmod
							Else 
								Vmod = 0.02 - Vmod
								result.loc.angle(myRobot(Robot.Selected-1).controlAxis("V")) += Vmod
							End If
						End If
					End If 
				End If
			End If
			
			If result Is Nothing Then
				ThrowError(ERR_NO_DATA)
			End If

			Return result
		End Function
		
		Public Function MapreadyLocation(slot As Integer, arm As RobotArm, mode As Integer) As LocationEx
			Dim readyLoc As LocationEx = MapteachingLocation(slot,arm,teachingPointCountPerArm)
			If readyLoc Is Nothing Then
				ThrowError(ERR_NO_DATA)
			End If
			readyLoc.setFixedPosition(MapteachingLocation(slot,arm,1))
			
			Return readyLoc
		End Function
		
		
		Public Function mapStartLocation() As LocationEx
			Dim loc As LocationEx =  myRobot(Robot.Selected-1).thePointDataManager.getLocation(theSystem.MapStartTeachingPointBase + stationNumber)
			If loc Is Nothing Then
				ThrowError(ERR_NO_DATA)
			End If
			Return loc
		End Function
		
		Public Function mapEndLocation() As LocationEx
			Dim loc As LocationEx =  myRobot(Robot.Selected-1).thePointDataManager.getLocation(theSystem.MapEndTeachingPointBase + stationNumber)
			If loc Is Nothing Then
				ThrowError(ERR_NO_DATA)
			End If
			Return loc
		End Function
		
		Public Function MovemapEndLocation(Interval As Integer) As LocationEx
			Dim loc As LocationEx =  myRobot(Robot.Selected-1).thePointDataManager.getLocation(theSystem.MapStartTeachingPointBase + stationNumber + Interval * theSystem.ReadyTeachingPointInterval)
			
			Return loc
		End Function
				
		Public Function blademapStartLocation() As LocationEx
			Dim loc As LocationEx =  myRobot(Robot.Selected-1).thePointDataManager.getLocation(theSystem.BladeMapStartTeachingPointBase + stationNumber)
			If loc Is Nothing Then
				ThrowError(ERR_NO_DATA)
			End If
			Return loc
		End Function
		
		Public Function blademapEndLocation() As LocationEx
			Dim loc As LocationEx =  myRobot(Robot.Selected-1).thePointDataManager.getLocation(theSystem.BladeMapEndTeachingPointBase + stationNumber)
			If loc Is Nothing Then
				ThrowError(ERR_NO_DATA)
			End If
			Return loc
		End Function
		
		Public Function needSetArmCustomValue(arm As RobotArm) As Boolean
			If teachingPointCountPerArm > 1 Then
				Return True
			End If
			Dim ex As Exception
			Dim targetLoc As LocationEx
			
			Try 
				targetLoc = teachingLocation(1, arm, 1)
			Catch ex
				If IsError(ex,ERR_NO_DATA) = True Then
					ex = Nothing
					Return False
				Else
					Throw ex
				End If
			End Try
				
			'If do not use smart motion station. don't need set hand
			If targetLoc.type = COORD_CARTESIAN Then
				Return True
			Else
				Return False
			End If
		End Function
		
		Public Function getMostCloseTeachingPointDistance(refPoint As LocationEx, arm As RobotArm, ByRef returnTargetIndex As Integer) As Double
			Dim i As Integer
			Dim ex As Exception
			Dim distance As Double
			Dim point As LocationEx
			Dim minDistance As Double = MIN_DISTANCE_TO_CLOSE_CHECK
			Dim mostCloseIndex As Integer = 0
			For i = 1 To teachingPointCountPerArm
				Try
					point = teachingLocation(1,arm,i)
					distance = point.distance(refPoint)
					If distance < minDistance Then
						minDistance = distance
						mostCloseIndex = i
					End If
				Catch ex
					If IsError(ex,ERR_NO_DATA) = True Then
					Else
						Throw ex
					End If
					ex = Nothing
				End Try
			Next i
			If mostCloseIndex = 0 Then
				Return 9999
			Else
				returnTargetIndex = mostCloseIndex
				Return minDistance
			End If
		End Function
		
		Public Function getMostClosePathDistance(refPoint As LocationEx, arm As RobotArm, ByRef returnTargetIndex As Integer) As Double
			Dim i As Integer
			Dim ex As Exception
			Dim distance As Double
			Dim Point1ToRefDis As Double
			Dim centerToRefDis As Double
			Dim minDistance As Double = MIN_DISTANCE_TO_CLOSE_CHECK
			Dim CenterDistance As Double = 0
			Dim mostCloseIndex As Integer = 0
			
			Dim point1 As LocationEx
			Dim point2 As locationEx
			Dim point1Point2Center As locationEx = LocationEx.GetDestCartPos()
			Dim AddSurchOffset As Double
			Dim m As Double
			Dim a As Double
			Dim b As Double
			Dim c As Double 
			Dim m1 As Double 
			Dim c1 As Double
			Dim x1 As Double
			Dim y1 As Double
			If -m_putoffset > Math.Abs(m_putoffset-m_getoffset) Then
				AddSurchOffset = -m_putoffset + 0.5
			Else
				AddSurchOffset =Math.Abs(m_putoffset-m_getoffset) + 0.5
			End If
			For i = 1 To teachingPointCountPerArm - 1
				Try
					point1 = teachingLocation(1,arm,i)
					point2 = teachingLocation(1,arm,i+1)
					
					If point1.loc.type = 1 Then 
						point1 = point1.kinesol
					End If 
					
					If point2.loc.type = 1 Then
						point2 = point2.kinesol
					End If 
					
					If myRobot(Robot.Selected-1).isFlipExist() And i = 1 Then
						If Math.abs(point1.extra("F")-refPoint.extra("F"))>45 Then
							Exit For
						End If
					End If
					
					Try
						m = (point2.loc.Y-point1.loc.Y)/(point2.loc.X-point1.loc.X)
						a = m 
						b = -1 
						c = -m*point1.loc.x + point1.loc.y
						distance = Math.Abs(a*refPoint.loc.X + b*refPoint.loc.Y + c)/Math.Sqrt(Math.Pow(a,2)+Math.Pow(b,2))
					Catch ex
						If ex.ErrorCode = -708 Then
							distance = Math.Abs(refPoint.loc.X - point1.loc.X)
							ex = Nothing
						Else
							Throw ex
						End If
					End Try
					
					Point1ToRefDis = calcDistance(point1, refPoint)
		

					point1Point2Center.loc.X = (point2.loc.X+point1.loc.X)/2
					point1Point2Center.loc.Y = (point2.loc.Y+point1.loc.Y)/2
			
					
					CenterDistance = calcDistance(point1, point2)/2
					centerToRefDis = calcDistance(point1Point2Center, refPoint)
					Myconsole.WriteLine("station : " + CStr(stationNumber) + ", arm : " + CStr(arm.controlAxis) + ", i : " + CStr(i) + ", Distance : " + CStr(distance) + ", Center Dis: " + CStr(CenterDistance) + ", Point1ToRefDis : " + CStr(Point1ToRefDis))
					If i = 1 Then
						If ((distance < minDistance) And (centerToRefDis < (centerDistance+AddSurchOffset))) Or (Point1ToRefDis < minDistance) Then
							minDistance = distance
							mostCloseIndex = i
						End If
					Else
						If ((distance < minDistance) And (centerToRefDis < centerDistance)) Or (Point1ToRefDis < minDistance) Then
							minDistance = distance
							mostCloseIndex = i
						End If
					End If
				Catch ex
					If IsError(ex,ERR_NO_DATA) = True Then
					Else
						Throw ex
					End If
					ex = Nothing
				End Try
			Next i
			
			If mostCloseIndex = 0 Then
				Return 9999
			Else
				returnTargetIndex = mostCloseIndex
				Return minDistance
			End If
		End Function
		
		Public Function MoveMostClosePathDistance(refPoint As LocationEx, arm As RobotArm, minTargetIndex As Integer, mode As Integer) As locationEx
			Dim i As Integer
			Dim ex As Exception
			Dim distance As Double
			Dim Point1ToRefDis As Double
			Const MinOffsetDisError As Double = 0.01
			
			Dim minDistance As Double = MIN_DISTANCE_TO_CLOSE_CHECK
			Dim mostCloseIndex As Integer = 0
			
			Dim ClosePathLoc As locationEx = refPoint.clone
			Dim point1 As LocationEx
			Dim point2 As locationEx

			Dim m As Double
			Dim c As Double 
			Dim m1 As Double 
			Dim c1 As Double
			Dim x1 As Double
			Dim y1 As Double
			
			Dim mError As Double
			Const Min_mError As Double = 1.5'0.001
			
			Try
				point1 = teachingLocation(1,arm,minTargetIndex)
				point2 = teachingLocation(1,arm,minTargetIndex+1)
				
				If point1.loc.type = 1 Then 
					point1 = point1.kinesol
				End If 
				
				If point2.loc.type = 1 Then
					point2 = point2.kinesol
				End If 
				
				Try
					m = (point2.loc.Y-point1.loc.Y)/(point2.loc.X-point1.loc.X)
					c = -m*point1.loc.x + point1.loc.y			
					m1 = -1/m
					c1 = refPoint.loc.Y - m1*refPoint.loc.X
					x1 = (-c+c1)/(m-m1)
					y1 = m1*x1+c1
				Catch ex
					If ex.ErrorCode = -708 Then	'data is inf
					x1 = point1.loc.X
					y1 = refPoint.loc.Y
						ex = Nothing
					Else
						Throw ex
					End If
				End Try			
				
				Point1ToRefDis = calcDistance(point1, refPoint)
				
				If Point1ToRefDis < mindistance And minTargetIndex <> 1 Then
					ClosePathLoc.loc.X = point1.loc.X
					ClosePathLoc.loc.Y = point1.loc.Y
					closePathLoc.loc.Yaw = point1.loc.Yaw	
				Else
					ClosePathLoc.loc.X = x1
					ClosePathLoc.loc.Y = y1
					closePathLoc.loc.Yaw = point1.loc.Yaw	
				End If
			Catch ex
				If IsError(ex,ERR_NO_DATA) = True Then
				Else
					Throw ex
				End If
				ex = Nothing
			End Try
			Return ClosePathLoc
	
		End Function
		
		Public Function calcDistance(point1 As locationEx, point2 As locationEx) As Double
			Return Math.Sqrt(Math.Pow((point2.loc.X-point1.loc.X),2)+Math.Pow((point2.loc.Y-point1.loc.Y),2))
		End Function
		
	End Class

End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module StationManagerModule

	Public Dim MIN_DISTANCE_TO_CLOSE_CHECK As Double = 50 ' 5 cm
	
	Public Class StationManager
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim stations() As Station
		
		Private Dim m_stationCount As Integer
		Public ReadOnly Property stationCount As Integer
	        Get 
	            Return m_stationCount
	        End Get
	    End Property
		
		Private Dim m_mapStationCount As Integer
		Public ReadOnly Property mapStationCount As Integer
	        Get
	            Return m_mapStationCount
	        End Get
	    End Property
		
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(stationCount As Integer, mapStationCount As Integer)
			m_stationCount = stationCount
			m_mapStationCount = mapStationCount
			Load()
		End Sub
		
		Public Sub load()
			Dim i As Integer
			ReDim stations(m_stationCount-1)
			For i = 0 To m_stationCount-1
				Me.stations(i) = New Station(i+1,"/flash/data/station" & CStr(i+1) & ".dat")
			Next i
		End Sub
		
		Public Sub save()
			Dim i As Integer
			For i = 1 To m_stationCount
				Me.stations(i).save()
			Next i
		End Sub
		
		Public Sub checkStageNumber(stage As Integer)
			If (stage < 1) Or (stage > stationCount) Then
				ThrowError(ERR_INVALID_STATION)
			End If
		End Sub
		
		Public Sub checkMapStageNumber(stage As Integer)
			If (stage < 1) Or (stage > mapStationCount) Then
				ThrowError(ERR_INVALID_STATION)
			End If
		End Sub
		
		Public Function getStation(stage As Integer) As Station
			checkStageNumber(stage)
			Return stations(stage-1)
		End Function

		Public Function searchSafetyPos(ByRef targetMotionLoger As RobotMotionLoger,arm As RobotArm,mode As Integer) As locationEx
			Dim otherarm As RobotArm
			searchSafetyPos(targetMotionLoger,arm,otherarm,mode)
		End Function
		
		Public Function searchSafetyPos(ByRef targetMotionLoger As RobotMotionLoger,arm As RobotArm, otherarm As RobotArm, mode As Integer) As LocationEx
			Dim curPos As LocationEx
			Dim curloc As locationEx = locationEx.GetDestJointPos()
			Dim moveloc As LocationEx
			If CInt(thePDBManager.getPDB(PDB_ROBOT_TYPE)) = 1 Then 'joint only
				curPos = LocationEx.GetDestJointPos()
			Else
				curPos = LocationEx.GetDestCartPos()
			End If
			Dim distance As Double
			Dim returnTargetIndex As Integer
			Dim stageIndex As Integer
			Dim stageEndIndex As Integer
			Dim minTargetStation As Integer = 0
			Dim minTargetIndex As Integer = 0
			Dim minSecondTargetStation As Integer = 0
			Dim minSecondTargetIndex As Integer = 0
			Dim SecondDistance As Double = 0 
			
			Dim minDistance As Double = MIN_DISTANCE_TO_CLOSE_CHECK
			Dim s As Integer
			
			If targetMotionLoger.lastStage <> 0 Then
				stageIndex = targetMotionLoger.lastStage
				stageEndIndex = targetMotionLoger.lastStage
			Else
				stageIndex = 1
				stageEndIndex = stationCount
			End If
			
			For s = stageindex To stageEndIndex
				If stations(s-1).isUseSmartMotion() = True Then
					If theSystem.CheckUseWhenSCARAOrg(s) = 1 Then 
						distance = stations(s-1).getMostClosePathDistance(curPos,arm,returnTargetIndex)
						
						If distance < minDistance Then
							minSecondTargetIndex = minTargetIndex
							SecondDistance = minDistance
							minSecondTargetStation = minTargetStation
							
							minTargetIndex = returnTargetIndex
							minDistance = distance
							minTargetStation = s
							If minSecondTargetStation <> 0 Then 
								Dim minloc As locationEx 
								Dim minsecondloc As locationEx
								Dim sumMinloc As Double
								Dim sumMinsecondloc As Double
								minloc = stations(minTargetStation-1).teachingLocation(1,arm,minTargetIndex)
								minsecondloc = stations(minSecondTargetStation-1).teachingLocation(1,arm,minSecondTargetIndex)
								If minloc.loc.type = 0 Then 
									minloc = minloc.kinesol
									minloc = modifyAxisPos(curloc,minloc,myRobot(Robot.Selected-1).controlAxis("T"))
									minloc = modifyAxisPos(curloc,minloc,arm.elbowControlAxis)
									minloc = modifyAxisPos(curloc,minloc,arm.ControlAxis)
'									minloc = modifyAxisPos(curloc,minloc, myRobot(Robot.Selected-1).controlAxis("2"))													
									If myRobot(Robot.Selected-1).armcount = 2 Then 
										minloc = modifyAxisPos(curloc,minloc,otherarm.ControlAxis)
									End If 
								End If 
								If minsecondloc.loc.type = 0 Then
									minsecondloc = minsecondloc.kinesol
									minsecondloc = modifyAxisPos(curloc,minloc,myRobot(Robot.Selected-1).controlAxis("T"))
									minsecondloc = modifyAxisPos(curloc,minloc,arm.elbowControlAxis)
									minsecondloc = modifyAxisPos(curloc,minloc,arm.ControlAxis)
'									minsecondloc = modifyAxisPos(curloc,minloc, myRobot(Robot.Selected-1).controlAxis("2"))
																					  
									If myRobot(Robot.Selected-1).armcount = 2 Then
										minsecondloc = modifyAxisPos(curloc,minloc,otherarm.ControlAxis)
									End If 
								End If 
'								sumMinloc = minloc.loc.angle(arm.elbowControlAxis) + minloc.loc.angle(myRobot(Robot.selected-1).controlAxis("T")) + minloc.loc.angle(arm.controlAxis)
'								sumMinsecondloc = minsecondloc.loc.angle(arm.elbowControlAxis) + minsecondloc.loc.angle(myRobot(Robot.selected-1).controlAxis("T")) + minsecondloc.loc.angle(arm.controlAxis)
'								
'								
'								If sumMinloc <= sumMinsecondloc Or (otherarm Is Nothing) Then
'									minTargetIndex = returnTargetIndex
'									minDistance = distance
'									minTargetStation = s
'								Else 
'									minTargetIndex = minSecondTargetIndex
'									minDistance = SecondDistance
'									minTargetStation = minSecondTargetStation
'								End If 
							End If 
						End If
					
					End If 
				End If
			Next s
			
			If minTargetStation <> 0 Then
				targetMotionLoger.lastStage = minTargetStation
				targetMotionLoger.lastIndex = minTargetIndex
				targetMotionLoger.lastSelectedArmIndex = arm.armIndex
			Else 
				Exit Function
			End If

			moveLoc = stations(minTargetStation-1).MoveMostClosePathDistance(curPos,arm,minTargetIndex,mode)
			Myconsole.WriteLine("Select Path - station : " + CStr(minTargetStation) + ", arm : " + CStr(arm.controlAxis) + ", i : " + CStr(minTargetIndex) + ", Distance : " + CStr(minDistance) + ", X : " + CStr(moveLoc.Loc.X) + ", Y : " + CStr(moveLoc.Loc.Y))

			If moveLoc.loc.type = COORD_CARTESIAN Then
				moveLoc = moveLoc.kineSol
			End If
			If Not(otherarm Is Nothing) Then
				moveloc = fixcurPosHand(curloc,moveloc, otherarm)
			End If
			moveloc = modifyAxisPos(curloc,moveloc, arm.elbowControlAxis)
			moveloc = modifyAxisPos(curloc,moveloc, arm.ControlAxis)
			moveloc = modifyAxisPos(curloc,moveloc, myRobot(Robot.Selected-1).controlAxis("T"))
'			moveloc = modifyAxisPos(curloc,moveloc, myRobot(Robot.Selected-1).controlAxis("2"))
												 
			If myRobot(Robot.Selected-1).armcount = 2 Then
				moveloc = modifyAxisPos(curloc,moveloc, otherarm.ControlAxis)
			End If 
			
			If minTargetIndex = 1 Then
				moveloc = moveloc.kinesol
			End If
			Return moveLoc
			
		End Function 
		
		Public Function modifyAxisPos(curloc As locationEx, moveLoc As locationEx, index As Integer) As locationEx
			Dim currentPos As locationEx = locationEx.GetCurJointPos()
			If Math.Abs(curloc.loc.angle(index)-moveLoc.loc.angle(index)) > 180 Then
				If curloc.loc.angle(index) < moveLoc.loc.angle(index) Then
					moveLoc.loc.angle(index) = moveLoc.loc.angle(index) - 360
				Else
					moveLoc.loc.angle(index) = moveLoc.loc.angle(index) + 360
				End If
			End If 
			
			If index = myRobot(Robot.Selected-1).controlAxis("2") Then
				moveLoc.loc.angle(index) = currentPos.loc.angle(index)
			End If
			Return moveloc	
		End Function
		
		Public Function fixcurPosHand(curloc As locationEx, moveLoc As locationEx, otherarm As RobotArm) As locationEx
			moveLoc.loc.angle(otherarm.controlAxis) = curloc.loc.angle(otherarm.controlAxis)
			Return moveloc
		End Function
		
	End Class

End Module
'Created: 8/22/2011 5:29:25 PM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module SystemModule
	
	Public Class System
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim datafile As DataFile
		Private Dim fileName As String
		
		Private Dim m_interLockCheckModeAutoOn As Boolean = False
		Public Property interLockCheckModeAutoOn As Boolean
	        Get
	            Return m_interLockCheckModeAutoOn
	        End Get
			Set (value As Boolean)
	            m_interLockCheckModeAutoOn = value
	        End Set
	    End Property
		
		'add mujin time send 2015-04-27
		Private Dim m_SendTimeofMotion As Boolean = False
		Public Property SendTimeofMotion As Boolean
	        Get
	            Return m_SendTimeofMotion
	        End Get
			Set (value As Boolean)
	            m_SendTimeofMotion = value
	        End Set
	    End Property
		
		Private Dim m_readyTeachingPointInterval As Integer
		Public ReadOnly Property ReadyTeachingPointInterval As Integer
			Get
				Return m_readyTeachingPointInterval
			End Get
		End Property
		
		Private Dim m_armTeachingPointInterval As Integer
		Public ReadOnly Property ArmTeachingPointInterval As Integer
			Get
				Return m_armTeachingPointInterval
			End Get
		End Property
		
		Private Dim m_mapStartTeachingPointBase As Integer
		Public ReadOnly Property MapStartTeachingPointBase As Integer
			Get
				Return m_mapStartTeachingPointBase
			End Get
		End Property
		
		Private Dim m_mapEndTeachingPointBase As Integer
		Public ReadOnly Property MapEndTeachingPointBase As Integer
			Get
				Return m_mapEndTeachingPointBase
			End Get
		End Property

		Private Dim m_BladeMapStartTeachingPointBase As Integer
		Public ReadOnly Property BladeMapStartTeachingPointBase As Integer
			Get
				Return m_BladeMapStartTeachingPointBase
			End Get
		End Property
		
		Private Dim m_BladeMapEndTeachingPointBase As Integer
		Public ReadOnly Property BladeMapEndTeachingPointBase As Integer
			Get
				Return m_BladeMapEndTeachingPointBase
			End Get
		End Property
		
		Private Dim m_stationCount As Integer
		Public ReadOnly Property StationCount As Integer
			Get
				Return m_stationCount
			End Get
		End Property
		
		Private Dim m_mappintStationCount As Integer
		Public ReadOnly Property MappintStationCount As Integer
			Get
				Return m_mappintStationCount
			End Get
		End Property
		
		Private Dim m_tcpipPortNum As Integer
		Public Property tcpipPortNum As Integer
	        Set (value As Integer)
	           	m_tcpipPortNum = value
	        End Set
	        Get 
	            Return m_tcpipPortNum
	        End Get
	    End Property
		
		Private Dim m_RIOaddress(MAX_CANTAPS_IO_BOARD_COUNT) As String
		Public Property rioAddress(index As Integer) As String
	        Set (value As String)
				If index >= 0 And index < MAX_CANTAPS_IO_BOARD_COUNT Then
	           		m_RIOaddress(index) = value
				Else
					throwError(ERR_INVALID_ARGUMENT)
				End If
	        End Set
	        Get 
				If index >= 0 And index < MAX_CANTAPS_IO_BOARD_COUNT Then
	            	Return m_RIOaddress(index)
				Else
					throwError(ERR_INVALID_ARGUMENT)
				End If
	        End Get
	    End Property
		
		Private Dim m_demo As Integer
		Public Property demoMode As Integer
	        Set (value As Integer)
	           	m_demo = value
	        End Set
	        Get 
	            Return m_demo
	        End Get
	    End Property
		
		Private Dim m_crashDetectUse As Integer
		Public Property crashDetectUse As Integer
	        Set (value As Integer)
	           	m_crashDetectUse = value
	        End Set
	        Get 
	            Return m_crashDetectUse
	        End Get
	    End Property
		
		Private Dim m_interlock As Integer
		Public Property interlockMode As Integer
	        Set (value As Integer)
	           	m_interlock = value
	        End Set
	        Get 
	            Return m_interlock
	        End Get
	    End Property
		
		Private Dim m_unuseInterlockStationList As String
		Public ReadOnly Property unuseInterlockStationList As String
	        Get 
	            Return m_unuseInterlockStationList
	        End Get
	    End Property
		
		Private Dim m_useZPosErrorCheck As Integer
		Public Property useZPosErrorCheck As Integer
	        Set (value As Integer)
	           	m_useZPosErrorCheck = value
	        End Set
	        Get 
	            Return m_useZPosErrorCheck
	        End Get
	    End Property
		
		Private Dim m_zPositionErrorSize As Double
		Public Property zPositionErrorSize As Double
	        Set (value As Double)
	           	m_zPositionErrorSize = value
	        End Set
	        Get 
	            Return m_zPositionErrorSize
	        End Get
	    End Property
		
		Private Dim m_mappingOnDelay As Integer
		Public Property mappingOnDelay As Integer
	        Set (value As Integer)
	           	m_mappingOnDelay = value
	        End Set
	        Get 
	            Return m_mappingOnDelay
	        End Get
	    End Property
		
		Private Dim m_suctionOnTime As Integer
		Public Property suctionOnTime As Integer
	        Set (value As Integer)
	           	m_suctionOnTime = value
	        End Set
	        Get 
	            Return m_suctionOnTime
	        End Get
	    End Property
		
		Private Dim m_suctionOffTime As Integer
		Public Property suctionOffTime As Integer
	        Set (value As Integer)
	           	m_suctionOffTime = value
	        End Set
	        Get 
	            Return m_suctionOffTime
	        End Get
	    End Property
		
		Private Dim m_retryCount As Integer
		Public Property retryCount As Integer
	        Set (value As Integer)
	           	m_retryCount = value
	        End Set
	        Get 
	            Return m_retryCount
	        End Get
	    End Property
		
		Private Dim m_bladeGapError As Double
		Public Property bladeGapError As Double
	        Set (value As Double)
				m_bladeGapError = value
	        End Set
	        Get
	            Return m_bladeGapError
	        End Get
	    End Property
		
		Private Dim m_gripperMinimumTime As Integer
		Public Property gripperMinimumTime As Integer
	        Set (value As Integer)
				m_gripperMinimumTime = value
	        End Set
	        Get
	            Return m_gripperMinimumTime
	        End Get
	    End Property
		
		Private Dim m_gripperMaximumTime As Integer
		Public Property gripperMaximumTime As Integer
	        Set (value As Integer)
				m_gripperMaximumTime = value
	        End Set
	        Get
	            Return m_gripperMaximumTime
	        End Get
	    End Property
		
		'160122 bwjung Auto/Manual Speed divide
		Private Dim m_useAutoManualSpeed As Boolean = False
		Public Property useAutoManualSpeed As Boolean
	        Get
	            Return m_useAutoManualSpeed
	        End Get
			Set (value As Boolean)
	            m_useAutoManualSpeed = value
	        End Set
	    End Property
		
		Private Dim m_ORGBoxWidth As Double = 260
		Public Property ORGBoxWidth As Double
	        Get
	            Return m_ORGBoxWidth
	        End Get
			Set (value As Double)
	            m_ORGBoxWidth = value
	        End Set
	    End Property
		
		Private Dim m_ORGBoxHeight As Double = 355
		Public Property ORGBoxHeight As Double
	        Get
	            Return m_ORGBoxHeight
	        End Get
			Set (value As Double)
	            m_ORGBoxHeight = value
	        End Set
	    End Property

		Private Dim m_FanErrorFlg As Integer = True
		Public Property FanErrorFlg As Integer
	        Get
	            Return m_FanErrorFlg
	        End Get
			Set (value As Integer)
	            m_FanErrorFlg = value
	        End Set
	    End Property
		
		Private Dim m_isUseWhenSCARAOrg As String 
		Public Property isUseWhenSCARAOrg As String
	        Get
	            Return m_isUseWhenSCARAOrg
	        End Get
			Set (value As String)
	            m_isUseWhenSCARAOrg = value
	        End Set
	    End Property
		
		Private Dim IgnoreBatteryWarning As Integer
		Public Property IgnoreBatteryWarning As Boolean
	        Get
	            Return CBool(Me.IgnoreBatteryWarning)
	        End Get
			Set (value As Boolean)
				If value Then
					Me.IgnoreBatteryWarning = 1
				Else
					Me.IgnoreBatteryWarning = 0
				End If
	        End Set
	    End Property
		
		Private Dim m_IsUseRetryCountLog As Boolean = False
		Public Property IsUseRetryCountLog As Boolean
	        Get
	            Return m_IsUseRetryCountLog
	        End Get
			Set (value As Boolean)
	            m_IsUseRetryCountLog = value
	        End Set
	    End Property
		
		Public Dim CurrentRetryCount As Integer = 0
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(fileName As String)
			datafile = Nothing
			Me.fileName = fileName
			load()
		End Sub
		
		Public Sub load()
			Dim i As Integer
			
			datafile = New DataFile(fileName)
			
			m_tcpipPortNum = CInt(datafile.GetValue("TcpipPortNum","4000"))
			For i = 1 To MAX_CANTAPS_IO_BOARD_COUNT
				m_RIOaddress(i-1) = datafile.GetValue("RIOADDRESS_" + CStr(i),"192.168.0." + CStr(10+i))
			Next i
			
			m_demo = CInt(datafile.GetValue("Demo","0"))
			m_interlock = CInt(datafile.GetValue("Interlock","1"))
			m_unuseInterlockStationList = datafile.GetValue("UnuseInterlockStationList","")
			m_FanErrorFlg = CInt(datafile.GetValue("FanErrorFlg","1"))
			
			m_crashDetectUse = CInt(datafile.GetValue("CrashDetectUse","0"))
			m_useZPosErrorCheck = CInt(datafile.GetValue("UseZPosErrorCheck","0"))
			m_zPositionErrorSize = CDbl(datafile.GetValue("ZPositionErrorSize","0.5"))
			
			m_mappingOnDelay = CInt(datafile.GetValue("MappingOnDelay","2000"))
			m_suctionOnTime = CInt(datafile.GetValue("SuctionOnTime","300"))
			m_suctionOffTime = CInt(datafile.GetValue("SuctionOffTime","300"))
			
			m_retryCount = CInt(datafile.GetValue("RetryCount","0"))
			
			m_gripperMinimumTime = CInt(datafile.GetValue("GripperMinimumTime","190"))
			m_gripperMaximumTime = CInt(datafile.GetValue("GripperMaximumTime","3000"))
			
			m_bladeGapError = CDbl(datafile.GetValue("BladeGapError","0.5"))
			
			m_readyTeachingPointInterval = CInt(datafile.GetValue("ReadyTeachingPointInterval","20"))
			m_armTeachingPointInterval = CInt(datafile.GetValue("ArmTeachingPointInterval","100"))
			m_mapStartTeachingPointBase = CInt(datafile.GetValue("MapStartTeachingPointBase","400"))
			m_mapEndTeachingPointBase = CInt(datafile.GetValue("MapEndTeachingPointBase","420"))
			m_BladeMapStartTeachingPointBase = CInt(datafile.GetValue("BladeMapStartTeachingPointBase","500"))
			m_BladeMapEndTeachingPointBase = CInt(datafile.GetValue("BladeMapEndTeachingPointBase","520"))
			m_stationCount = CInt(datafile.GetValue("StationCount","20"))
			m_mappintStationCount = CInt(datafile.GetValue("MappintStationCount","20"))
			m_isUseWhenSCARAOrg = datafile.GetValue("isUseWhenSCARAOrg")
			Me.IgnoreBatteryWarning = CInt(datafile.GetValue("IgnoreBatteryWarning","1"))
		End Sub
		
		Public Sub save()
			Dim i As Integer
			
			datafile.SetValue("TcpipPortNum", CStr(m_tcpipPortNum))
			For i = 1 To MAX_CANTAPS_IO_BOARD_COUNT
				datafile.SetValue("RIOADDRESS_" + CStr(i), m_RIOaddress(i-1))
			Next i
			
			datafile.SetValue("Demo", CStr(m_demo))
			datafile.SetValue("Interlock", CStr(m_interlock))
			datafile.SetValue("UnuseInterlockStationList",m_unuseInterlockStationList)
			datafile.SetValue("FanErrorFlg", CStr(m_FanErrorFlg))
			
			datafile.SetValue("CrashDetectUse", CStr(m_crashDetectUse))
			datafile.SetValue("UseZPosErrorCheck", CStr(m_useZPosErrorCheck))
			datafile.SetValue("ZPositionErrorSize", CStr(m_zPositionErrorSize))
			
			datafile.SetValue("MappingOnDelay", CStr(m_mappingOnDelay))
			datafile.SetValue("SuctionOnTime", CStr(m_suctionOnTime))
			datafile.SetValue("SuctionOffTime", CStr(m_suctionOffTime))
			
			datafile.SetValue("RetryCount", CStr(m_retryCount))
			
			datafile.SetValue("GripperMinimumTime", CStr(m_gripperMinimumTime))
			datafile.SetValue("GripperMaximumTime", CStr(m_gripperMaximumTime))
			
			datafile.SetValue("BladeGapError", CStr(m_bladeGapError))
			
			datafile.SetValue("ReadyTeachingPointInterval", CStr(m_readyTeachingPointInterval))
			datafile.SetValue("ArmTeachingPointInterval", CStr(m_armTeachingPointInterval))
			datafile.SetValue("MapStartTeachingPointBase", CStr(m_mapStartTeachingPointBase))
			datafile.SetValue("MapEndTeachingPointBase", CStr(m_mapEndTeachingPointBase))
			datafile.SetValue("BladeMapStartTeachingPointBase", CStr(m_BladeMapStartTeachingPointBase))
			datafile.SetValue("BladeMapEndTeachingPointBase", CStr(m_BladeMapEndTeachingPointBase))
			
			datafile.SetValue("StationCount", CStr(m_stationCount))
			datafile.SetValue("MappintStationCount", CStr(m_mappintStationCount))
			datafile.SetValue("isUseWhenSCARAOrg", m_isUseWhenSCARAOrg)
			datafile.SetValue("IgnoreBatteryWarning", CStr(Me.IgnoreBatteryWarning))
		
			datafile.Save
		End Sub
		
		Public Function getValue(itemName As String) As String
			Return datafile.GetValue(itemName)
		End Function
		
		Public Function getValue(itemName As String, defValue As String) As String
			Return datafile.GetValue(itemName, defValue)
		End Function
		
		Public Sub setValue(itemName As String, value As String)
			datafile.SetValue(itemName, value)
		End Sub
		
		Public Function CheckUseWhenSCARAOrg(stage As Integer) As Integer
			Dim str() As String 
			str = isUseWhenSCARAOrg.Split(",")
			Dim i As Integer
	
			For i = 0 To str.Length - 1
				If CInt(str(i)) = stage Then
					Return 1
				End If 
			Next i
			Return 0 		
		End Function

	End Class
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module UserSaveModule

'example
'Dim str As String
'str = theUserSaveData.load(5)
'str = theUserSaveData.load(1)
'theUserSaveData.save(5,"test||\\aa")
'str = theUserSaveData.load(5)

	Public Class UserSaveData
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		Private Dim saveDatafile As DataFile
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(filename As String)
			Dim ex As Exception
			Try
				saveDatafile = New DataFile(filename)
			Catch ex
				If ex.ErrorCode = -508 Then 'file not exist
					saveDatafile = New DataFile()
					saveDatafile.fileName = filename
				Else
					Throw ex
				End If
			End Try
		End Sub

		Public Function Load(keyIndex As Integer) As String
			Return saveDatafile.GetValue(CStr(keyIndex))
		End Function

		Public Sub Save(keyIndex As Integer,saveData As String)
			If keyIndex >= 0 And keyIndex < 100 Then
				saveDatafile.SetValue(CStr(keyIndex), saveData)
				saveDatafile.Save
			Else
				throwError(ERR_INVALID_PD_INDEX)
			End If
		End Sub

	End Class

End Module

'Created: 8/12/2011 5:32:51 PM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module ErrorModule
	
	Public Const PROJECT_CUSTOM_ERROR As Integer = -786
	
	Public Const ERR_EMERGENCY As Integer = 4
	Public Const ERR_MOTOR_ERROR As Integer = 12
	
	Public Const ERR_WAIT_TIMEOUT As Integer = 190
	Public Const ENCODER_RESET_TIMEOUT As Integer = 193
	Public Const ERR_INTERLOCK As Integer = 194
	Public Const ERR_DATA_RANGE As Integer = 201
	
	Public Const ERR_WAFER_BEFORE_GET As Integer = 202
	Public Const ERR_NO_WAFER_BEFORE_PUT As Integer = 203
	Public Const ERR_NO_WAFER_AFTER_GET As Integer = 204
	Public Const ERR_WAFER_AFTER_PUT As Integer = 205
	Public Const ERR_NO_WAFER_DURING_GET As Integer = 206
	Public Const ERR_NO_WAFER_DURING_PUT As Integer = 207
	
	Public Const ERR_NOT_HOME As Integer = 208
	Public Const ERR_NOT_SUPPORTED_FUNC As Integer = 209
	Public Const ERR_WAFER_OUT As Integer = 210
	Public Const ERR_WAFER_SLIP As Integer = 211
	Public Const OVER_WAFER_DURING_GET As Integer = 212
	Public Const ERR_PLATE_CHECK As Integer = 213
	Public Const ERR_PUSHER_SPEED_HIGH As Integer = 214
	Public Const ERR_RETRACT_RANGE_OUT As Integer = 215
	Public Const ERR_NOT_CORRECT_BLADE_POS As Integer = 241
	Public Const ERR_MAPPING_IS_NOT_PERFORMED As Integer = 251
	Public Const ERR_NO_MAPPING_DATA As Integer = 252
	Public Const ALREADY_LATCH_BLOCKED As Integer = 253
	Public Const ERR_DOUBLE_MAPPING_DETECT As Integer = 254
	Public Const ERR_POSITION_CHECK As Integer = 299
	Public Const ERR_CANNOT_UNGRIP As Integer = 300
	
	
	Public Const ERR_INVALID_COMMAND As Integer = 1001
	Public Const ERR_INVALID_DATA As Integer = 1011
	Public Const ERR_INVALID_STATION As Integer = 1012
	Public Const ERR_INVALID_HAND As Integer = 1013
	Public Const ERR_INVALID_SLOT As Integer = 1014
	Public Const ERR_INVALID_TEACHING_INDEX As Integer = 1015
	Public Const ERR_INVALID_PD_INDEX As Integer = 1016
	Public Const ERR_INVALID_HAND_TYPE As Integer = 1017
	
	Public Const ERR_INVALID_COORDINATE_TYPE As Integer = 1021
	Public Const ERR_INVALID_ARGUMENT As Integer = 1031
	Public Const ERR_INVALID_FORMAT As Integer = 1033
	Public Const ERR_INVALID_LOCATION_FORMAT As Integer = 1034
	Public Const ERR_INVALID_PROFILE_FORMAT As Integer = 1035
	Public Const ERR_INVALID_PARAMETER As Integer = 1036
	Public Const ERR_WRONG_TEACHING_DATA As Integer = 1040
	Public Const ERR_WRONG_PD_COMMAND As Integer = 1041
	Public Const ERR_WRONG_AWC_DATA As Integer = 1042
	Public Const ERR_NO_AWC_STATION As Integer = 1043
	Public Const ERR_WRONG_LATCH_DATA As Integer = 1044
	Public Const ERR_NO_LATCH_DATA As Integer = 1045
	Public Const ERR_NO_DATA As Integer = 1051
	Public Const ERR_CANNOT_RETRACT_ARM As Integer = 1053
	Public Const ERR_CANNOT_FLIP_ARM As Integer = 1054
	Public Const ERR_NOT_READYPOS As Integer = 1061
	Public Const ERR_NOW_ON_MOVE As Integer = 1071
	Public Const Z_POSITION_ERR_DETECTED As Integer = 1072
	Public Const ERR_FLIP_TURN_INTERLOCK As Integer = 1078
	
	Public Const ERR_CONTROL_BOX_FAN As Integer = 1080
	Public Const ERR_ROBOT_FAN As Integer = 1081
	
	Public Const ERR_AIRSTOP_ERROR As Integer = 1100 
	Public Const ERR_TIME_OUT_DC_VOLT_DOWN As Integer = 1200
	
	'network error
	Public Const ERR_RECEIVEBUF_FULL As Integer = 2001
	Public Const ERR_SENDBUF_FULL As Integer = 2002
	Public Const IO_RECEIVE_ERROR As Integer = 2003
	Public Const ERR_EMORESETBOARD_NOT_CONNECTED As Integer = 2004
	
	'Dynax Error Category
	Public Const COMMNUNICATION_ERROR As Integer = 10000
	Public Const ERR_RECEIVE_COMMAND_IN_RUNNING As Integer = (COMMNUNICATION_ERROR + 1)
	Public Const ERR_RECEIVE_COMMAND_IN_ERROR As Integer = (COMMNUNICATION_ERROR + 2)
	Public Const ERR_WRONG_COMMAND_FORMAT As Integer = (COMMNUNICATION_ERROR + 6)
	Public Const ERR_COMMAND_NOT_EXIST As Integer = (COMMNUNICATION_ERROR + 12)



	Public Sub ThrowError(code As Integer)
		Throw RobotErrorHandler.makeUserException(code)
	End Sub
	
	Public Sub ThrowSystemError(code As Integer, message As String, axis As Integer)
		Throw RobotErrorHandler.makeSystemException(code,message,axis)
	End Sub
	
	Public Function GetErrorCode(ex As Exception) As Integer
		If ex Is Nothing Then
			Return 0
		Else
			If ex.ErrorCode = PROJECT_CUSTOM_ERROR Then
				Return ex.Qualifier
			Else
				Return ex.ErrorCode
			End If
		End If
	End Function
	
	Public Function IsError(ex As Exception,code As Integer) As Boolean
		If GetErrorCode(ex) = code Then
			Return True
		Else
			Return False
		End If
	End Function
	
	Public Class RobotErrorHandler
	
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''' SHARED ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Shared Public Function makeUserException(errorCode As Integer) As Exception
			Dim ex As New Exception
			ex.ErrorCode = PROJECT_CUSTOM_ERROR
			ex.Qualifier = errorCode
			Return ex
		End Function
		
		Shared Public Function makeSystemException(errorCode As Integer, message As String, axis As Integer) As Exception
			Dim ex As New Exception
			ex.ErrorCode = errorCode
			ex.RobotError = True
			ex.RobotNum = Robot.Selected
			ex.Axis = axis
			ex.Message = message
			Return ex
		End Function
		
		
		
		
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim currentError As Exception
		
		Private Dim m_ignoreCurrentSystemError As Boolean = False
		Public Property ignoreCurrentSystemError As Boolean
			Set (value As Boolean)
				m_ignoreCurrentSystemError = value
			End Set
			Get
				Return m_ignoreCurrentSystemError
			End Get
		End Property
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New()
			clearError()
		End Sub
		
		Public Sub handleError(ByRef ex As Exception)
			
			If ex.errorCode = -1029 Or ex.errorCode = -1043 Then 'system Error indicate
				Thread.Sleep(10)
				ex = getCurrentSystemError()
				If ex.errorCode = -3109 Then 'EMOReset IO Board is Not Connected 
					If protocolHandler.ExternalEMOResetBoardIndex <>0 Then
						If cantapsIO(protocolHandler.ExternalEMOResetBoardIndex-1).isConnected = False Then
							ex = makeUserException(ERR_EMORESETBOARD_NOT_CONNECTED)
						End If
					End If
				End If
			ElseIf ex.errorCode = -1028 Then 'hard stop
				ex = makeUserException(ERR_EMERGENCY)
			ElseIf ex.errorCode = -1006 Then 'already attached
				ex = makeUserException(ERR_NOW_ON_MOVE)
			ElseIf ex.errorCode = -1600 Then ' power off request
				ex.errorCode = 0
			ElseIf ex.errorCode = -1045 Then ' Soft E-Stop (stop by ASS Or Stop button)
				If GetErrorCode(getCurrentError(True)) = Z_POSITION_ERR_DETECTED Then
					ex = currentError
					Return
				Else
					ex.errorCode = 0
				End If
			ElseIf ex.errorCode = -3109 Then 'EMOReset IO Board is Not Connected 
				If protocolHandler.ExternalEMOResetBoardIndex <>0 Then
					If cantapsIO(protocolHandler.ExternalEMOResetBoardIndex-1).isConnected = False Then
						ex = makeUserException(ERR_EMORESETBOARD_NOT_CONNECTED)
					End If
				End If
			End If
			
			Select GetErrorCode(ex)
			Case 4
				ex.Message = "ERR_EMERGENCY"
			Case 12
				ex.Message = "ERR_MOTOR_ERROR"
			Case 190
				ex.Message = "ERR_WAIT_TIMEOUT"
			Case 193
				ex.Message = "ENCODER_RESET_TIMEOUT"
			Case 194
				ex.Message = "ERR_INTERLOCK"
			Case 201
				ex.Message = "ERR_DATA_RANGE"
			Case 202
				ex.Message = "ERR_WAFER_BEFORE_GET"
			Case 203
				ex.Message = "ERR_NO_WAFER_BEFORE_PUT"
			Case 204
				ex.Message = "ERR_NO_WAFER_AFTER_GET"
			Case 205
				ex.Message = "ERR_WAFER_AFTER_PUT"
			Case 206
				ex.Message = "ERR_NO_WAFER_DURING_GET"
			Case 207
				ex.Message = "ERR_WAFER_DURING_PUT"
			Case 208
				ex.Message = "ERR_NOT_HOME"
			Case 209
				ex.Message = "ERR_NOT_SUPPORTED_FUNC"
			Case 210
				ex.Message = "ERR_WAFER_OUT"
			Case 211
				ex.Message = "ERR_WAFER_SLIP"
			Case 212
				ex.Message= "OVER_WAFER_DURING_GET"
			Case 213
				ex.Message = "ERR_PLATE_CHECK"
			Case 214
				ex.Message = "ERR_PUSHER_SPEED_HIGH"
			Case 215
				ex.Message = "ERR_RETRACT_RANGE_OUT"
			Case 241
				ex.message = "ERR_NOT_CORRECT_BLADE_POS"
			Case 251
				ex.Message = "ERR_MAPPING_IS_NOT_PERFORMED"
			Case 252
				ex.Message = "ERR_NO_MAPPING_DATA"
			Case 253
				ex.Message = "ALREADY_LATCH_BLOCKED"
			Case 254
				ex.Message = "ERR_DOUBLE_MAPPING_DETECT"
			Case 299
				ex.Message = "ERR_POSITION_CHECK"
			Case 300
				ex.Message = "ERR_CANNOT_UNGRIP"
			Case 1001
				ex.Message = "ERR_INVALID_COMMAND"
			Case 1011
				ex.Message = "ERR_INVALID_DATA"
			Case 1012
				ex.Message = "ERR_INVALID_STATION"
			Case 1013
				ex.Message = "ERR_INVALID_HAND"
			Case 1014
				ex.Message = "ERR_INVALID_SLOT"
			Case 1015
				ex.Message = "ERR_INVALID_TEACHING_INDEX"
			Case 1016
				ex.Message = "ERR_INVALID_PD_INDEX"
			Case 1017
				ex.Message = "ERR_INVALID_HAND_TYPE"
			Case 1021
				ex.Message = "ERR_INVALID_COORDINATE_TYPE"
			Case 1031
				ex.Message = "ERR_INVALID_ARGUMENT"
			Case 1033
				ex.Message = "ERR_INVALID_FORMAT"
			Case 1034
				ex.Message = "ERR_INVALID_LOCATION_FORMAT"
			Case 1035
				ex.Message = "ERR_INVALID_PROFILE_FORMAT"
			Case 1036
				ex.Message = "ERR_INVALID_PARAMETER"
			Case 1040
				ex.Message = "ERR_WRONG_TEACHING_DATA"
			Case 1041
				ex.Message = "ERR_WRONG_PD_COMMAND"
			Case 1042
				ex.Message = "ERR_WRONG_AWC_DATA"
			Case 1043
				ex.Message = "ERR_NO_AWC_STATION"
			Case 1044
				ex.message = "ERR_WRONG_LATCH_DATA"
			Case 1045
				ex.message = "ERR_NO_LATCH_DATA"
			Case 1051
				ex.Message = "ERR_NO_DATA"
			Case 1053
				ex.Message = "ERR_CANNOT_RETRACT_ARM"
			Case 1054
				ex.Message = "ERR_CANNOT_FLIP_ARM"
			Case 1061
				ex.Message = "ERR_NOT_READYPOS"
			Case 1071
				ex.Message = "ERR_NOW_ON_MOVE"
			Case 1072
				ex.message = "Z_POSITION_ERR_DETECTED"
			Case 1080
				ex.message = "ERR_CONTROL_BOX_FAN"
			Case 1081
				ex.message = "ERR_ROBOT_FAN"	
			Case 1100
				ex.message = "ERR_AIRSTOP_ERROR"
			Case 1200
				ex.message = "ERR_TIME_OUT_DC_VOLT_DOWN"
			Case 2001
				ex.Message = "ERR_RECEIVEBUF_FULL"
			Case 2002
				ex.Message = "ERR_SENDBUF_FULL"
			Case 2003
				ex.Message = "IO_RECEIVE_ERROR"
			Case 10000
				ex.Message = "COMMNUNICATION_ERROR"
			Case 10001
				ex.Message = "ERR_RECEIVE_COMMAND_IN_RUNNING"
			Case 10002
				ex.Message = "ERR_RECEIVE_COMMAND_IN_ERROR"
			Case 10006
				ex.Message = "ERR_WRONG_COMMAND_FORMAT"
			Case 10012
				ex.Message = "ERR_COMMAND_NOT_EXIST"
			Case ERR_EMORESETBOARD_NOT_CONNECTED
				ex.Message = "ERR_EMORESETBOARD_NOT_CONNECTED"
			End Select
			
			If ex Is Nothing Then
				Exit Sub
			End If
			
			If ex.errorCode <> 0 Then
				currentError = ex.Clone
				MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : " + Thread.CurrentThread.Name + " ERROR (" + CStr(GetErrorCode(ex)) + ") " + ex.Message)
			End If
		End Sub
		
		Public Sub clearError()
			currentError = Nothing
			Controller.ErrorLog = 1
		End Sub
		
		Public Function getCurrentErrorDescript() As String
			Dim currentError As Exception = getCurrentError()
			
			If currentError Is Nothing Then
				Return ""
			Else
				Return currentError.Message
			End If
		End Function
		
		Public Function getCurrentErrorCode() As Integer
			Return GetErrorCode(getCurrentError())
		End Function
		
		Public Function getCurrentError() As Exception
			Dim ex As Exception
			ex = getCurrentError(m_ignoreCurrentSystemError)
			Return ex
		End Function
		
		Public Function getCurrentError(VignoreCurrentSystemError As Boolean) As Exception
			Dim ex As Exception
			
			If currentError Is Nothing And VignoreCurrentSystemError = False Then
				ex = getCurrentSystemError()
				If Not(ex Is Nothing) Then
					handleError(ex)
				End If
			End If
			
			If currentError Is Nothing Then
				Return Nothing
			Else
				Return currentError
			End If
		End Function
		
		Public Function getCurrentSystemError() As Exception
			Dim systemError As Exception
			Dim errorMessage As String
			Dim code As Integer
			Dim pos As Integer
			Dim nextPos As Integer
			Dim temp As String
			
			errorMessage = Controller.ErrorLog(1)
			If errorMessage <> "" Then
				systemError = New Exception
				
				pos = errorMessage.IndexOf(",",0)
				pos = errorMessage.IndexOf(",",pos+1)
				nextPos = errorMessage.IndexOf(",",pos+1)
				systemError.ErrorCode = CInt(errorMessage.Substring(pos+2,nextPos-pos))
				systemError.Message = errorMessage.Substring(nextPos+3,errorMessage.Length-nextPos-4)
		
				Return systemError
			Else
				Return Nothing
			End If
		End Function
		
		Public Function getCurrentSystemErrorCode() As Integer
			Return GetErrorCode(getCurrentSystemError())
		End Function
		
		Public Function changeResponseErrorCodeString(originalCode As Integer) As String
			If UseThreeCountErrorCode = False Then
				If originalCode > COMMNUNICATION_ERROR Then
					Return "E" & Format(originalCode-COMMNUNICATION_ERROR, "00")
				Else
					Return CStr(originalCode)
				End If
			Else
				If originalCode > COMMNUNICATION_ERROR Then
					Return Format(originalCode-COMMNUNICATION_ERROR+980,"000")
				Else
					If 1000 <= originalCode And originalCode <= 1100 Then
						Return Format(originalCode-700,"000")
					ElseIf 2000 < originalCode And originalCode < 2100 Then
						Return Format(originalCode-1600,"000") 
					ElseIf -230 < originalCode And originalCode <= -200 Then
						Return Format((originalCode*-1)+300,"000")
					ElseIf -330 < originalCode And originalCode <= -300 Then
						Return Format((originalCode*-1)+230,"000")
					ElseIf -530 < originalCode And originalCode <= -500 Then
						Return Format((originalCode*-1)+60,"000")
					ElseIf -820 < originalCode And originalCode <= -700 Then
						Return Format((originalCode*-1)-110,"000")
					ElseIf -1060 < originalCode And originalCode <= -1000 Then
						Return Format((originalCode*-1)-290,"000")
					ElseIf -1570 < originalCode And originalCode <= -1500 Then
						Return Format((originalCode*-1)-730,"000")
					ElseIf -1620 < originalCode And originalCode <= -1600 Then
						Return Format((originalCode*-1)-760,"000")
					ElseIf -1750 < originalCode And originalCode <= -1700 Then
						Return Format((originalCode*-1)-840,"000")
					ElseIf -3020 < originalCode And originalCode <= -3000 Then
						Return Format((originalCode*-1)-2090,"000")
					ElseIf -3150 < originalCode And originalCode <= -3100 Then
						Return Format((originalCode*-1)-2170,"000")
					Else
						Return Format(originalCode,"000")
					End If
				End If
			End If
		End Function
		
	End Class
	
End Module
'Created: 7/2/2013 9:27:59 AM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module ErrorFileModule

    Public Class ErrorLoger
	
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SHARED ''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	
		Shared Public Sub LogWriteThreadFunction()
			Dim ex As Exception
			Static Dim prevErrorCode As Integer = 0
			Dim currentErrorCode As Integer
			
			While True
				Try
					currentErrorCode = errorHandler.getCurrentErrorCode()
					If currentErrorCode <> 0 And currentErrorCode <> prevErrorCode Then
						prevErrorCode = currentErrorCode
						If errorLogWriter_new Is Nothing Then
							errorLogWriter_old.writeErrorLog(errorHandler.getCurrentError())
						Else
							errorLogWriter_new.writeErrorLog(errorHandler.getCurrentError())
						End If
					End If
				Catch ex
					errorHandler.handleError(ex)
					MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : ErrorLogWriter ERROR (" + CStr(GetErrorCode(ex)) + ") " + ex.Message)
					ex = Nothing
				End Try
				Thread.Sleep(20)
			End While
		End Sub
		
		
		
		
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim logFileMutex As New Mutex
		
		Private Const MAX_RUN_COMMAND_COUNT As Integer = 4
		Private Dim runCommandLog(MAX_RUN_COMMAND_COUNT+1) As String
		Private Dim startIndex As Integer
		Private Dim endIndex As Integer
		
		Private Const MAX_LINES As Integer = 300
		Private Dim logFileContentsLoaded As Boolean
		Private Dim logFileContentsCount As Integer
		Private Dim logFileContests(MAX_LINES) As String
		
		Private logWriteThread As Thread
	
		Private Function getTimeString() As String
			Return "[" & Controller.PDB(121) & "] "
		End Function
		
		Private Sub loadLogFileContents()
			Dim ex As Exception
			
			If logFileContentsLoaded = True Then
				Exit Sub
			End If
			
			logFileMutex.lock()

			Try
				Dim errorLogFile As New StreamReader("/NVRAM/file1")
				
				If errorLogFile Is Nothing Then
					Exit Try
				End If
				
				If errorLogFile.Peek() = -1 Then
					Exit Try
				End If
				
				errorLogFile.ReadLine() 'first line delete
				logFileContentsCount = 0
				While True
					If errorLogFile.Peek() = -1 Then
						Exit While
					End If
					
					Dim str As String
					Dim subStr As String
					Dim pos As Integer
					Dim nextpos As Integer
					
					logFileContests(logFileContentsCount) = ""
					str = errorLogFile.ReadLine()
					pos = 0
					nextpos = str.IndexOf("  ->  ",pos)
					While nextpos <> -1
						If pos <> nextpos Then
							subStr = Mid(str,pos+1,nextpos-pos)
							If subStr.IndexOf("]") = -1 Then
								logFileContests(logFileContentsCount) = logFileContests(logFileContentsCount) & "[] " & subStr & "#"
							Else
								logFileContests(logFileContentsCount) = logFileContests(logFileContentsCount) & subStr & "#"
							End If
							pos = nextpos + 6
						Else
							pos = pos + 6
						End If
						nextpos = str.IndexOf("  ->  ",pos)
					End While
					nextpos = str.Length
					subStr = Mid(str,pos+1,nextpos-pos)
					logFileContests(logFileContentsCount) = logFileContests(logFileContentsCount) & subStr
				
					logFileContentsCount = logFileContentsCount + 1	
				End While
				errorLogFile.Close()
				
			Catch ex
				Throw ex
			Finally
				logFileMutex.unlock()
			End Try
			
			logFileContentsLoaded = True
		End Sub
		

		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New()
			startIndex = 0
			endIndex = 0
			logFileContentsLoaded = False
		End Sub
		
		Public Sub errorLogStart()
			logWriteThread = New Thread("ErrorLoger.LogWriteThreadFunction",,"ErrorLogWriteThread")
			logWriteThread.Start
		End Sub
		
		Public Sub addRunCommandLog(cmd As Command)
			
			Dim ex As Exception
			Dim protocol As String = cmd.cmd
			Dim rawArgs As String = cmd.rawArg
			
			logFileMutex.lock()
			
			Try
				If rawArgs = "" Then
					runCommandLog(endIndex) = protocol
				Else
					runCommandLog(endIndex) = protocol + " " + rawArgs
				End If
				endIndex = endIndex + 1
				If endIndex > MAX_RUN_COMMAND_COUNT Then
					endIndex = 0
				End If
				If startIndex = endIndex Then
					startIndex = startIndex + 1
					If startIndex > MAX_RUN_COMMAND_COUNT Then
						startIndex = 0
					End If
				End If
			Catch ex
				Throw ex
			Finally
				logFileMutex.unlock()
			End Try
		End Sub
		
		Public Sub writeErrorLog(ex As Exception)
			writeErrorLog(GetErrorCode(ex),ex.message)
		End Sub
		
		Public Sub writeErrorLog(errorCode As Integer)
			writeErrorLog(errorCode,"")
		End Sub
		
		Public Sub writeErrorLog(errorCode As Integer, message As String)
			Dim ex As Exception
			
			'soft E-stop 'hard E-stop 'power off request
			If errorCode = ERR_EMERGENCY Or _
				errorCode = -1045 Or _
				errorCode = -1028 Or _
				errorCode = -1600 Then
				Exit Sub
			End If

			logFileMutex.lock()
			
			Try
				Dim errorLogFile As New StreamWriter("/NVRAM/file1 -size 7800 -wrap", True)
	
				While startIndex <> endIndex
					errorLogFile.Write(runCommandLog(startIndex) + "  ->  ")
					startIndex = startIndex + 1
					If startIndex > MAX_RUN_COMMAND_COUNT Then
						startIndex = 0
					End If
				End While
	
				If message = "" Then
					errorLogFile.Write(getTimeString() + "ERR: " + CStr(errorCode))
				Else
					errorLogFile.Write(getTimeString() + "ERR: " + CStr(errorCode) + ", " + message)
				End If
				errorLogFile.Write(Chr(13) + Chr(10))
				errorLogFile.Close()
				
				logFileContentsLoaded = False
			
			Catch ex
				Throw ex
			Finally
				logFileMutex.unlock()
			End Try
		End Sub
		
		Public Function getErrLogCount() As Integer
			If logFileContentsLoaded = False Then
				loadLogFileContents()
			End If
			Return logFileContentsCount
		End Function
		
		Public Function getErrLog(index As Integer) As String
			If logFileContentsLoaded = False Then
				loadLogFileContents()
			End If
			If index < 1 Or index > getErrLogCount() Then
				Return ""
			Else
				Return logFileContests(index-1)
			End If
		End Function

	End Class
	
End Module
'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module ErrorFileModule_oldVersion
	
	Public Class ErrorLoger_oldVersion
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim logFileMutex As New Mutex
		
		Private Const MAX_RUN_COMMAND_COUNT As Integer = 5
		Private Dim runCommandLog(MAX_RUN_COMMAND_COUNT+1) As String
		Private Dim startIndex As Integer
		Private Dim endIndex As Integer
	
		Private Const MAX_LINES As Integer = 300 
		Private Dim ErrorStrBuffer(MAX_LINES) As String
		Private Dim ErrorLines As Integer
		
		Private Dim beforeSystemErrLog As String
		
		Private Dim filename As String
		
		Private logWriteThread As Thread
		
		Private Function getTimeString() As String
			Return "[" & Controller.PDB(121) & "] "
		End Function
		
		
		
		
		
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New()
			startIndex = 0
			endIndex = 0
			ErrorLines = 0
			
			beforeSystemErrLog = ""
		End Sub
		
		Public Sub errorLogStart()
			logWriteThread = New Thread("ErrorLoger.LogWriteThreadFunction",,"ErrorLogWriteThread")
			logWriteThread.Start
		End Sub
	
		Public Sub addRunCommandLog(cmd As Command)
			Dim ex As Exception
			Dim protocol As String = cmd.cmd
			Dim rawArgs As String = cmd.rawArg
			
			logFileMutex.lock()
			
			Try
				If rawArgs = "" Then
					runCommandLog(endIndex) = protocol
				Else
					runCommandLog(endIndex) = protocol + " " + rawArgs
				End If
				endIndex = endIndex + 1
				If endIndex > MAX_RUN_COMMAND_COUNT Then
					endIndex = 0
				End If
				If startIndex = endIndex Then
					startIndex = startIndex + 1
					If startIndex > MAX_RUN_COMMAND_COUNT Then
						startIndex = 0
					End If
				End If
			
			Catch ex
				Throw ex
			Finally
				logFileMutex.unlock()
				
			End Try
		End Sub

		Public Sub writeErrorLog(ex As Exception)
			Dim errorCode As Integer
			If ex.errorCode = PROJECT_CUSTOM_ERROR Then
				errorCode = ex.Qualifier
			Else
				errorCode = ex.errorCode
			End If
			
			writeErrorLog(errorCode,ex.message)
		End Sub
		
		Public Sub writeErrorLog(errorCode As Integer)
			writeErrorLog(errorCode,"")
		End Sub
		
		Public Sub writeErrorLog(errorCode As Integer, message As String)
			Dim saveStr As String = ""
			Dim i As Integer
			Dim pos As Integer
			Dim err As String
			Dim index As Integer
			Dim logTime As String
			Dim logContent As String
			
			If errorCode = ERR_EMERGENCY Or _
				errorCode = -1045 Or _
				errorCode = -1028 Or _
				errorCode = -1600 Then
				Exit Sub
			End If
			
			While startIndex <> endIndex
				saveStr = saveStr + "[] " + runCommandLog(startIndex) + "  ->  "
				startIndex = startIndex + 1
				If startIndex > MAX_RUN_COMMAND_COUNT Then
					startIndex = 0
				End If
			End While
			
			If message = "" Then
				saveStr = saveStr & getTimeString() & "ERR:" & CStr(errorCode)
			Else
				saveStr = saveStr & getTimeString() & "ERR:" & CStr(errorCode) & ", " + message
			End If
			
			err = Controller.ErrorLog(1)
			If err <> "" And String.Compare(beforeSystemErrLog,err) <> 0 Then
				beforeSystemErrLog = err
				pos = err.IndexOf(",",0)
				logTime = err.Substring(0, pos)
				pos = err.IndexOf(",",pos+1)
				logContent = err.Substring(pos+1, err.Length-pos-1)
				saveStr = saveStr & "  ->  [" & logTime & "] " & "ERR:" & logContent
			End If
			
			Dim line As Integer
			Dim ii As Integer
			
		    If ErrorLines >= MAX_LINES Then
				For ii=1 To MAX_LINES-1
					ErrorStrBuffer(ii-1) = ErrorStrBuffer(ii)			
				Next
				ErrorStrBuffer(MAX_LINES-1) = saveStr
			Else
				ErrorStrBuffer(ErrorLines) = saveStr
				ErrorLines = ErrorLines + 1
			End If
		End Sub
		
		Public Function getErrLogCount() As Integer
			Return ErrorLines
		End Function
		
		Public Function getErrLog(index As Integer) As String
			Dim str As String
			Dim pos As Integer
			Dim i As Integer
			Dim j As Integer
			Dim nextpos As Integer
			Dim result As String = ""
			
			If index <= ErrorLines Then
				str = ErrorStrBuffer(index-1)
				pos = 0
				nextpos = str.IndexOf("  ->  ",pos)
				While nextpos <> -1
					If pos <> nextpos Then
						result = result & Mid(str,pos+1,nextpos-pos) & "#"
						pos = nextpos + 6
					Else
						pos = pos + 6
					End If
					nextpos = str.IndexOf("  ->  ",pos)
				End While
				result = result & Mid(str,pos+1,str.Length-pos)
			End If
			
			Return result
		End Function
		
	End Class
		
			
			
End Module
'Created: 9/14/2013 2:33:15 PM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module BladeDeflectionDetectorModule
    Public Class BladeDeflectionDetector
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SETTING ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim m_canMappingMultipleArm As Boolean = False
		Public Property canMappingMultipleArm As Boolean
	        Get
	            Return m_canMappingMultipleArm
	        End Get
			Set (value As Boolean)
	            m_canMappingMultipleArm = value
	        End Set
	    End Property
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim m_robotIndex As Integer
		Private Dim bladePosError(MAX_ARM_COUNT_PER_ROBOT,MAX_FINGER_COUNT_PER_ARM) As Double
		
		Private Dim latchDataList() As LatchData
		Private Dim latchDataCount As Integer = 0
		Private Dim sensorIO As Integer = 0
		Private Dim signalIO As Integer = 0
		
		Private Sub latchStart()
			If signalIO = 0 Then
				Exit Sub
			End If
			theLatchManager.latchStart(signalIO)
		End Sub
		
		Private Sub latchStop()
			theLatchManager.latchStop()
		End Sub
		
		Private Function itemName(armIndex As Integer, bladeIndex As Integer) As String
			Return "Robot" + CStr(Robot.Selected) + "-Arm" + CStr(armIndex) + "-Blade" + CStr(bladeIndex)
		End Function
		
		Private Sub setCorrectBladeZPos(arm As RobotArm, values() As Double)
			Dim armList(1) As RobotArm
			armList(0) = arm
			setCorrectBladeZPos(armList,values)
		End Sub
		
		Private Sub setCorrectBladeZPos(armList() As RobotArm, values() As Double)
			Dim i,j As Integer
			Dim index As Integer = 0
			For i = 0 To armList.GetUpperBound(0) - 1
				For j = 1 To armList(i).fingerCount
					theSystem.setValue(itemName(armList(i).armIndex,j), CStr(values(index)))
					index = index + 1
				Next j
			Next i
		End Sub
		
		Private Sub moveToBladeCheckReady(arm As RobotArm)
			Dim armList(1) As RobotArm
			armList(0) = arm
			moveToBladeCheckReady(armList)
		End Sub
		
		Private Sub moveToBladeCheckReady(armList() As RobotArm)
			Dim mapStartLoc As LocationEx = Nothing
			Dim tempLoc As LocationEx = Nothing
			Dim i As Integer
			For i = 0 To armList.GetUpperBound(0) - 1
				tempLoc = theStationManager.getStation(armList(i).armIndex).blademapStartLocation
				If mapStartLoc Is Nothing Then
					mapStartLoc = tempLoc
				ElseIf mapStartLoc.getZPosition() > tempLoc.getZPosition() Then
					mapStartLoc = tempLoc
				End If
			Next i
			myRobot(Robot.Selected-1).lookAtLocation(mapStartLoc, myRobot(Robot.Selected-1).theProfileManager.getProfile(mapStartLoc.type,True))
			
			myRobot(m_robotIndex-1).theMotionLoger.lastCommand = "BMRDY"
		End Sub
		
		Private Sub extendArm(arm As RobotArm)
			Dim armList(1) As RobotArm
			armList(0) = arm
			extendArm(armList)
		End Sub
		
		Private Sub extendArm(armList() As RobotArm)
			If myRobot(m_robotIndex-1).theMotionLoger.lastCommand = "BMRDY" Then
			Else
				ThrowError(ERR_NOT_READYPOS)
			End If
			
			If canMappingMultipleArm = False Then
				If armList.GetUpperBound(0) > 1 Then
					throwError(ERR_INVALID_HAND)
				End If
			End If
			
			Dim i As Integer
			Dim curLoc As LocationEx = LocationEx.GetDestJointPos()
			Dim mapStartLoc As LocationEx
			For i = 0 To armList.GetUpperBound(0) - 1
				mapStartLoc = theStationManager.getStation(armList(i).armIndex).blademapStartLocation
				curLoc.loc.angle(armList(i).controlAxis) = mapStartLoc.loc.angle(armList(i).controlAxis)
			Next i
			myRobot(Robot.Selected-1).moveToLocation(curLoc, False, myRobot(Robot.Selected-1).theProfileManager.getProfile(curLoc.type,True))
			
			myRobot(m_robotIndex-1).theMotionLoger.lastCommand = "BMEXTA"
		End Sub
		
		Private Sub zUp(arm As RobotArm)
			Dim armList(1) As RobotArm
			armList(0) = arm
			zUp(armList)
		End Sub
		
		Private Sub zUp(armList() As RobotArm)
			If myRobot(m_robotIndex-1).theMotionLoger.lastCommand = "BMEXTA" Then
			Else
				ThrowError(ERR_INTERLOCK)
			End If
			
			Dim curLoc As LocationEx = LocationEx.GetDestJointPos()
			Dim mapEndLoc As LocationEx = Nothing
			Dim i As Integer
			For i = 0 To armList.GetUpperBound(0) - 1
				mapEndLoc = theStationManager.getStation(armList(i).armIndex).blademapEndLocation
				If curLoc.getZPosition() < mapEndLoc.getZPosition() Then
					curLoc.setZPosition(mapEndLoc.getZPosition())
				End If
				curLoc.loc.angle(armList(i).controlAxis) = mapEndLoc.loc.angle(armList(i).controlAxis)
			Next i

			myRobot(Robot.Selected-1).moveToLocation(curLoc, False, myRobot(Robot.Selected-1).theProfileManager.getMapProfile())
			
			myRobot(m_robotIndex-1).theMotionLoger.lastCommand = "BMZUP"
		End Sub
		
		Private Sub zDown(arm As RobotArm)
			Dim armList(1) As RobotArm
			armList(0) = arm
			zDown(armList)
		End Sub
		
		Private Sub zDown(armList() As RobotArm)
			If myRobot(m_robotIndex-1).theMotionLoger.lastCommand = "BMZUP" Then
			Else
				ThrowError(ERR_INTERLOCK)
			End If
			
			Dim curLoc As LocationEx = LocationEx.GetDestJointPos()
			Dim mapStartLoc As LocationEx = Nothing
			Dim i As Integer
			For i = 0 To armList.GetUpperBound(0) - 1
				mapStartLoc = theStationManager.getStation(armList(i).armIndex).blademapStartLocation
				If curLoc.getZPosition() > mapStartLoc.getZPosition() Then
					curLoc.setZPosition(mapStartLoc.getZPosition())
				End If
				curLoc.loc.angle(armList(i).controlAxis) = mapStartLoc.loc.angle(armList(i).controlAxis)
			Next i

			myRobot(Robot.Selected-1).moveToLocation(curLoc, False, myRobot(Robot.Selected-1).theProfileManager.getMapProfile())
			
			myRobot(m_robotIndex-1).theMotionLoger.lastCommand = "BMEXTA"
		End Sub
		
		Private Sub retractArm()
			myRobot(Robot.Selected-1).allArmRetract()
		End Sub
		
		Private Sub doBladeMapping(arm As RobotArm)
			Dim armList(1) As RobotArm
			armList(0) = arm
			doBladeMapping(armList,0)
		End Sub
		
		Private Sub doBladeMapping(arm As RobotArm, repeatCount As Integer)
			Dim armList(1) As RobotArm
			armList(0) = arm
			doBladeMapping(armList,repeatCount)
		End Sub
		
		Private Sub doBladeMapping(armList() As RobotArm)
			doBladeMapping(armList,0)
		End Sub
		
		Private Sub doBladeMapping(armList() As RobotArm, repeatCount As Integer)
			Dim i As Integer
			Dim ex As Exception
			
			If theSystem.demoMode = 0 Then
				If myRobot(Robot.Selected-1).armWaferCheck(armList,False,True) = False Then
					throwError(ERR_INTERLOCK)
				End If
			End If
			
			If canMappingMultipleArm = False Then
				If armList.GetUpperBound(0) > 1 Then
					throwError(ERR_INVALID_HAND)
				End If
			End If
			
			theLatchManager.block()
			
			Try
				moveToBladeCheckReady(armList)
				theMoveEx.WaitForEOM
				
				extendArm(armList)
				theMoveEx.WaitForEOM
				
				If isSensorON() = False Then
					sensorON()
					Thread.Sleep(theSystem.mappingOnDelay)
				End If
				latchStart()
				
				If repeatCount = 0 Then
					zUp(armList)
					theMoveEx.WaitForEOM
				Else
					For i = 1 To repeatCount
						zUp(armList)
						theMoveEx.WaitForEOM
						zDown(armList)
						theMoveEx.WaitForEOM
					Next i
				End If
				
				latchDataCount = theLatchManager.popLatchDataList(latchDataList)
				
				latchStop()
				
				retractArm()
				theMoveEx.WaitForEOM
			
			Catch ex
				Throw ex
			
			Finally
				theLatchManager.unBlock()
			End Try
		End Sub
		
		
		
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(inputSignal As Integer)
			sensorIO = 0
			signalIO = inputSignal
		End Sub
		
		Public Sub New(sensorIO As Integer, inputSignal As Integer)
			sensorIO = sensorIO
			signalIO = inputSignal
		End Sub
		
		Public Sub setRobot(targetRobot As RNDRobot)
			m_robotIndex = targetRobot.robotIndex
		End Sub
		
		Public Sub sensorON(flag As Boolean)
			If flag = True Then
				sensorON()
			Else
				sensorOFF()
			End If
		End Sub
		
		Public Sub sensorON()
			If sensorIO <> 0 Then
				robotIO.setDIO(sensorIO,True)
			End If
		End Sub
		
		Public Sub sensorOFF()
			If sensorIO <> 0 Then
				robotIO.setDIO(sensorIO,False)
			End If
		End Sub
		
		Public Function isSensorON() As Boolean
			If sensorIO <> 0 Then
				Return robotIO.getDIO(sensorIO)
			Else
				Return True
			End If
		End Function
		
		Public Function sensorResult() As Boolean
			If signalIO <> 0 Then
				Return robotIO.getDIO(signalIO)
			Else
				Return False
			End If
		End Function
		
		Public Sub bladeMappingCalibration(arm As RobotArm, repeatCount As Integer)
			Dim armList(1) As RobotArm
			armList(0) = arm
			bladeMappingCalibration(armList,repeatCount)
		End Sub
		
		Public Sub bladeMappingCalibration(armList() As RobotArm, repeatCount As Integer)
			doBladeMapping(armList,repeatCount)
			
			If latchDataCount = 0 Then
				ThrowError(ERR_NO_LATCH_DATA)
			End If
			
			Dim totalFingerCount As Integer = 0
			Dim i As Integer
			Dim j As Integer
			For i = 0 To armList.getUpperBound(0) - 1
				totalFingerCount = totalFingerCount + armList(i).fingerCount
			Next i
			Dim detectedZPos_moveUp(totalFingerCount) As Double
			
			If latchDataCount <> repeatCount * totalFingerCount * 2 Then
				ThrowError(ERR_WRONG_LATCH_DATA)
			End If
			
			For j = totalFingerCount - 1 To 0 Step -1
				detectedZPos_moveUp(j) = 0
			Next j
			For i = 0 To repeatCount-1
				For j = 0 To totalFingerCount - 1
					detectedZPos_moveUp(totalFingerCount-1-j) = detectedZPos_moveUp(totalFingerCount-1-j) + latchDataList((i*totalFingerCount*2)+j).zPosition
				Next j
			Next i
			
			For j = 0 To totalFingerCount - 1
				detectedZPos_moveUp(j) = detectedZPos_moveUp(j) / repeatCount
			Next j
			
			setCorrectBladeZPos(armList,detectedZPos_moveUp)
		End Sub
		
		Public Sub checkBladeMapping(arm As RobotArm)
			Dim armList(1) As RobotArm
			armList(0) = arm
			checkBladeMapping(armList, 0)
		End Sub
		
		Public Sub checkBladeMapping(armList() As RobotArm)
			checkBladeMapping(armList, 0)
		End Sub
		
		Public Sub checkBladeMapping(arm As RobotArm, errorCode As Integer)
			Dim armList(1) As RobotArm
			armList(0) = arm
			checkBladeMapping(armList, errorCode)
		End Sub
		
		Public Sub checkBladeMapping(armList() As RobotArm, errorCode As Integer)
			doBladeMapping(armList,0)
			
			If latchDataCount = 0 Then
				ThrowError(ERR_NO_LATCH_DATA)
			End If
			
			Dim totalFingerCount As Integer = 0
			Dim i As Integer
			Dim j As Integer
			For i = 0 To armList.getUpperBound(0) - 1
				totalFingerCount = totalFingerCount + armList(i).fingerCount
			Next i
			
			If latchDataCount <> totalFingerCount Then
				ThrowError(ERR_WRONG_LATCH_DATA)
			End If
			
			Dim index As Integer = 0
			For i = armList.getUpperBound(0) - 1 To 0 Step -1
				For j = armList(i).fingerCount To 1 Step -1
					bladePosError(armList(i).armIndex-1,j-1) = Math.Abs(latchDataList(index).zPosition - CDbl(theSystem.getValue(itemName(armList(i).armIndex,j))))
					index = index + 1
				Next j
			Next i
			
			If errorCode <> 0 Then
				For i = 0 To armList.getUpperBound(0) - 1
					For j = 1 To armList(i).fingerCount
						If bladePosError(armList(i).armIndex-1,j-1) > theSystem.bladeGapError Then
							throwError(errorCode)
						End If
					Next j
				Next i
			End If
		End Sub
		
		Public Function getBladePosError(arm As RobotArm, fingerIndex As Integer) As Double
			Return bladePosError(arm.armIndex-1,fingerIndex-1)
		End Function
		
		Public Sub save()
			theSystem.save()
		End Sub
	End Class

End Module
'Created: 9/16/2013 9:25:37 AM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module LatchManagerModule

	Public Class LatchData
		Public Dim targetRobotIndex As Integer
		Public Dim signalIO As Integer = 0
		Public Dim SlotNoInfo As Integer = -1
		Private Dim onZPos As Double = 0
		Private Dim offZPos As Double = 0
		Private Dim onAxisZPos() As Double
		Private Dim offAxisZPos() As Double
		Public Dim isOnOffData As Boolean = False
		
		Public Function thick() As Double
			Return Math.Abs(onZPos - offZPos)
		End Function
		
		Public Function zPosition() As Double
			Return (onZPos + offZPos) / 2
		End Function
		
		Public Function zPosition(zIndex As Integer) As Double
			Return (onAxisZPos(zIndex-1) + offAxisZPos(zIndex-1)) / 2
		End Function
		
		Public Sub New(lat As Latch)
			targetRobotIndex = Robot.Selected
			signalIO = lat.Signal
			
			Dim i As Integer
			Dim zCount As Integer = myRobot(Robot.Selected-1).zAxisCount
			ReDim onAxisZPos(zCount)
			ReDim offAxisZPos(zCount)
			Dim result As Double = 0
			For i = 1 To zCount
				onAxisZPos(i-1) = lat.Angle(myRobot(Robot.Selected-1).zIndexToAxis(i))
				offAxisZPos(i-1) = onAxisZPos(i-1)
				result = result + onAxisZPos(i-1)
			Next i
			
			onZPos = result
			offZPos = onZPos
			isOnOffData = False
		End Sub
		
		Public Sub setOffLatch(lat As Latch)
			Dim i As Integer
			Dim zCount As Integer = myRobot(Robot.Selected-1).zAxisCount
			Dim result As Double = 0
			For i = 1 To zCount
				offAxisZPos(i-1) = lat.Angle(myRobot(Robot.Selected-1).zIndexToAxis(i))
				result = result + offAxisZPos(i-1)
			Next i
			
			offZPos = result
			isOnOffData = True
		End Sub
		
		Public Function toString() As String
			Return CStr(signalIO) + ":" + toString_OnlyData()
		End Function
		
		Public Function toString_OnlyData() As String
			Return FormatDoublePos(onZPos) + "," + FormatDoublePos(offZPos)
		End Function
	End Class

    Public Class LatchManager

		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		Private Const MAX_LATCHDATA_COUNT As Integer = 500
		Private Dim latchControlMutex As New Mutex
		
		Private Sub resetLatchQueue()
			Latch.Flush(Robot.Selected)

			'Set Mapping Latch Queue Size
			thePDBManager.setPDB(PDB_LATCH_QUEUE_SIZE,MAX_LATCHDATA_COUNT)
		End Sub
		
		Private Function getLatchBufferDataCount() As Integer
			Dim latchCount As Integer = Latch.Count(Robot.Selected)

			If latchCount >= MAX_LATCHDATA_COUNT-2 Then
				latchCount = MAX_LATCHDATA_COUNT-2		
			End If
			
			If latchCount <= 0 Then
				Return 0
			End If
			
			Return latchCount
		End Function
		
		Private Dim m_onOffLatch(MAX_ROBOT_COUNT) As Boolean
		Private Dim latchSignal1(MAX_ROBOT_COUNT) As Integer
		Private Dim latchSignal2(MAX_ROBOT_COUNT) As Integer
		Private Dim latchSignal3(MAX_ROBOT_COUNT) As Integer
		Private Dim latchSignal4(MAX_ROBOT_COUNT) As Integer
		
		Private Dim blocked As Boolean = False
		Private Dim beforeLatchSignal1 As Integer
		Private Dim beforeLatchSignal2 As Integer
		Private Dim beforeLatchSignal3 As Integer
		Private Dim beforeLatchSignal4 As Integer
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		Public Sub New()
			resetLatchQueue()
		End Sub
		
		Public Sub block()
			latchControlMutex.lock()
			If blocked = True Then
				latchControlMutex.unLock()
				ThrowError(ALREADY_LATCH_BLOCKED)
			Else
				blocked = True
				beforeLatchSignal1 = latchSignal1(Robot.Selected - 1)
				beforeLatchSignal2 = latchSignal2(Robot.Selected - 1)
				beforeLatchSignal3 = latchSignal3(Robot.Selected - 1)
				beforeLatchSignal4 = latchSignal4(Robot.Selected - 1)
			End If
			latchControlMutex.unLock()
		End Sub
		
		Public Function isBlocked() As Boolean
			Return blocked
		End Function
		
		Public Sub unBlock()
			latchStart(beforeLatchSignal1,beforeLatchSignal2,beforeLatchSignal3,beforeLatchSignal4)
			blocked = False
		End Sub
		
		Public Sub latchStart(sensorIO_1 As Integer)
			latchStart(sensorIO_1,0,0,0)
		End Sub
		
		Public Sub latchStart(sensorIO_1 As Integer,sensorIO_2 As Integer)
			latchStart(sensorIO_1,sensorIO_2,0,0)
		End Sub
		
		Public Sub latchStart(sensorIO_1 As Integer,sensorIO_2 As Integer,sensorIO_3 As Integer)
			latchStart(sensorIO_1,sensorIO_2,sensorIO_3,0)
		End Sub
		
		Public Sub latchStartWithEdgeTrigger(sensorIO_1 As Integer, isMappingSignal As Boolean) 'Only for mapping latch
			Dim ex As Exception
			
			latchStop()
			resetLatchQueue()
			
			latchControlMutex.lock()
			
			Try
				'Set MappingSensor DO
				latchSignal1(Robot.Selected - 1) = sensorIO_1
				latchSignal2(Robot.Selected - 1) = 0
				latchSignal3(Robot.Selected - 1) = 0
				latchSignal4(Robot.Selected - 1) = 0
				
				If isMappingSignal Then
					m_onOffLatch(Robot.Selected-1) = True
					thePDBManager.setPDB(PDB_LATCH_SENSOR,1,sensorIO_1)
					thePDBManager.setPDB(PDB_LATCH_SENSOR,2,-sensorIO_1)
					thePDBManager.setPDB(PDB_LATCH_SENSOR,3,0)
					thePDBManager.setPDB(PDB_LATCH_SENSOR,4,0)

				Else 'main HW latch
					m_onOffLatch(Robot.Selected-1) = False
					thePDBManager.setPDB(PDB_LATCH_SENSOR,1,sensorIO_1)
					thePDBManager.setPDB(PDB_LATCH_SENSOR,2,0)
					thePDBManager.setPDB(PDB_LATCH_SENSOR,3,0)
					thePDBManager.setPDB(PDB_LATCH_SENSOR,4,0)
				End If
				
			Catch ex
				Throw ex
				
			Finally
				latchControlMutex.unLock()
			End Try
		End Sub
			
		Public Sub latchStart(sensorIO_1 As Integer,sensorIO_2 As Integer,sensorIO_3 As Integer,sensorIO_4 As Integer)
			Dim ex As Exception
			
			latchStop()
			resetLatchQueue()
			
			latchControlMutex.lock()
			
			Try
				'Set MappingSensor DO
				latchSignal1(Robot.Selected - 1) = sensorIO_1
				latchSignal2(Robot.Selected - 1) = sensorIO_2
				latchSignal3(Robot.Selected - 1) = sensorIO_3
				latchSignal4(Robot.Selected - 1) = sensorIO_4
				
				If sensorIO_1 = 10001 And sensorIO_2 = 0 Then
					m_onOffLatch(Robot.Selected-1) = True
					thePDBManager.setPDB(PDB_LATCH_SENSOR,1,sensorIO_1)
					thePDBManager.setPDB(PDB_LATCH_SENSOR,2,-sensorIO_1)
					thePDBManager.setPDB(PDB_LATCH_SENSOR,3,0)
					thePDBManager.setPDB(PDB_LATCH_SENSOR,4,0)

				Else 'main HW latch
					m_onOffLatch(Robot.Selected-1) = False
					thePDBManager.setPDB(PDB_LATCH_SENSOR,1,sensorIO_1)
					thePDBManager.setPDB(PDB_LATCH_SENSOR,2,sensorIO_2)
					thePDBManager.setPDB(PDB_LATCH_SENSOR,3,sensorIO_3)
					thePDBManager.setPDB(PDB_LATCH_SENSOR,4,sensorIO_4)
				End If
				
			Catch ex
				Throw ex
				
			Finally
				latchControlMutex.unLock()
			End Try
		End Sub
		
		Public Sub latchStop()
			Dim ex As Exception
			
			latchControlMutex.lock()
			
			Dim i As Integer
			Dim reTryCount As Integer = 3
			For i = 1 To reTryCount
				Try
					'Set MappingSensor DO
					m_onOffLatch(Robot.Selected-1) = False
					thePDBManager.setPDB(PDB_LATCH_SENSOR,1,0)
					thePDBManager.setPDB(PDB_LATCH_SENSOR,2,0)
					thePDBManager.setPDB(PDB_LATCH_SENSOR,3,0)
					thePDBManager.setPDB(PDB_LATCH_SENSOR,4,0)
					Exit For
				Catch ex
					If GetErrorCode(ex) = -746 And i < reTryCount Then 'Interlocked for read
						MyConsole.WriteLine(" Warning : latchStop Error... reTry (Interlocked for read)")
						Thread.Sleep(100)
					Else
						latchControlMutex.unLock()
						Throw ex
					End If
				End Try
			Next i
			
			latchControlMutex.unLock()
			
		End Sub
	
		Public Function popLatchDataList(ByRef latchDataList() As LatchData) As Integer
			Dim ex As Exception
			
			latchControlMutex.lock()
			
			Dim latchCount As Integer = getLatchBufferDataCount()
			
			If latchCount <= 0 Then
				latchControlMutex.unLock()
				Return 0
			End If
			
			If m_onOffLatch(Robot.Selected-1) = True Then
				If latchCount <= 1 Then
					latchControlMutex.unLock()
					Return 0
				End If
			End If
			
			Dim result(0) As LatchData
			Dim resultCount As Integer = 0
			Dim lat As Latch = Nothing
			Dim prev As Latch = Nothing
			
			Dim i,j As Integer
			
			Try
				For i = 0 To latchCount-1
					lat = Latch.Result(Robot.Selected)
					If lat Is Nothing Then
						MyConsole.WriteLine(" Warning : Latch data count is not correct. (" + CStr(i+1) + ")/(" + CStr(latchCount) + ")")
						Exit For
					End If
					
					If ShowCommandLogToConsole = True Then
						MyConsole.Write("[" + CStr(i+1) + "] timeStamp=" + CStr(lat.Timestamp) + " , Signal=" + CStr(lat.Signal))
						For j = 1 To myRobot(Robot.Selected-1).zAxisCount
							MyConsole.Write(" , ZPos(" + CStr(j) + ")=" + CStr(lat.Angle(myRobot(Robot.Selected-1).zIndexToAxis(j))))
						Next j
						MyConsole.WriteLine("")
					End If
					
					If Not(prev Is Nothing) Then
						If (lat.Timestamp - prev.Timestamp) < 0.0001 Then
							MyConsole.WriteLine(" Warning : Latch data timeStamp is same.")
						End If
						
						If m_onOffLatch(Robot.Selected-1) = True Then
							If lat.Signal = prev.Signal Then
								MyConsole.WriteLine(" Warning : onOffLatch get two same latch signal.")
							End If
						End If
					End If
					
					If m_onOffLatch(Robot.Selected-1) = True And lat.Signal < 0 Then
						For j = resultCount - 1 To 0 Step -1 
							If result(j).SignalIO = Math.Abs(lat.Signal) Then
								result(j).setOffLatch(lat)
								Exit For
							End If
						Next j
					Else
						resultCount = resultCount + 1
						ReDim Preserve result(resultCount)
						result(resultCount-1) = New LatchData(lat)
					End If
					
					prev = lat
				Next i
				
				ReDim latchDataList(resultCount-1)
				Dim latchDataListCount As Integer = 0
				For i = 0 To resultCount-1
					If m_onOffLatch(Robot.Selected-1) = False Or result(i).isOnOffData = True Then
						latchDataList(latchDataListCount) = result(i)
						latchDataListCount = latchDataListCount + 1
					End If
				Next i
			
			Catch ex
				Throw ex
			Finally
				latchControlMutex.unLock()
			End Try
			
			Return latchDataListCount
		End Function
		
    End Class
End Module
'Created: 9/14/2013 2:33:15 PM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module MappingManagerModule
	
	Public Const MAP_EMPTY As Integer = 0
	Public Const MAP_NORMAL As Integer = 1
	Public Const MAP_DOUBLE As Integer = 2
	Public Const MAP_CROSS As Integer = 3
	Public Const MAP_UNKNOWN As Integer = 4
	
	Public Class MappingSignal
		Public Dim sensorIO As Integer = 0
		Public Dim signalIO As Integer = 0
	End Class 

	
    Public Class MappingManager
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		
		Private Dim m_bothSlotCrossResult As Boolean = False
		Public Property bothSlotCrossResult As Boolean
			Set (value As Boolean)
				m_bothSlotCrossResult = value
			End Set
	        Get
				Return m_bothSlotCrossResult
	        End Get
	    End Property
		
		Private Dim m_useDoubleMapping As Boolean = False
		Public Property useDoubleMapping As Boolean
			Set (value As Boolean)
				m_useDoubleMapping = value
			End Set
	        Get
				Return m_useDoubleMapping
	        End Get
	    End Property
		
		Private Dim m_latchLog As String = ""
		Private Dim m_latchDataList() As LatchData
		Private Dim m_latchDataCount As Integer = 0
		Public ReadOnly Property latchDataCount As Integer
			Get
				Return m_latchDataCount
			End Get
		End Property
		
		Private Dim theMappingSignal(3) As MappingSignal
		
		Private Dim m_lastMappingData(500) As Integer
		Public ReadOnly Property lastMappingData(slot_number As Integer) As Integer
			Get
				Return m_lastMappingData(slot_number)
			End Get
		End Property
		
		
		Private Sub latchStart()
			If theMappingSignal(0).signalIO = 0 Then
				Exit Sub
			End If
			theLatchManager.latchStartWithEdgeTrigger(theMappingSignal(0).signalIO,True)
			m_latchLog = ""
		End Sub
		
		Private Sub latchStop()
			theLatchManager.latchStop()
		End Sub
		
		Private Function getMappingChar(status As Integer) As String
			Dim result As String = "U"
			
			Select status
			Case MAP_EMPTY
				result = "0"
			Case MAP_NORMAL
				result = "1"
			Case MAP_DOUBLE
				result = "D"
			Case MAP_CROSS
				result = "C"
			Case MAP_UNKNOWN
				result = "U"
			Case Else
				result = "U"
			End Select
			
			Return result
		End Function
		
		Private Dim timer As New TimeStamp
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Dim lastMappingStage As Integer
		Public Dim signalcount As Integer = 0 
		Public Sub New(inputSignal As Integer)
			theMappingSignal(0) = New MappingSignal
			theMappingSignal(0).sensorIO = 0
			theMappingSignal(0).signalIO = inputSignal
			signalcount = 1
		End Sub
		
		Public Sub New(onOffSignal As Integer, inputSignal As Integer)
			theMappingSignal(0) = New MappingSignal
			theMappingSignal(0).sensorIO = onOffSignal
			theMappingSignal(0).signalIO = inputSignal
			signalcount = 1
		End Sub
		
		Public Sub New(onOffSignal As Integer, inputSignal As Integer, onOffSignal2 As Integer, inputSignal2 As Integer)
			theMappingSignal(0) = New MappingSignal
			theMappingSignal(1) = New MappingSignal
			theMappingSignal(2) = New MappingSignal
			theMappingSignal(0).sensorIO = onOffSignal
			theMappingSignal(0).signalIO = inputSignal
			theMappingSignal(1).sensorIO = onOffSignal
			theMappingSignal(1).signalIO = inputSignal
			theMappingSignal(2).sensorIO = onOffSignal2
			theMappingSignal(2).signalIO = inputSignal2
			signalcount = 2
		End Sub
		
		Public Sub sensorON(flag As Boolean)
			If flag = True Then
				sensorON()
			Else
				sensorOFF()
			End If
		End Sub
		
		Public Sub sensorON()
			If theMappingSignal(0).sensorIO <> 0 Then
				robotIO.setDIO(theMappingSignal(0).sensorIO,True)
			End If
		End Sub
		
		Public Sub sensorOFF()
			If theMappingSignal(0).sensorIO <> 0 Then
				robotIO.setDIO(theMappingSignal(0).sensorIO,False)
			End If
		End Sub
		
		Public Function isSensorON() As Boolean
			If theMappingSignal(0).sensorIO <> 0 Then
				Return robotIO.getDIO(theMappingSignal(0).sensorIO)
			Else
				Return True
			End If
		End Function
		
		Public Function sensorResult() As Boolean
			If theMappingSignal(0).signalIO <> 0 Then
				Return robotIO.getDIO(theMappingSignal(0).signalIO)
			Else
				Return False
			End If
		End Function
		
		Public Sub moveToMapReady(stage As Integer)
			theStationManager.checkStageNumber(stage)
			'Dim mapStartLoc As LocationEx = theStationManager.getStation(stage).mapStartLocation
			Dim robotArmList() As RobotArm
			myRobot(Robot.Selected-1).getArmList(robotArmList,2)
			myRobot(Robot.Selected-1).MoveToMapReady(Stage, 1, robotArmList, TARGET_MODE)
			'myRobot(Robot.Selected-1).lookAtLocation(mapStartLoc, myRobot(Robot.Selected-1).theProfileManager.getProfile(mapStartLoc.type,True))
			
			myRobot(Robot.Selected-1).theMotionLoger.lastCommand = "MRDY"
		End Sub
		
		Public Sub extendArm(stage As Integer)
			Dim robotArmList() As RobotArm
			theStationManager.checkStageNumber(stage)
			'Dim mapStartLoc As LocationEx = theStationManager.getStation(stage).mapStartLocation
			'myRobot(Robot.Selected-1).moveToLocation(mapStartLoc, True, myRobot(Robot.Selected-1).theProfileManager.getProfile(mapStartLoc.type,True))
			
			myRobot(Robot.Selected-1).getArmList(robotArmList,2)
			myRobot(Robot.Selected-1).MapArmExtend(stage,robotArmList,TARGET_MODE)
			myRobot(Robot.Selected-1).theMotionLoger.lastCommand = "MEXT"
		End Sub
		
		Public Sub zUp(stage As Integer)
			If myRobot(Robot.Selected-1).theMotionLoger.lastCommand = "MEXT" Then
			Else
				ThrowError(ERR_INTERLOCK)
			End If
			
			theStationManager.checkStageNumber(stage)
			Dim mapEndLoc As LocationEx = theStationManager.getStation(stage).mapEndLocation
			myRobot(Robot.Selected-1).moveToLocation(mapEndLoc, False, myRobot(Robot.Selected-1).theProfileManager.getMapProfile())
			
			myRobot(Robot.Selected-1).theMotionLoger.lastCommand = "MZUP"
		End Sub
		
		Public Sub retractArm(stage As Integer)
			Dim mapEndLoc As LocationEx
			Dim curloc As LocationEx
			Dim i As Integer
			
			For i = 1 To 5
				mapEndLoc = theStationManager.getStation(stage).MoveMapEndLocation(i)
				If mapEndLoc Is Nothing Then
					Exit Sub
				End If
				
				curLoc = LocationEx.GetCurJointPos()
				mapEndLoc.loc.angle(myRobot(Robot.Selected-1).controlAxis("Z")) = curLoc.loc.angle(myRobot(Robot.Selected-1).controlAxis("Z"))	
				
				If i = 1 And mapEndLoc.type = COORD_JOINT Then
					mapEndLoc = mapEndLoc.kinesol()
					mapEndLoc.loc.config = 1
					theMoveEx.loc(mapEndLoc,myRobot(Robot.Selected-1).theProfileManager.getProfile(COORD_CARTESIAN,False))
				Else
					theMoveEx.loc(mapEndLoc,myRobot(Robot.Selected-1).theProfileManager.getProfile(COORD_JOINT,True))
				End If
				
			Next i
			
			myRobot(Robot.Selected-1).allArmRetract()
			
			myRobot(Robot.Selected-1).theMotionLoger.lastCommand = "MRET"
		End Sub
		
		Public Sub changeMappingHand(stage As Integer)
			Dim mapStartLoc As LocationEx = theStationManager.getStation(stage).mapStartLocation
			Dim homeloc As locationEx = myRobot(Robot.Selected-1).thePointDataManager.getLocation(HOME_POINT_INDEX)
			
			
			If signalcount > 1 Then
				Dim upperdiff As Double = Math.Abs(mapStartLoc.loc.angle(myRobot(Robot.Selected-1).ControlAxis("L")) - homeloc.loc.angle(myRobot(Robot.Selected-1).ControlAxis("L")))
				Dim lowerdiff As Double = Math.Abs(mapStartLoc.loc.angle(myRobot(Robot.Selected-1).ControlAxis("R")) - homeloc.loc.angle(myRobot(Robot.Selected-1).ControlAxis("R")))
				If upperdiff > lowerdiff Then
					theMappingSignal(0).sensorIO = theMappingSignal(2).sensorIO
					theMappingSignal(0).signalIO = theMappingSignal(2).signalIO
				Else 
					theMappingSignal(0).sensorIO = theMappingSignal(1).sensorIO
					theMappingSignal(0).signalIO = theMappingSignal(1).signalIO
				End If 
			End If 
			
		End Sub 
		
		Public Sub doMapping(stage As Integer)
			
			Dim ex As Exception
			
			theStationManager.checkStageNumber(stage)
			lastMappingStage = stage
			changeMappingHand(stage)
			theLatchManager.block()
			
			Try
				moveToMapReady(stage)
				theMoveEx.waitForEOM()
				
				sensorON()
				timer.startTimer()
				
				extendArm(stage)
				theMoveEx.waitForEOM()
				
				timer.assertTimeDelay(theSystem.mappingOnDelay)
				latchStart()
				
				zUp(stage)
				theMoveEx.waitForEOM()
				
				m_latchDataCount = theLatchManager.popLatchDataList(m_latchDataList)
				
				latchStop()
				sensorOFF()
				
				retractArm(stage)
				theMoveEx.wait()
				
			Catch ex
				Throw ex
			
			Finally
				theLatchManager.unBlock()
			End Try
		End Sub
		
		Public Sub doDoubleMapping(stage As Integer)
			
			Dim ex As Exception
			
			theStationManager.checkStageNumber(stage)
			lastMappingStage = stage - 10
			changeMappingHand(stage)
			theLatchManager.block()
			
			Try
				moveToMapReady(stage)
				theMoveEx.waitForEOM()
				
				sensorON()
				timer.startTimer()
				
				extendArm(stage)
				theMoveEx.waitForEOM()
				
				timer.assertTimeDelay(theSystem.mappingOnDelay)
				latchStart()
				
				zUp(stage)
				theMoveEx.waitForEOM()
				
				m_latchDataCount = theLatchManager.popLatchDataList(m_latchDataList)
				
				latchStop()
				sensorOFF()
				
				retractArm(stage)
				theMoveEx.wait()
				
			Catch ex
				Throw ex
			
			Finally
				theLatchManager.unBlock()
			End Try
		End Sub
		
		Public Sub mapDataCallibration()
			Dim stage As Integer = lastMappingStage
			theStationManager.checkStageNumber(stage)
			
			If m_latchDataCount = 0 Then
				ThrowError(ERR_NO_LATCH_DATA)
			End If
			
			Dim sumOfThick As Double = 0
			Dim i As Integer
			For i = 0 To m_latchDataCount-1
				sumOfThick = sumOfThick + m_latchDataList(i).thick
			Next i
			
			theStationManager.getStation(stage).mappingParam.baseSlotZPos = m_latchDataList(0).zPosition
			theStationManager.getStation(stage).mappingParam.WaferThickness = sumOfThick / m_latchDataCount
			If theStationManager.getStation(stage).mappingParam.crossCriteria = 0 Then
				theStationManager.getStation(stage).mappingParam.crossCriteria = 30
			End If
			If theStationManager.getStation(stage).mappingParam.doubleCriteria = 0 Then
				theStationManager.getStation(stage).mappingParam.doubleCriteria = 60
			End If
		End Sub

		Public Sub save()
			Dim stage As Integer = lastMappingStage
			theStationManager.checkStageNumber(stage)

			theStationManager.getStation(stage).save()
		End Sub
		
		Public Function getLatchDataInfo(dataIndex As Integer) As String
			If m_latchDataCount <= dataIndex Then
				ThrowError(ERR_NO_LATCH_DATA)
			End If
			Return m_latchDataList(dataIndex).toString()
		End Function
		
		Public Function GetSlotLatchDataInfo(SlotIndex As Integer) As String
			Dim returnstring As String = ""
			Dim DataIndex As Integer = 0
			Select m_lastMappingData(SlotIndex)
				Case 2
					returnstring = "D"
				Case 3
					returnstring = "C"
				Case Else
					returnstring = CStr(m_lastMappingData(SlotIndex))
			End Select
			For DataIndex =0 To m_latchDataCount - 1
				If m_latchDataList(dataIndex).SlotNoInfo = SlotIndex Then
				returnstring = returnstring & "," & m_latchDataList(dataIndex).toString_OnlyData()
				End If
			Next
			Return returnstring
		End Function
		
		Public Function getLatchDataLog() As String
			Return m_latchLog
		End Function
		
		Public Function mapDataGetResult() As String
			Dim stage As Integer = lastMappingStage
			theStationManager.checkStageNumber(stage)

			Dim slotCount As Integer = theStationManager.getStation(stage).slotCount
			Dim res(slotCount) As Integer
			Dim i As Integer
			For i = 0 To slotCount-1
				res(i) = MAP_EMPTY
			Next

			Dim slotPitch As Double = theStationManager.getStation(stage).slotPitch
			If slotPitch = 0 Then
				ThrowError(ERR_INVALID_PARAMETER)
			End If
			
			Dim normalPitch As Double = theStationManager.getStation(stage).mappingParam.WaferThickness
			Dim doublePitch As Double = normalPitch * (100 + theStationManager.getStation(stage).mappingParam.doubleCriteria) / 100
			Dim crossPitch As Double = slotPitch * 0.5 * (100 - theStationManager.getStation(stage).mappingParam.crossCriteria) / 100
			Dim baseZ As Double = theStationManager.getStation(stage).mappingParam.baseSlotZPos
			If ShowCommandLogToConsole = True Then
				MyConsole.WriteLine("---Calculate Mapping--- [Stage:" + CStr(stage) + "]")
				MyConsole.WriteLine("double=" & CStr(doublePitch))
				MyConsole.WriteLine("cross =" & CStr(crossPitch))
				MyConsole.WriteLine("normal=" & CStr(normalPitch))
				MyConsole.WriteLine("data length=" & CStr(m_latchDataCount))
				m_latchLog = m_latchLog + "---Calculate Mapping--- [Stage:" + CStr(stage) + "]" + Chr(GPL_CR) + Chr(GPL_LF)
				m_latchLog = m_latchLog + "double=" & CStr(doublePitch) + Chr(GPL_CR) + Chr(GPL_LF)
				m_latchLog = m_latchLog + "cross =" & CStr(crossPitch) + Chr(GPL_CR) + Chr(GPL_LF)
				m_latchLog = m_latchLog + "normal=" & CStr(normalPitch) + Chr(GPL_CR) + Chr(GPL_LF)
				m_latchLog = m_latchLog + "data length=" & CStr(m_latchDataCount) + Chr(GPL_CR) + Chr(GPL_LF)
			End If
			
			Dim calcSlotIndex As Integer = -1 ' 0 ~ slotCount-1
			Dim inSlotPosErr As Double
			For i = 0 To m_latchDataCount-1
				calcSlotIndex = Math.Floor(((m_latchDataList(i).zPosition - baseZ) / slotPitch) + 0.5)
				inSlotPosErr = (m_latchDataList(i).zPosition - baseZ) - (calcSlotIndex * slotPitch)
				m_latchDataList(i).SlotNoInfo = calcSlotIndex
				
				If ShowCommandLogToConsole = True Then
					MyConsole.WriteLine("--" & CStr(i+1) & "--")
					MyConsole.WriteLine("pos=" & CStr(m_latchDataList(i).zPosition))
					MyConsole.WriteLine("thick=" & CStr(m_latchDataList(i).thick))
					MyConsole.WriteLine("index=" & CStr(calcSlotIndex))
					MyConsole.WriteLine("in solot pos err=" & CStr(inSlotPosErr))
					m_latchLog = m_latchLog + "--" & CStr(i+1) & "--" + Chr(GPL_CR) + Chr(GPL_LF)
					m_latchLog = m_latchLog + "pos=" & CStr(m_latchDataList(i).zPosition - baseZ) + Chr(GPL_CR) + Chr(GPL_LF)
					m_latchLog = m_latchLog + "thick=" & CStr(m_latchDataList(i).thick) + Chr(GPL_CR) + Chr(GPL_LF)
					m_latchLog = m_latchLog + "index=" & CStr(calcSlotIndex) + Chr(GPL_CR) + Chr(GPL_LF)
					m_latchLog = m_latchLog + "in solot pos err=" & CStr(inSlotPosErr) + Chr(GPL_CR) + Chr(GPL_LF)
				End If
				
				If calcSlotIndex >= 0 And calcSlotIndex < slotCount Then
					If res(calcSlotIndex) <> MAP_EMPTY Then
						res(calcSlotIndex) = MAP_DOUBLE
						MyConsole.WriteLine(" Warning : *mapping read second times at same slot index " + CStr(calcSlotIndex) + "*")
					Else
						If Math.Abs(inSlotPosErr) > crossPitch Or m_latchDataList(i).thick >= normalPitch*3.5 Then
							res(calcSlotIndex) = MAP_CROSS
							If m_bothSlotCrossResult = True Then
								If inSlotPosErr >= 0 And calcSlotIndex < slotCount-1 Then
									res(calcSlotIndex+1) = MAP_CROSS
								ElseIf inSlotPosErr <= 0 And calcSlotIndex > 0 Then
									res(calcSlotIndex-1) = MAP_CROSS
								End If
							End If
						ElseIf m_latchDataList(i).thick > doublePitch Then
							res(calcSlotIndex) = MAP_DOUBLE
						Else
							res(calcSlotIndex) = MAP_NORMAL
						End If
					End If
					
					If ShowCommandLogToConsole = True Then
						MyConsole.WriteLine("res=" & CStr(res(calcSlotIndex)))
						m_latchLog = m_latchLog + "res=" & CStr(res(calcSlotIndex)) + Chr(GPL_CR) + Chr(GPL_LF)
					End If
					
				Else
					MyConsole.WriteLine(" Warning : *mapping calc wrong slot index*")
				End If
				m_lastMappingData(calcSlotIndex) = res(calcSlotIndex)
			Next

			Dim result As String = ""
			For i = 0 To slotCount-1
				result = result + getMappingChar(res(i))
			Next
			
			Return result
		End Function
		
		Public Sub DoublemapDataGetResult()
			Dim stage As Integer = lastMappingStage
			theStationManager.checkStageNumber(stage)

			Dim slotCount As Integer = theStationManager.getStation(stage).slotCount
			Dim res(slotCount) As Integer
			Dim i As Integer
			For i = 0 To slotCount-1
				res(i) = MAP_EMPTY
			Next

			Dim slotPitch As Double = theStationManager.getStation(stage).slotPitch
			If slotPitch = 0 Then
				ThrowError(ERR_INVALID_PARAMETER)
			End If
			
			Dim normalPitch As Double = theStationManager.getStation(stage).mappingParam.WaferThickness
			Dim doublePitch As Double = normalPitch * (100 + theStationManager.getStation(stage).mappingParam.doubleCriteria) / 100
			Dim crossPitch As Double = slotPitch * 0.5 * (100 - theStationManager.getStation(stage).mappingParam.crossCriteria) / 100
			Dim baseZ As Double = theStationManager.getStation(stage).mappingParam.baseSlotZPos
			If ShowCommandLogToConsole = True Then
				MyConsole.WriteLine("---Calculate Mapping--- [Stage:" + CStr(stage) + "]")
				MyConsole.WriteLine("double=" & CStr(doublePitch))
				MyConsole.WriteLine("cross =" & CStr(crossPitch))
				MyConsole.WriteLine("normal=" & CStr(normalPitch))
				MyConsole.WriteLine("data length=" & CStr(m_latchDataCount))
				m_latchLog = m_latchLog + "---Calculate Mapping--- [Stage:" + CStr(stage) + "]" + Chr(GPL_CR) + Chr(GPL_LF)
				m_latchLog = m_latchLog + "double=" & CStr(doublePitch) + Chr(GPL_CR) + Chr(GPL_LF)
				m_latchLog = m_latchLog + "cross =" & CStr(crossPitch) + Chr(GPL_CR) + Chr(GPL_LF)
				m_latchLog = m_latchLog + "normal=" & CStr(normalPitch) + Chr(GPL_CR) + Chr(GPL_LF)
				m_latchLog = m_latchLog + "data length=" & CStr(m_latchDataCount) + Chr(GPL_CR) + Chr(GPL_LF)
			End If
			
			Dim calcSlotIndex As Integer = -1 ' 0 ~ slotCount-1
			Dim inSlotPosErr As Double
			For i = 0 To m_latchDataCount-1
				calcSlotIndex = Math.Floor(((m_latchDataList(i).zPosition - baseZ) / slotPitch) + 0.5)
				inSlotPosErr = (m_latchDataList(i).zPosition - baseZ) - (calcSlotIndex * slotPitch)
				m_latchDataList(i).SlotNoInfo = calcSlotIndex
				
				If ShowCommandLogToConsole = True Then
					MyConsole.WriteLine("--" & CStr(i+1) & "--")
					MyConsole.WriteLine("pos=" & CStr(m_latchDataList(i).zPosition))
					MyConsole.WriteLine("thick=" & CStr(m_latchDataList(i).thick))
					MyConsole.WriteLine("index=" & CStr(calcSlotIndex))
					MyConsole.WriteLine("in solot pos err=" & CStr(inSlotPosErr))
					m_latchLog = m_latchLog + "--" & CStr(i+1) & "--" + Chr(GPL_CR) + Chr(GPL_LF)
					m_latchLog = m_latchLog + "pos=" & CStr(m_latchDataList(i).zPosition - baseZ) + Chr(GPL_CR) + Chr(GPL_LF)
					m_latchLog = m_latchLog + "thick=" & CStr(m_latchDataList(i).thick) + Chr(GPL_CR) + Chr(GPL_LF)
					m_latchLog = m_latchLog + "index=" & CStr(calcSlotIndex) + Chr(GPL_CR) + Chr(GPL_LF)
					m_latchLog = m_latchLog + "in solot pos err=" & CStr(inSlotPosErr) + Chr(GPL_CR) + Chr(GPL_LF)
				End If
				
				If calcSlotIndex >= 0 And calcSlotIndex < slotCount Then
					If res(calcSlotIndex) <> MAP_EMPTY Then
						res(calcSlotIndex) = MAP_DOUBLE
						MyConsole.WriteLine(" Warning : *mapping read second times at same slot index " + CStr(calcSlotIndex) + "*")
					Else
						If Math.Abs(inSlotPosErr) > crossPitch Then
							res(calcSlotIndex) = MAP_CROSS
							If m_bothSlotCrossResult = True Then
								If inSlotPosErr >= 0 And calcSlotIndex < slotCount-1 Then
									res(calcSlotIndex+1) = MAP_CROSS
								ElseIf inSlotPosErr <= 0 And calcSlotIndex > 0 Then
									res(calcSlotIndex-1) = MAP_CROSS
								End If
							End If
						ElseIf m_latchDataList(i).thick > doublePitch Then
							res(calcSlotIndex) = MAP_DOUBLE
						Else
							res(calcSlotIndex) = MAP_NORMAL
						End If
					End If
					
					If ShowCommandLogToConsole = True Then
						MyConsole.WriteLine("res=" & CStr(res(calcSlotIndex)))
						m_latchLog = m_latchLog + "res=" & CStr(res(calcSlotIndex)) + Chr(GPL_CR) + Chr(GPL_LF)
					End If
					
				Else
					MyConsole.WriteLine(" Warning : *mapping calc wrong slot index*")
				End If
			Next

			Dim result As String = ""
			For i = 0 To slotCount-1
				result = getMappingChar(res(i))
				If result = "1" Or result = "D" Or result = "C" Or result = "U" Then
					throwError(ERR_DOUBLE_MAPPING_DETECT)
				End If 
			Next
			
		End Sub
	End Class

End Module
'Created: 11/10/2017 9:37:53 AM
'StateMonitor 1.0
Module StateMonitorModule
	Const MONITER_TIME_INTERVAL As Integer= 2's
	Public Dim TheStateMonitorManager As New StateMonitorManager
	
	Public Class StateMonitorManager
		
		Const PDB_NUMBER_OF_AXIS As Integer = 2000
		Private Dim UseStateMonitor As Boolean = False
		Shared Public Dim TheStateMonitor As New StateMonitor(MONITER_TIME_INTERVAL)
		Shared Public Dim StateMonitorThread As New Thread("StateMonitorManager.StateMonitorThreadsub",,"PM_MonitorThread")
		Shared Public Sub StateMonitorThreadsub()
			TheStateMonitor.StateMonitorSub
		End Sub
		
		Shared Public Sub StateMonitorThreadstart()
			theStateMonitor.MonitoringFlag = True
			If StateMonitorThread.ThreadState <= 0 Then
				StateMonitorThread.Start
			End If
		End  Sub
		
		Shared Public Sub StateMonitorThreadEnd()
			Dim Count As Integer = 0
			Const Dim MaximumCount As Integer = 2
			theStateMonitor.MonitoringFlag = False
			For Count = 0 To MaximumCount 
				Thread.sleep(theStateMonitor.ReadtimerInterval)
				If Not(stateMonitorThread.ThreadState = 2) Then
					Exit Sub
				End If
			Next
			'start thread stop Command TimeOut Error sequance
			'End thread stop Command TimeOut Error sequance
		End Sub
		
		Shared Private Dim IsUsePM_Monitoring As Boolean = False
		Shared Public ReadOnly Property IsUsePM_Monitoring As Boolean
			Get
				Return Me.IsUsePM_Monitoring
			End Get
		End Property
		Public Sub UsePM_MonitoringFunction()
			Me.IsUsePM_Monitoring = True
			StateMonitorThreadstart()
		End Sub
		
		Public Function GetMoniteringTrackingError(Month As Integer, Day As Integer) As String
			Dim AxisCount As Integer
			Const MotorToJointScaleFactors As Integer = 2301
			Dim result As String = Format(theStateMonitor.TrackingError(Month,Day,1)*Controller.PDbNum(2301,,,1)*1000,"####0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.TrackingError(Month,Day,AxisCount)*Controller.PDbNum(2301,,,AxisCount)*1000,"####0.0##")
			Next
			Return result
		End Function 
		
		Public Function GetMoniteringTrackingError(Day As Integer) As String
			Dim AxisCount As Integer
			Const MotorToJointScaleFactors As Integer = 2301
			Dim result As String = Format(theStateMonitor.TrackingError(Day,1)*Controller.PDbNum(2301,,,1)*1000,"####0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.TrackingError(Day,AxisCount)*Controller.PDbNum(2301,,,AxisCount)*1000,"####0.0##")
			Next
			Return result
		End Function 
		
		Public Function GetMoniteringTrackingError() As String
			Dim AxisCount As Integer
			Const MotorToJointScaleFactors As Integer = 2301
			Dim result As String = Format(theStateMonitor.TrackingError(1)*Controller.PDbNum(2301,,,1)*1000,"####0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.TrackingError(AxisCount)*Controller.PDbNum(2301,,,AxisCount)*1000,"####0.0##")
			Next
			Return result
		End Function 
		
		Public Function GetMoniteringMontlyTrackingError(Month As Integer) As String
			Dim AxisCount As Integer
			Const MotorToJointScaleFactors As Integer = 2301
			Dim result As String = Format(theStateMonitor.MonthlyTrackingError(Month,1)*Controller.PDbNum(2301,,,1)*1000,"####0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.MonthlyTrackingError(Month,AxisCount)*Controller.PDbNum(2301,,,AxisCount)*1000,"####0.0##")
			Next
			Return result
		End Function
		
		Public Function GetMoniteringMontlyTrackingError() As String
			Dim AxisCount As Integer
			Const MotorToJointScaleFactors As Integer = 2301
			Dim result As String = Format(theStateMonitor.MonthlyTrackingError(1)*Controller.PDbNum(2301,,,1)*1000,"####0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.MonthlyTrackingError(AxisCount)*Controller.PDbNum(2301,,,AxisCount)*1000,"####0.0##")
			Next
			Return result
		End Function 
		
		Public Function GetMoniteringLastdayTrackingError(LastDayCount As Integer) As String
			Dim AxisCount As Integer
			Const MotorToJointScaleFactors As Integer = 2301
			Dim result As String = Format(theStateMonitor.LastDayTrackingError(1,LastDayCount)*Controller.PDbNum(2301,,,1)*1000,"####0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.LastDayTrackingError(AxisCount,LastDayCount)*Controller.PDbNum(2301,,,AxisCount)*1000,"####0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringTrackingErrorLoc(Month As Integer, Day As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.TrackingErrorLoc(Month,Day,1),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.TrackingErrorLoc(Month,Day,AxisCount),"###0.0##")
			Next
			Return result
		End Function
	
		Public Function GetMoniteringTrackingErrorLoc(Day As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.TrackingErrorLoc(Day,1),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.TrackingErrorLoc(Day,AxisCount),"###0.0##")
			Next
			Return result
		End Function

		Public Function GetMoniteringTrackingErrorLoc() As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.TrackingErrorLoc(1),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.TrackingErrorLoc(AxisCount),"###0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringMontlyTrackingErrorloc(Month As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.MonthlyTrackingErrorloc(Month,1),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.MonthlyTrackingErrorloc(Month,AxisCount),"###0.0##")
			Next
			Return result
		End Function
	
		Public Function GetMoniteringMontlyTrackingErrorloc() As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.MonthlyTrackingErrorloc(1),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.MonthlyTrackingErrorloc(AxisCount),"###0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringLastdayTrackingErrorLoc(LastDayCount As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.LastDayTrackingErrorLoc(1,LastDayCount),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.LastDayTrackingErrorLoc(AxisCount,LastDayCount),"###0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringDuty(Month As Integer, Day As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.DutyPerRMSTorque(Month,Day,1),"##0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.DutyPerRMSTorque(Month,Day,AxisCount),"##0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringDuty(Day As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.DutyPerRMSTorque(Day,1),"##0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.DutyPerRMSTorque(Day,AxisCount),"##0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringDuty() As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.DutyPerRMSTorque(1),"##0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.DutyPerRMSTorque(AxisCount),"##0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringMontlyDuty(Month As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.MonthlyDutyPerRMSTorque(Month,1),"##0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.MonthlyDutyPerRMSTorque(Month,AxisCount),"##0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringMontlyDuty() As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.MonthlyDutyPerRMSTorque(1),"##0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.MonthlyDutyPerRMSTorque(AxisCount),"##0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringLastdayDuty(LastDayCount As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.LastDayDutyPerRMSTorque(1,LastDayCount),"##0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.MonthlyDutyPerRMSTorque(AxisCount,LastDayCount),"##0.0##")
			Next
			Return result
		End Function 

		Public Function GetMoniteringDutyLoc(Month As Integer, Day As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.DutyPerRMSTorqueLoc(Month,Day,1),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.DutyPerRMSTorqueLoc(Month,Day,AxisCount),"###0.0##")
			Next
			Return result
		End Function 

		Public Function GetMoniteringDutyLoc(Day As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.DutyPerRMSTorqueLoc(Day,1),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.DutyPerRMSTorqueLoc(Day,AxisCount),"###0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringDutyLoc() As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.DutyPerRMSTorqueLoc(1),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.DutyPerRMSTorqueLoc(AxisCount),"###0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringMontlyDutyLoc(Month As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.MonthlyDutyPerRMSTorqueLoc(Month,1),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.MonthlyDutyPerRMSTorqueLoc(Month,AxisCount),"##0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringMontlyDutyLoc() As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.MonthlyDutyPerRMSTorqueLoc(1),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.MonthlyDutyPerRMSTorqueLoc(AxisCount),"##0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringLastdayDutyLoc(LastDayCount As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.LastDayDutyPerRMSTorqueLoc(1,LastDayCount),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.LastDayDutyPerRMSTorqueLoc(AxisCount,LastDayCount),"###0.0##")
			Next
			Return result
		End Function
		
		Public Function GetMoniteringTorque(Month As Integer, Day As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.CompensatorOutputTorque(Month,Day,1),"##0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.CompensatorOutputTorque(Month,Day,AxisCount),"##0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringTorque(Day As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.CompensatorOutputTorque(Day,1),"##0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.CompensatorOutputTorque(Day,AxisCount),"##0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringTorque() As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.CompensatorOutputTorque(1),"##0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.CompensatorOutputTorque(AxisCount),"##0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringMontlyTorque(Month As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.CompensatorOutputTorque(Month,1),"##0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.CompensatorOutputTorque(Month,AxisCount),"##0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringMontlyTorque() As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.CompensatorOutputTorque(1),"##0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.CompensatorOutputTorque(AxisCount),"##0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringLastdayTorque(LastDayCount As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.CompensatorOutputTorque(1,LastDayCount),"##0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.CompensatorOutputTorque(AxisCount,LastDayCount),"##0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringTorqueLoc(Month As Integer, Day As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.CompensatorOutputTorqueLoc(Month,Day,1),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.CompensatorOutputTorqueLoc(Month,Day,AxisCount),"###0.0##")
			Next
			Return result
		End Function 

		Public Function GetMoniteringTorqueLoc(Day As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.CompensatorOutputTorqueLoc(Day,1),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.CompensatorOutputTorqueLoc(Day,AxisCount),"###0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringTorqueLoc() As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.CompensatorOutputTorqueLoc(1),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.CompensatorOutputTorqueLoc(AxisCount),"###0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringMontlyTorqueLoc(Month As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.MonthlyCompensatorOutputTorqueLoc(Month,1),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.MonthlyCompensatorOutputTorqueLoc(Month,AxisCount),"##0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringMontlyTorqueLoc() As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.MonthlyCompensatorOutputTorqueLoc(1),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.MonthlyCompensatorOutputTorqueLoc(AxisCount),"##0.0##")
			Next
			Return result
		End Function 
	
		Public Function GetMoniteringLastdayTorqueLoc(LastDayCount As Integer) As String
			Dim AxisCount As Integer
			Dim result As String = Format(theStateMonitor.LastDayCompensatorOutputTorqueLoc(1,LastDayCount),"###0.0##")
			For AxisCount = 2 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				result = result+","+Format(theStateMonitor.LastDayCompensatorOutputTorqueLoc(AxisCount,LastDayCount),"###0.0##")
			Next
			Return result
		End Function 
	End Class
	
	
	Public Class StateMonitor
		Const PDB_VELOCITY_COMMAND As Integer = 12402
		Const PDB_POSITION_TRACKING_ERROR As Integer = 12320
		Const PDB_DUTY_PER_LIMIT As Integer = 12608
		Const PDB_DUTY_CYCLE_LIMIT As Integer = 10623
		Const PDB_COMPENSATOR_OUTPUT_TORQUE As Integer = 12304
		Const PDB_RMS_RATED_TORQUE As Integer = 10612
		Const PDB_NUMBER_OF_AXIS As Integer = 2000
		Const PDB_DATE_AND_TIME As Integer = 121
		Const MAXIMUM_TIMER_INTERVAL As Integer =14399's
		Const MINIMUM_TIMER_INTERVAL As Double = 0.1's
			
		Private Class MoniterValue
			Public Dim TrackingError As Integer
			Public Dim TrackingErrorLoc As Double
			Public Dim DutyPerRMSTorque As Integer
			Public Dim DutyPerRMSTorqueLoc As Double
			Public Dim CompensatorOutputTorque As Integer
			Public Dim CompensatorOutputTorqueLoc As Double
			Public Dim DayCount As Integer
		End Class
		Private Dim TheMoniterValue(,,) As moniterValue
		Private Class DefIndexFor
			Public Dim Day As Integer
			Public Dim Month As Integer
		End Class
		Private Dim IndexForDayCount(366) As DefIndexFor
		
		Private Dim DayCount As Integer = 1
		
		Private Dim MonitoringFlag As Boolean = True
		Private Dim TimerInterval As Integer = 10
		Private Dim StartTime As String
		Private Dim Selectedrobot As Integer = 0
		
		Private Dim AxisNumber As Integer = 10
		Private Dim BaseCount As Integer = 0
		Private Dim TimerCount As Integer = 0
		Private Dim NumberOfData As Integer = 0
		
		Private Dim CurrentTime(3) As String
		Private Dim CurrentDate(3) As String
		Private Dim StateMonitorMutex As New Mutex

		Public Property MonitoringFlag As Boolean
			Get 
				Return Me.MonitoringFlag
			End Get
			Set (Value As Boolean)
				Me.MonitoringFlag = Value
			End Set
		End Property
		
		Public ReadOnly Property ReadtimerInterval As Integer
			Get
				Return TimerInterval
			End Get
		End Property
		
		Public ReadOnly Property startTime As String
			Get 
				Return Me.StartTime
			End Get
		End Property
		
		Public ReadOnly Property TrackingError(month As Integer, Day As Integer, Axis As Integer) As Integer
			Get
				Dim Result As Integer = TheMoniterValue(month-1,Day-1,Axis-1).TrackingError
				Return Result
			End Get
		End Property
		
		Public ReadOnly Property TrackingError(Day As Integer,Axis As Integer) As Integer
			Get
				Dim Result As Integer = TheMoniterValue(CInt(CurrentDate(0))-1,Day-1,Axis-1).TrackingError
				Return Result
			End Get
		End Property
		
		Public ReadOnly Property TrackingError(Axis As Integer) As Integer
			Get
				Dim Result As Integer = TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,Axis-1).TrackingError
				Return Result
			End Get
		End Property
		
		Public ReadOnly Property DutyPerRMSTorque(month As Integer, Day As Integer, Axis As Integer) As Integer
			Get
				Dim Result As Integer = TheMoniterValue(month-1,Day-1,Axis-1).DutyPerRMSTorque
				Return Result
			End Get
		End Property
		
		Public ReadOnly Property DutyPerRMSTorque(Day As Integer,Axis As Integer) As Integer
			Get
				Dim Result As Integer = TheMoniterValue(CInt(CurrentDate(0))-1,Day-1,Axis-1).DutyPerRMSTorque
				Return Result
			End Get
		End Property
		
		Public ReadOnly Property DutyPerRMSTorque(Axis As Integer) As Integer
			Get
				Dim Result As Integer = TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,Axis-1).DutyPerRMSTorque
				Return Result
			End Get
		End Property

		Public ReadOnly Property CompensatorOutputTorque(month As Integer, Day As Integer, Axis As Integer) As Integer
			Get
				Dim Result As Integer = TheMoniterValue(month-1,Day-1,Axis-1).CompensatorOutputTorque
				Return Result
			End Get
		End Property
		
		Public ReadOnly Property CompensatorOutputTorque(Day As Integer,Axis As Integer) As Integer
			Get
				Dim Result As Integer = TheMoniterValue(CInt(CurrentDate(0))-1,Day-1,Axis-1).CompensatorOutputTorque
				Return Result
			End Get
		End Property
		
		Public ReadOnly Property CompensatorOutputTorque(Axis As Integer) As Integer
			Get
				Dim Result As Integer = TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,Axis-1).CompensatorOutputTorque
				Return Result
			End Get
		End Property
		
		Public ReadOnly Property TrackingErrorLoc(month As Integer, Day As Integer, Axis As Integer) As Double
			Get
				Dim Result As Integer = TheMoniterValue(month-1,Day-1,Axis-1).TrackingErrorLoc
				Return Result
			End Get
		End Property
		
		Public ReadOnly Property TrackingErrorLoc(Day As Integer, Axis As Integer) As Double
			Get
				Dim Result As Integer = TheMoniterValue(CInt(CurrentDate(0))-1,Day-1,Axis-1).TrackingErrorLoc
				Return Result
			End Get
		End Property
		
		Public ReadOnly Property TrackingErrorLoc(Axis As Integer) As Double
			Get
				Dim Result As Integer = TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,Axis-1).TrackingErrorLoc
				Return Result
			End Get
		End Property
		
		Public ReadOnly Property CompensatorOutputTorqueLoc(month As Integer, Day As Integer, Axis As Integer) As Double
			Get
				Dim Result As Integer = TheMoniterValue(month-1,Day-1,Axis-1).CompensatorOutputTorqueLoc
				Return Result
			End Get
		End Property
		
		Public ReadOnly Property CompensatorOutputTorqueLoc(Day As Integer, Axis As Integer) As Double
			Get
				Dim Result As Integer = TheMoniterValue(CInt(CurrentDate(0))-1,Day-1,Axis-1).CompensatorOutputTorqueLoc
				Return Result
			End Get
		End Property
		
		Public ReadOnly Property CompensatorOutputTorqueLoc(Axis As Integer) As Double
			Get
				Dim Result As Integer = TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,Axis-1).CompensatorOutputTorqueLoc
				Return Result
			End Get
		End Property
		
		Public ReadOnly Property DutyPerRMSTorqueLoc(month As Integer, Day As Integer, Axis As Integer) As Double
			Get
				Dim Result As Integer = TheMoniterValue(month-1,Day-1,Axis-1).DutyPerRMSTorqueLoc
				Return Result
			End Get
		End Property
		
		Public ReadOnly Property DutyPerRMSTorqueLoc(Day As Integer, Axis As Integer) As Double
			Get
				Dim Result As Integer = TheMoniterValue(CInt(CurrentDate(0))-1,Day-1,Axis-1).DutyPerRMSTorqueLoc
				Return Result
			End Get
		End Property
		
		Public ReadOnly Property DutyPerRMSTorqueLoc(Axis As Integer) As Double
			Get
				Dim Result As Integer = TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,Axis-1).DutyPerRMSTorqueLoc
				Return Result
			End Get
		End Property
		
		Public Function MonthlyTrackingError(Axis As Integer) As Integer
			Dim me_monthlyTrackingError As Double
			Dim MaxTrackingErrorDate As DefIndexFor
			MaxTrackingErrorDate = MonthlyTrackingErrorDate(CurrentDate(0), Axis)
			me_monthlyTrackingError = TrackingError(MaxTrackingErrorDate.month, MaxTrackingErrorDate.Day, Axis)
			Return me_monthlyTrackingError
		End Function
		
		Public Function MonthlyTrackingError(month As Integer, Axis As Integer) As Integer
			Dim me_monthlyTrackingError As Double
			Dim MaxTrackingErrorDate As DefIndexFor
			MaxTrackingErrorDate = MonthlyTrackingErrorDate(month, Axis)
			me_monthlyTrackingError = TrackingError(MaxTrackingErrorDate.month, MaxTrackingErrorDate.Day, Axis)
			Return me_monthlyTrackingError
		End Function
		
		Public Function MonthlyTrackingErrorLoc(Axis As Integer) As Integer
			Dim me_monthlyTrackingErrorLoc As Double
			Dim MaxTrackingErrorDate As DefIndexFor
			MaxTrackingErrorDate = MonthlyTrackingErrorDate(CurrentDate(0), Axis)
			me_monthlyTrackingErrorLoc = TrackingErrorLoc(MaxTrackingErrorDate.month, MaxTrackingErrorDate.Day, Axis)
			Return me_monthlyTrackingErrorLoc
		End Function
		
		Public Function MonthlyTrackingErrorLoc(month As Integer, Axis As Integer) As Integer
			Dim me_monthlyTrackingErrorLoc As Double
			Dim MaxTrackingErrorDate As DefIndexFor
			MaxTrackingErrorDate = MonthlyTrackingErrorDate(month, Axis)
			me_monthlyTrackingErrorLoc = TrackingErrorLoc(MaxTrackingErrorDate.month, MaxTrackingErrorDate.Day, Axis)
			Return me_monthlyTrackingErrorLoc
		End Function
		
		Public Function MonthlyTrackingErrorDate(month As Integer, Axis As Integer) As DefIndexFor
			Dim me_monthlyTrackingError As Double
			Dim MaxTrackingErrorDate As New DefIndexFor
			Dim DayCount As Integer
			MaxTrackingErrorDate.month = month
			MaxTrackingErrorDate.Day = 1
			For DayCount = 0 To 30
				If me_monthlyTrackingError < TheMoniterValue(month-1,DayCount,Axis-1).TrackingError Then
					me_monthlyTrackingError = TheMoniterValue(month-1,DayCount,Axis-1).TrackingError
					MaxTrackingErrorDate.Day = DayCount+1	
				End If
			Next
			Return MaxTrackingErrorDate
		End Function
		
		Public Function LastDayTrackingError(Axis As Integer,LastDay As Integer) As Integer
			Dim me_LastDayTrackingError As Double = 0
			Dim MaxTrackingErrorDate As DefIndexFor
			MaxTrackingErrorDate = LastDayTrackingErrorDate(Axis,LastDay)
			me_LastDayTrackingError = TrackingError(MaxTrackingErrorDate.month, MaxTrackingErrorDate.Day, Axis)
			Return me_LastDayTrackingError
		End Function
		
		Public Function LastDayTrackingErrorLoc(Axis As Integer,LastDay As Integer) As Integer
			Dim me_LastDayTrackingErrorLoc As Double = 0
			Dim MaxTrackingErrorDate As DefIndexFor
			MaxTrackingErrorDate = LastDayTrackingErrorDate(Axis,LastDay)
			me_LastDayTrackingErrorLoc = TrackingErrorLoc(MaxTrackingErrorDate.month, MaxTrackingErrorDate.Day, Axis)
			Return me_LastDayTrackingErrorLoc
		End Function
		
		Public Function LastDayTrackingErrorDate(Axis As Integer,LastDay As Integer) As DefIndexFor
			Dim me_LastDayTrackingError As Double = 0
			Dim DayCount As Integer
			Dim MonthCount As Integer
			Dim Indexadress As Integer
			Dim MaxTrackingErrorDate As New DefIndexFor
			MaxTrackingErrorDate.month = CurrentDate(0)
			MaxTrackingErrorDate.Day = CurrentDate(1)
			For DayCount = 0 To LastDay-1
				Indexadress = Me.DayCount - DayCount - 1
				If Indexadress >= 0 Then
					If me_LastDayTrackingError < TheMoniterValue(IndexForDayCount(Indexadress).Month-1,IndexForDayCount(Indexadress).Day-1,Axis-1).TrackingError Then
						me_LastDayTrackingError = TheMoniterValue(IndexForDayCount(Indexadress).Month-1,IndexForDayCount(Indexadress).Day-1,Axis-1).TrackingError
						MaxTrackingErrorDate.month = IndexForDayCount(Indexadress).Month
						MaxTrackingErrorDate.Day = IndexForDayCount(Indexadress).Day
					End If
				End If
			Next
			Return MaxTrackingErrorDate
		End Function
		
		Public Function MonthlyDutyPerRMSTorque(Axis As Integer) As Integer
			Dim me_DutyPerRMSTorque As Double
			Dim MaxDutyPerRMSTorqueDate As DefIndexFor
			MaxDutyPerRMSTorqueDate = MonthlyDutyPerRMSTorqueDate(CInt(CurrentDate(0)), Axis)
			me_DutyPerRMSTorque = DutyPerRMSTorque(MaxDutyPerRMSTorqueDate.month, MaxDutyPerRMSTorqueDate.Day, Axis)
			Return me_DutyPerRMSTorque
		End Function
		
		Public Function MonthlyDutyPerRMSTorque(month As Integer, Axis As Integer) As Integer
			Dim me_DutyPerRMSTorque As Double
			Dim MaxDutyPerRMSTorqueDate As DefIndexFor
			MaxDutyPerRMSTorqueDate = MonthlyDutyPerRMSTorqueDate(month, Axis)
			me_DutyPerRMSTorque = DutyPerRMSTorque(MaxDutyPerRMSTorqueDate.month, MaxDutyPerRMSTorqueDate.Day, Axis)
			Return me_DutyPerRMSTorque
		End Function
		
		Public Function MonthlyDutyPerRMSTorqueLoc(Axis As Integer) As Double
			Dim me_DutyPerRMSTorqueLoc As Double
			Dim MaxDutyPerRMSTorqueDate As DefIndexFor
			MaxDutyPerRMSTorqueDate = MonthlyDutyPerRMSTorqueDate(CInt(CurrentDate(0)), Axis)
			me_DutyPerRMSTorqueLoc = CompensatorOutputTorqueLoc(MaxDutyPerRMSTorqueDate.month, MaxDutyPerRMSTorqueDate.Day, Axis)
			Return me_DutyPerRMSTorqueLoc
		End Function
		
		Public Function MonthlyDutyPerRMSTorqueLoc(month As Integer, Axis As Integer) As Double
			Dim me_DutyPerRMSTorqueLoc As Double
			Dim MaxDutyPerRMSTorqueDate As DefIndexFor
			MaxDutyPerRMSTorqueDate = MonthlyDutyPerRMSTorqueDate(month, Axis)
			me_DutyPerRMSTorqueLoc = CompensatorOutputTorqueLoc(MaxDutyPerRMSTorqueDate.month, MaxDutyPerRMSTorqueDate.Day, Axis)
			Return me_DutyPerRMSTorqueLoc
		End Function
		
		Public Function MonthlyDutyPerRMSTorqueDate(month As Integer, Axis As Integer) As DefIndexFor
			Dim me_DutyPerRMSTorque As Double
			Dim MaxDutyPerRMSTorqueDate As New DefIndexFor
			Dim DayCount As Integer
			MaxDutyPerRMSTorqueDate.month = month
			MaxDutyPerRMSTorqueDate.Day = 1
			For DayCount = 0 To 30
				If me_DutyPerRMSTorque < TheMoniterValue(month-1,DayCount,Axis-1).DutyPerRMSTorque Then
					me_DutyPerRMSTorque = TheMoniterValue(month-1,DayCount,Axis-1).DutyPerRMSTorque
					MaxDutyPerRMSTorqueDate.Day = DayCount+1	
				End If
			Next
			Return MaxDutyPerRMSTorqueDate
		End Function
		
		Public Function LastDayDutyPerRMSTorque(Axis As Integer,LastDay As Integer) As Integer
			Dim me_DutyPerRMSTorque As Double = 0
			Dim MaxDutyPerRMSTorqueDate As DefIndexFor
			MaxDutyPerRMSTorqueDate = LastDayDutyPerRMSTorqueDate(Axis, LastDay)
			me_DutyPerRMSTorque = DutyPerRMSTorque(MaxDutyPerRMSTorqueDate.month, MaxDutyPerRMSTorqueDate.Day, Axis)
			Return me_DutyPerRMSTorque
		End Function
		
		Public Function LastDayDutyPerRMSTorqueLoc(Axis As Integer,LastDay As Integer) As Double
			Dim me_DutyPerRMSTorqueLoc As Double = 0
			Dim MaxDutyPerRMSTorqueDate As DefIndexFor
			MaxDutyPerRMSTorqueDate = LastDayDutyPerRMSTorqueDate(Axis, LastDay)
			me_DutyPerRMSTorqueLoc = CompensatorOutputTorqueLoc(MaxDutyPerRMSTorqueDate.month, MaxDutyPerRMSTorqueDate.Day, Axis)
			Return me_DutyPerRMSTorqueLoc
		End Function
		
		Public Function LastDayDutyPerRMSTorqueDate(Axis As Integer,LastDay As Integer) As DefIndexFor
			Dim me_DutyPerRMSTorque As Double = 0
			Dim DayCount As Integer
			Dim MonthCount As Integer
			Dim Indexadress As Integer
			Dim MaxDutyPerRMSTorqueDate As New DefIndexFor
			MaxDutyPerRMSTorqueDate.month = CurrentDate(0)
			MaxDutyPerRMSTorqueDate.Day = CurrentDate(1)
			For DayCount = 0 To LastDay-1
				Indexadress = Me.DayCount-DayCount-1
				If Indexadress>=0 Then
					If me_DutyPerRMSTorque < TheMoniterValue(IndexForDayCount(Indexadress).Month-1,IndexForDayCount(Indexadress).Day-1,Axis-1).DutyPerRMSTorque Then
						me_DutyPerRMSTorque = TheMoniterValue(IndexForDayCount(Indexadress).Month-1,IndexForDayCount(Indexadress).Day-1,Axis-1).DutyPerRMSTorque
						MaxDutyPerRMSTorqueDate.month = IndexForDayCount(Indexadress).Month
						MaxDutyPerRMSTorqueDate.Day = IndexForDayCount(Indexadress).Day
					End If
				End If
			Next
			Return MaxDutyPerRMSTorqueDate
		End Function

		Public Function MonthlyCompensatorOutputTorque(Axis As Integer) As Integer
			Dim me_CompensatorOutputTorque As Double
			Dim MaxCompensatorOutputTorqueDate As DefIndexFor
			MaxCompensatorOutputTorqueDate = MonthlyCompensatorOutputTorqueDate(CInt(CurrentDate(0)), Axis)
			me_CompensatorOutputTorque = CompensatorOutputTorque(MaxCompensatorOutputTorqueDate.month, MaxCompensatorOutputTorqueDate.Day, Axis)
			Return me_CompensatorOutputTorque
		End Function
		
		Public Function MonthlyCompensatorOutputTorque(month As Integer, Axis As Integer) As Integer
			Dim me_CompensatorOutputTorque As Double
			Dim MaxCompensatorOutputTorqueDate As DefIndexFor
			MaxCompensatorOutputTorqueDate = MonthlyCompensatorOutputTorqueDate(month, Axis)
			me_CompensatorOutputTorque = CompensatorOutputTorque(MaxCompensatorOutputTorqueDate.month, MaxCompensatorOutputTorqueDate.Day, Axis)
			Return me_CompensatorOutputTorque
		End Function
		
		Public Function MonthlyCompensatorOutputTorqueLoc(Axis As Integer) As Double
			Dim me_CompensatorOutputTorqueLoc As Double
			Dim MaxCompensatorOutputTorqueDate As DefIndexFor
			MaxCompensatorOutputTorqueDate = MonthlyCompensatorOutputTorqueDate(CInt(CurrentDate(0)), Axis)
			me_CompensatorOutputTorqueLoc = CompensatorOutputTorqueLoc(MaxCompensatorOutputTorqueDate.month, MaxCompensatorOutputTorqueDate.Day, Axis)
			Return me_CompensatorOutputTorqueLoc
		End Function
		
		Public Function MonthlyCompensatorOutputTorqueLoc(month As Integer, Axis As Integer) As Double
			Dim me_CompensatorOutputTorqueLoc As Double
			Dim MaxCompensatorOutputTorqueDate As DefIndexFor
			MaxCompensatorOutputTorqueDate = MonthlyCompensatorOutputTorqueDate(month, Axis)
			me_CompensatorOutputTorqueLoc = CompensatorOutputTorqueLoc(MaxCompensatorOutputTorqueDate.month, MaxCompensatorOutputTorqueDate.Day, Axis)
			Return me_CompensatorOutputTorqueLoc
		End Function
		
		Public Function MonthlyCompensatorOutputTorqueDate(month As Integer, Axis As Integer) As DefIndexFor
			Dim me_CompensatorOutputTorque As Double
			Dim MaxCompensatorOutputTorqueDate As New DefIndexFor
			Dim DayCount As Integer
			MaxCompensatorOutputTorqueDate.month = month
			MaxCompensatorOutputTorqueDate.Day = 1
			For DayCount = 0 To 30
				If me_CompensatorOutputTorque < TheMoniterValue(month-1,DayCount,Axis-1).CompensatorOutputTorque Then
					me_CompensatorOutputTorque = TheMoniterValue(month-1,DayCount,Axis-1).CompensatorOutputTorque
					MaxCompensatorOutputTorqueDate.Day = DayCount+1	
				End If
			Next
			Return MaxCompensatorOutputTorqueDate
		End Function
		
		Public Function LastDayCompensatorOutputTorque(Axis As Integer,LastDay As Integer) As Integer
			Dim me_CompensatorOutputTorque As Double = 0
			Dim MaxCompensatorOutputTorqueDate As DefIndexFor
			MaxCompensatorOutputTorqueDate = LastDayCompensatorOutputTorqueDate(Axis, LastDay)
			me_CompensatorOutputTorque = CompensatorOutputTorque(MaxCompensatorOutputTorqueDate.month, MaxCompensatorOutputTorqueDate.Day, Axis)
			Return me_CompensatorOutputTorque
		End Function
		
		Public Function LastDayCompensatorOutputTorqueLoc(Axis As Integer,LastDay As Integer) As Double
			Dim me_CompensatorOutputTorqueLoc As Double = 0
			Dim MaxCompensatorOutputTorqueDate As DefIndexFor
			MaxCompensatorOutputTorqueDate = LastDayCompensatorOutputTorqueDate(Axis, LastDay)
			me_CompensatorOutputTorqueLoc = CompensatorOutputTorqueLoc(MaxCompensatorOutputTorqueDate.month, MaxCompensatorOutputTorqueDate.Day, Axis)
			Return me_CompensatorOutputTorqueLoc
		End Function
		
		Public Function LastDayCompensatorOutputTorqueDate(Axis As Integer,LastDay As Integer) As DefIndexFor
			Dim me_CompensatorOutputTorque As Double = 0
			Dim DayCount As Integer
			Dim MonthCount As Integer
			Dim Indexadress As Integer
			Dim MaxCompensatorOutputTorqueDate As New DefIndexFor
			MaxCompensatorOutputTorqueDate.month = CurrentDate(0)
			MaxCompensatorOutputTorqueDate.Day = CurrentDate(1)
			For DayCount = 0 To LastDay-1
				Indexadress = Me.DayCount-DayCount-1
				If Indexadress>=0 Then
					If me_CompensatorOutputTorque < TheMoniterValue(IndexForDayCount(Indexadress).Month-1,IndexForDayCount(Indexadress).Day-1,Axis-1).CompensatorOutputTorque Then
						me_CompensatorOutputTorque = TheMoniterValue(IndexForDayCount(Indexadress).Month-1,IndexForDayCount(Indexadress).Day-1,Axis-1).CompensatorOutputTorque
						MaxCompensatorOutputTorqueDate.month = IndexForDayCount(Indexadress).Month
						MaxCompensatorOutputTorqueDate.Day = IndexForDayCount(Indexadress).Day
					End If
				End If
			Next
			Return MaxCompensatorOutputTorqueDate
		End Function
		
		Private Sub clearMonthTrackingError(month As Integer,Axis As Integer)
			Dim DayCount As Integer
			For DayCount = 0 To 30
				TheMoniterValue(month-1,DayCount,Axis-1).TrackingError = 0
			Next
		End Sub
		
		Private Sub clearMonthDutyPerRMSTorque(month As Integer,Axis As Integer)
			Dim DayCount As Integer
			For DayCount = 0 To 30
				TheMoniterValue(month-1,DayCount,Axis-1).DutyPerRMSTorque = 0
			Next
		End Sub
		
		Private Sub clearMonthCompensatorOutputTorque(month As Integer,Axis As Integer)
			Dim DayCount As Integer
			For DayCount = 0 To 30
				TheMoniterValue(month-1,DayCount,Axis-1).CompensatorOutputTorque = 0
			Next
		End Sub
		
		Private Function DutyTransPerRMSTorque(DutyPerLimit As Double, AxisNumber As Integer) As Double
			Dim dutyCycleLimit As Double = Controller.PDbNum(PDB_DUTY_CYCLE_LIMIT,,,AxisNumber)
			Return Math.Sqrt(DutyPerLimit)*10*dutyCycleLimit/100
		End Function
		
		Private Function percentTorque(rawTorque As Double, AxisNumber As Integer) As Double
			Dim rmsRatedTorque As Double = Controller.PDbNum(PDB_RMS_RATED_TORQUE,,,AxisNumber)
			Return rawTorque/rmsRatedTorque*100
		End Function
		
		Public Function realTimeReadMotorState(PdbNumber As Integer, axis As Integer) As Double
			Dim Value As Double
			Value = Controller.PDbNum(PdbNumber,,,axis)
			If PdbNumber = PDB_COMPENSATOR_OUTPUT_TORQUE Then
				Value = percentTorque(Value,axis)
			ElseIf PdbNumber = PDB_DUTY_PER_LIMIT Then
				Value = DutyTransPerRMSTorque(Value,axis)
			End If
			
			Return Value
		End Function
		
		Private Sub UpdateCurrentDate()
			Dim TempTime(3) As String
			Dim tempDate(3) As String
			tempDate(0) = Controller.PDB(PDB_DATE_AND_TIME)
			TempTime = tempDate(0).Split(" ")
			CurrentDate = TempTime(0).Split("-")
			CurrentTime = TempTime(1).Split(":")
		End Sub
		
		Public Sub StateMonitorSub()
			Console.WriteLine("State Monitoring Start: "&Controller.PDB(PDB_DATE_AND_TIME))
			Me.StartTime = Controller.PDB(PDB_DATE_AND_TIME)
			Static Dim ExCurrentTime() As String
			Dim ExCurrentMonth As String
			Dim ExCurrentDay As String
			Dim i As Integer
			Dim Timer As Double = Controller.Timer
			Dim TimeCheck As Double 
			If Selectedrobot <> 0 Then
				Robot.selected = Selectedrobot
			End If
			UpdateCurrentDate()
			ExCurrentMonth = CurrentDate(0)
			ExCurrentDay = CurrentDate(1)
			For AxisNumber = 1 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
				TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,AxisNumber-1).DayCount = Me.DayCount
			Next
			IndexForDayCount(Me.DayCount-1).Month = CInt(CurrentDate(0))
			IndexForDayCount(Me.DayCount-1).Day = CInt(CurrentDate(1))
			While Me.MonitoringFlag
				TimeCheck = Controller.Timer - Timer
				If TimeCheck > TimerInterval Then
					UpdateCurrentDate()
					'write Monitoring function
					If CurrentDate(1)<>ExCurrentDay Then
						StateMonitorMutex.lock
						Me.DayCount +=1
						If Me.DayCount > 366 Then Me.DayCount = 1
						For AxisNumber = 1 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
							TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,AxisNumber-1).DayCount = Me.DayCount
						Next
						IndexForDayCount(Me.DayCount-1).Month = CInt(CurrentDate(0))
						IndexForDayCount(Me.DayCount-1).Day = CInt(CurrentDate(1))
						StateMonitorMutex.unlock
					End If
					For AxisNumber = 1 To Controller.PDbNum(PDB_NUMBER_OF_AXIS)
						If CurrentDate(0)<>ExCurrentMonth Then
							StateMonitorMutex.lock
							clearMonthTrackingError(CInt(CurrentDate(0)),AxisNumber)
							clearMonthDutyPerRMSTorque(CInt(CurrentDate(0)),AxisNumber)
							clearMonthCompensatorOutputTorque(CInt(CurrentDate(0)),AxisNumber)
							StateMonitorMutex.unlock
						End If
						If TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,AxisNumber-1).TrackingError < Math.Abs(Controller.PDbNum(PDB_POSITION_TRACKING_ERROR,,,AxisNumber)) Then
							StateMonitorMutex.lock
							TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,AxisNumber-1).TrackingError = Math.Abs(Controller.PDbNum(PDB_POSITION_TRACKING_ERROR,,,AxisNumber))
							TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,AxisNumber-1).TrackingErrorLoc = Robot.whereangles.angle(AxisNumber)
							StateMonitorMutex.unlock
						End If
						If TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,AxisNumber-1).DutyPerRMSTorque < DutyTransPerRMSTorque(Controller.PDbNum(PDB_DUTY_PER_LIMIT,,,AxisNumber),AxisNumber) Then
							StateMonitorMutex.lock
							TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,AxisNumber-1).DutyPerRMSTorque = DutyTransPerRMSTorque(Controller.PDbNum(PDB_DUTY_PER_LIMIT,,,AxisNumber),AxisNumber)
							TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,AxisNumber-1).DutyPerRMSTorqueLoc = Robot.whereangles.angle(AxisNumber)
							StateMonitorMutex.unlock
						End If
						If TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,AxisNumber-1).CompensatorOutputTorque < Controller.PDbNum(PDB_COMPENSATOR_OUTPUT_TORQUE,,,AxisNumber) Then
							StateMonitorMutex.lock
							TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,AxisNumber-1).CompensatorOutputTorque = Controller.PDbNum(PDB_COMPENSATOR_OUTPUT_TORQUE,,,AxisNumber)
							TheMoniterValue(CInt(CurrentDate(0))-1,CInt(CurrentDate(1))-1,AxisNumber-1).CompensatorOutputTorqueLoc = Robot.whereangles.angle(AxisNumber)
							StateMonitorMutex.unlock
						End If
					Next
					'End write					
					ExCurrentMonth = CurrentDate(0)
					ExCurrentDay = CurrentDate(1)
					Timer = Controller.Timer
				ElseIf TimeCheck<0 Then
					Timer = Controller.Timer
				End If
				
				Thread.Sleep(CInt(MINIMUM_TIMER_INTERVAL*500))
			End While
		End Sub
		
		Public Sub New(TimerInterval As Double, RobotNumber As Integer)
			Selectedrobot = RobotNumber
			MyNew(TimerInterval,RobotNumber)
		End Sub
		
		Public Sub New(TimerInterval As Double)
			MyNew(TimerInterval,Robot.Selected)
		End Sub
		
		Public Sub MyNew(TimerInterval As Double, RobotNumber As Integer)
			Dim i As Integer
			Dim j As Integer
			Dim k As Integer
			If TimerInterval < MAXIMUM_TIMER_INTERVAL Then
				Me.TimerInterval = TimerInterval
			ElseIf TimerInterval < MINIMUM_TIMER_INTERVAL Then
				Me.TimerInterval = MINIMUM_TIMER_INTERVAL
			Else
				Me.TimerInterval = MAXIMUM_TIMER_INTERVAL
			End If
			For i = 0 To 365
				IndexForDayCount(i) = New DefIndexFor
			Next
			If RobotNumber < 1 Then
				RobotNumber = 1
			End If
			ReDim TheMoniterValue(11,30,Controller.PDbNum(PDB_NUMBER_OF_AXIS,RobotNumber)-1)
			For i= 0 To 11
				For j = 0 To 30
					For k = 0 To Controller.PDbNum(PDB_NUMBER_OF_AXIS,RobotNumber)-1
					TheMoniterValue(i,j,k) = New moniterValue
					Next
				Next
			Next
			UpdateCurrentDate()
		End Sub
    End Class
	
End Module
'Created: 8/6/2018 5:24:46 PM
Module SubUtilityModule
	
	Public Const ENCODER_ERROR_INDEX As Integer = 6
	Public Const ENCODER_WARNING_INDEX As Integer = 7
	Const ENCODER_PANASONIC_A4_ERROR_INDEX As Integer = 6
	Const ENCODER_PANASONIC_A4_WARNING_INDEX As Integer = 7
	
	Public Sub encoderErrorOnlyCheckThisRobot(axis As Integer)
		If CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,axis)) = 40 Or CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,axis)) = 44 Then 'If absolute
			Dim ignoreBatteryAlram As Integer = CInt(thePDBManager.getPDB(10251,axis))
			Dim alram As Integer = CInt(thePDBManager.getPDB(PDB_ENCODER_ALRAM,axis))
			Dim status As Integer = CInt(thePDBManager.getPDB(PDB_ENCODER_STATUS,axis))
			If (alram <> 0) Or (Not(status And &H04)) Then
				If (alram And &H80) And ignoreBatteryAlram = 0 And Not theSystem.IgnoreBatteryWarning Then
					ThrowSystemError(-3127,"Encoder battery low",Math.Pow(2,axis-1))
				End If
				If alram And &H40 And ignoreBatteryAlram = 0 Then
					ThrowSystemError(-3128,"Encoder battery down",Math.Pow(2,axis-1))
				End If
			End If
		End If
	End Sub
	
	Public Sub encoderErrorCheckAndClear()
		Dim i As Integer
		Dim axis As Integer
		Dim reboot As Boolean = False
		Dim ex As Exception
		Dim myEx As Exception
		Dim oldSelectedValue As Integer
		oldSelectedValue = Robot.Selected
		
		For i = 1 To robotCount
			Robot.Selected = i
			For axis = 1 To myRobot(i-1).axisCount
				Try
					If CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,axis)) = 40 Or CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,axis)) = 44 Then 'If absolute
						Dim alram As Integer = CInt(thePDBManager.getPDB(PDB_ENCODER_ALRAM,axis))
						Dim status As Integer = CInt(thePDBManager.getPDB(PDB_ENCODER_STATUS,axis))
						If (alram <> 0) Or (Not(status And &H04)) Then
							
							Try
								encoderErrorOnlyCheckThisRobot(axis)
							Catch myEx
								errorHandler.handleError(myEx)
							End Try
							
							thePDBManager.setPDB(PDB_ENCODER_AXIS_SELECT, axis)
							Thread.Sleep(100)
							
							'ENCODER RESET NEED ALWAY FIRST SELECT AXIS, AND JUST 14065 AND ROBOT 1 AND AXIS 1 CLEAR.
							'THEN SELECTED AXIS WILL BE RESET.
							Controller.PDBnum(14065, 1, 1, 1) = 1 '' IMPORTANT !!
							
							Thread.Sleep(100)
							reboot = True
							
						End If
					End If
				Catch ex
					MyConsole.WriteLine("Encoder reset error (" + CStr(i) + "-" + CStr(axis) + ") : " + ex.Message)
					ex = Nothing
				End Try
			Next axis
		Next i
		
		If reboot Then
			MyConsole.WriteLine("now reboot encoder...")
			Thread.Sleep(5000)
			MyConsole.WriteLine("encoder reboot complete...")
		End If
		
		Robot.Selected = oldSelectedValue
	End Sub
	
	Public Sub encoderPositionRead()
		encoderPositionRead(0)
	End Sub
	
	Public Sub encoderPositionRead(targetRobotIndex As Integer)
		Dim ex1 As Exception
		Dim ex2 As Exception
		Dim robotIndex As Integer
		Dim needReadNowPosition As Boolean
		Dim oldSelectedValue As Integer
		oldSelectedValue = Robot.Selected
		
		For robotIndex = 1 To robotCount
			If targetRobotIndex = 0 Or targetRobotIndex = robotIndex Then
				
				Robot.Selected = robotIndex
				If CInt(thePDBManager.getPDB(PDB_MOTOR_HOME_STATE)) = 0 Then
					needReadNowPosition = False
					For axis = 1 To myRobot(Robot.Selected-1).axisCount
						If CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,axis)) = 40 Or CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,axis)) = 44 Then 'If absolute
							needReadNowPosition = True
							Exit For
						End If
					Next axis
					
					If needReadNowPosition = True Then
						Try
							myRobot(Robot.Selected-1).autoAttach()
							
							Dim axis As Integer
							Dim oldValue(myRobot(Robot.Selected-1).axisCount) As Double
							Dim oldHomeOrder As Integer
							
							Try
								oldHomeOrder = thePDBManager.getPDB(PDB_HOMING_SEQUENCT)
								For axis = 1 To myRobot(Robot.Selected-1).axisCount
									oldValue(axis-1) = thePDBManager.getPDB(PDB_HOME_METHOD, axis)
								Next
					
								thePDBManager.setPDB(PDB_HOMING_SEQUENCT, 1)
								For axis = 1 To myRobot(Robot.Selected-1).axisCount
									thePDBManager.setPDB(PDB_HOME_METHOD, axis, 35)
								Next
								
								Robot.Home
							Catch ex2
								Throw ex2
							Finally
								thePDBManager.setPDB(PDB_HOMING_SEQUENCT, oldHomeOrder)
								For axis = 1 To myRobot(Robot.Selected-1).axisCount
									thePDBManager.setPDB(PDB_HOME_METHOD, axis, oldValue(axis-1))
								Next
							End Try
		
						Catch ex1
							Throw ex1
						Finally
							myRobot(Robot.Selected-1).autoDetach()
						End Try
					End If
				End If
				
			End If
		Next robotIndex
		
		Robot.Selected = oldSelectedValue
	End Sub
	
	Public Function AllEncoderBetteryState(Index As Integer) As String 
		Dim axisIndex As Integer
		Dim robotIndex As Integer
		Dim StateEncoderBetteryState As Integer = 0
		Dim oldSelectedValue As Integer
		Dim ignoreBatteryAlram As Boolean
		Dim ex As Exception
		Dim Result As String
		Result = Nothing
		oldSelectedValue = Robot.Selected
		Try
			For robotIndex = 1 To robotCount
				Robot.Selected = robotIndex
				For axisIndex = 1 To myRobot(Robot.Selected-1).axisCount
					ignoreBatteryAlram = CBool(thePDBManager.getPDB(10251,axisIndex))
					If SingleEncoderBatteryState(axisIndex,Index) And (Not ignoreBatteryAlram) Then 
						StateEncoderBetteryState += Math.Pow(2,axisIndex-1)
					End If
				Next
			Next
			Result = Hex(StateEncoderBetteryState)
		Catch ex
			Throw ex
		Finally
			Robot.Selected = oldSelectedValue
		End Try
		Return Result
	End Function
	
	Public Function SingleEncoderBatteryState(targetRobotIndex As Integer, targetAxis As Integer, StateIndex As Integer) As Boolean
		Dim ex As Exception
		Dim EncoderBatteryState As Boolean = False
		Dim oldSelectedValue As Integer
		oldSelectedValue = Robot.Selected
		Try
			Robot.Selected = targetRobotIndex
			EncoderBatteryState = SingleEncoderBatteryState(targetAxis, StateIndex)
		Catch ex
			Throw ex
		Finally
			Robot.Selected = oldSelectedValue
		End Try
		Return EncoderBatteryState
	End Function
	
	Public Function SingleEncoderBatteryState(targetAxis As Integer, StateIndex As Integer) As Boolean
		Dim EncoderBatteryState As Boolean = False
		Select Controller.PDbNum(10027, 1, 0, targetAxis)
			Case 40 Or 44
				EncoderBatteryState = CheckEncoderBetteryState_PanasonicA4ab(targetAxis,StateIndex)
		End Select
		Return EncoderBatteryState
	End Function
	
	Public Function CheckEncoderBetteryState_PanasonicA4ab(targetRobotIndex As Integer, targetAxis As Integer, StateIndex As Integer) As Boolean
		Dim ex As Exception
		Dim EncoderBatteryState As Boolean = False
		Dim oldSelectedValue As Integer
		Dim encAlarm As Integer
		oldSelectedValue = Robot.Selected
		Try
			Robot.Selected = targetRobotIndex
			EncoderBatteryState = CheckEncoderBetteryState_PanasonicA4ab(targetAxis, StateIndex)	
		Catch ex
			Throw ex
		Finally
			Robot.Selected = oldSelectedValue
		End Try
		Return EncoderBatteryState
	End Function
	
	Public Function CheckEncoderBetteryState_PanasonicA4ab(targetAxis As Integer, StateIndex As Integer) As Boolean
		Dim ex As Exception
		Dim encAlarm As Integer
		Dim EncoderBatteryState As Boolean = False
		encAlarm = CInt(thePDBManager.getPDB(PDB_ENCODER_ALRAM,targetAxis))
		If encAlarm And Math.Pow(2,StateIndex) Then EncoderBatteryState = True				
		Return EncoderBatteryState
	End Function 
End Module
'Created: 9/14/2013 2:33:15 PM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module ZPosErrDetectorModule
    Public Class ZPosErrDetector
	
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SHARED ''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Shared Public Sub ZPosErrDetectorThreadFunction()
			Dim robotIndex As Integer = Thread.CurrentThread.Argument
			Dim ex,ex2 As Exception
			Dim latchDataList() As LatchData
			Dim latchDataCount As Integer
			Dim correctPos_up() As Double
			Dim correctPos_down() As Double
			Dim nowZPosition As Double
			Dim upError As Double
			Dim downError As Double
			Dim zIndex As Integer
			Dim signalIndex As Integer
			Dim i As Integer
			Dim ErrorFlag As Boolean = False
			Dim count As Integer = myRobot(robotIndex-1).theZPosErrDetector.signalCount
			
			ReDim correctPos_up(count)
			ReDim correctPos_down(count)
			For i = 1 To count
				correctPos_up(i-1) = theSystem.getValue(myRobot(robotIndex-1).theZPosErrDetector.itemName(i,True))
				correctPos_down(i-1) = theSystem.getValue(myRobot(robotIndex-1).theZPosErrDetector.itemName(i,False))
			Next i
			
			While True
				Try
					If theLatchManager.isBlocked() = True Then
						Exit Try
					End If
					latchDataCount = theLatchManager.popLatchDataList(latchDataList)
					For i = 0 To latchDataCount-1
						If myRobot(robotIndex-1).theZPosErrDetector.oneSensorForAllZAxis = True Then
							'all z and only 1 sensor
							If latchDataList(i).isOnOffData = False Or latchDataList(i).thick > 1 Then
								signalIndex = myRobot(robotIndex-1).theZPosErrDetector.signalIndex(latchDataList(i).signalIO)
								nowZPosition = latchDataList(i).zPosition()
								upError = correctPos_up(signalIndex-1) - nowZPosition
								downError = correctPos_down(signalIndex-1) - nowZPosition
								If Math.Abs(upError) < theSystem.zPositionErrorSize Or _
									Math.Abs(downError) < theSystem.zPositionErrorSize Then
									MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Correct ZPos " + CStr(nowZPosition) + " (upErr=" + CStr(upError) + " , downErr=" + CStr(downError) + ")")
								Else
									MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : ZPosErrDetector ERROR " + CStr(nowZPosition) + " (upErr=" + CStr(upError) + " , downErr=" + CStr(downError) + ")")
									throwError(Z_POSITION_ERR_DETECTED)
								End If
							End If
						Else
							If latchDataList(i).isOnOffData = False Or latchDataList(i).thick > 1 Then
								signalIndex = myRobot(robotIndex-1).theZPosErrDetector.signalIndex(latchDataList(i).signalIO)
								zIndex = myRobot(robotIndex-1).theZPosErrDetector.signalIOtoZIndex(latchDataList(i).signalIO)
								nowZPosition = latchDataList(i).zPosition(zIndex)
								upError = correctPos_up(signalIndex-1) - nowZPosition
								downError = correctPos_down(signalIndex-1) - nowZPosition
								If Math.Abs(upError) < theSystem.zPositionErrorSize Or _
									Math.Abs(downError) < theSystem.zPositionErrorSize Then
									MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Correct ZPos " + CStr(nowZPosition) + " (upErr=" + CStr(upError) + " , downErr=" + CStr(downError) + ")")
								Else
									MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : ZPosErrDetector ERROR " + CStr(nowZPosition) + " (upErr=" + CStr(upError) + " , downErr=" + CStr(downError) + ")")
									throwError(Z_POSITION_ERR_DETECTED)
								End If
							End If
						End If
					Next i
				Catch ex
					ErrorFlag = True
				End Try
				If ErrorFlag Then
					ErrorFlag = False
					Try
						If GetErrorCode(ex) = Z_POSITION_ERR_DETECTED Then
							theJogManager.jogStop()
							myRobot(robotIndex-1).stopMotion()
						End If
					Catch ex2
						ex2 = Nothing
					End Try
					errorHandler.handleError(ex)
					ex = Nothing
				End If
				Thread.Sleep(300)
			End While
		End Sub
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim m_robotIndex As Integer
		Private Dim ZPosErrDetectorThread As Thread = New Thread("ZPosErrDetector.ZPosErrDetectorThreadFunction",,"ZPosErrDetectorThreadFunction")
				
		Private Dim m_oneSensorForAllZAxis As Boolean = False
		Public Property oneSensorForAllZAxis As Boolean
			Get
				Return m_oneSensorForAllZAxis
			End Get
			Set (value As Boolean)
				m_oneSensorForAllZAxis = value
			End Set
		End Property
		
		Private Dim signalIO() As Integer
		Private Dim signalMatchZIndex() As Integer
		Public ReadOnly Property signalCount As Integer
			Get
				Return signalIO.getUpperBound(0)
			End Get
		End Property
		
		Private Sub latchStart()
			Dim signalIOCount As Integer = 0
			Dim tempSignalIO(signalIO.getUpperBound(0)) As Integer
			Dim i As Integer
			For i = 0 To signalIO.getUpperBound(0) - 1
				If signalIO(i) <> 0 Then
					tempSignalIO(signalIOCount) = signalIO(i)
					signalIOCount = signalIOCount + 1
				End If
			Next i
			
			If signalIOCount = 1 Then
				theLatchManager.latchStart(tempSignalIO(0))
			ElseIf signalIOCount = 2 Then
				theLatchManager.latchStart(tempSignalIO(0),tempSignalIO(1))
			ElseIf signalIOCount = 3 Then
				theLatchManager.latchStart(tempSignalIO(0),tempSignalIO(1),tempSignalIO(2))
			ElseIf signalIOCount = 4 Then
				theLatchManager.latchStart(tempSignalIO(0),tempSignalIO(1),tempSignalIO(2),tempSignalIO(3))
			Else
				Exit Sub
			End If
		End Sub
		
		Private Sub latchStop()
			theLatchManager.latchStop()
		End Sub
		
		Private Function signalIndex(io As Integer) As Integer
			Dim i As Integer
			For i = 1 To signalIO.getUpperBound(0)
				If signalIO(i-1) = io Then
					Return i
				End If
			Next i
			Return -1
		End Function
		
		Private Function signalIOtoZIndex(io As Integer) As Integer
			Dim i As Integer = signalIndex(io)
			If i <> -1 Then
				Return signalMatchZIndex(i-1)
			Else
				Return -1
			End If
		End Function
		
		Private Function itemName(index As Integer, up As Boolean) As String
			If up = True Then
				Return "Robot" + CStr(m_robotIndex) + "-Z" + CStr(index) + "-up"
			Else
				Return "Robot" + CStr(m_robotIndex) + "-Z" + CStr(index) + "-down"
			End If
		End Function
		
		Private Sub setCorrectZPos(signalIO As Integer, moveUpPos As Double, moveDownPos As Double)
			If signalIO = 0 Then
				Exit Sub
			End If
			Dim index As Integer = signalIndex(signalIO)
			theSystem.setValue(itemName(index,True),CStr(moveUpPos))
			theSystem.setValue(itemName(index,False),CStr(moveDownPos))
		End Sub
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(zSignal As String)
			Dim i As Integer
			Dim index As Integer = 0
			Dim strs1() As String
			strs1 = zSignal.Split(",")
			Dim count As Integer = strs1.Length
			ReDim signalIO(count)
			ReDim signalMatchZIndex(count)
			For i = 0 To strs1.Length - 1
				signalIO(index) = CInt(strs1(i))
				signalMatchZIndex(index) = 1
				index = index + 1
			Next i
		End Sub
		
		Public Sub New(z1Signal As String, z2Signal As String)
			Dim i As Integer
			Dim index As Integer = 0
			Dim strs1() As String
			strs1 = z1Signal.Split(",")
			Dim strs2() As String
			strs2 = z2Signal.Split(",")
			Dim count As Integer = strs1.Length + strs2.Length
			ReDim signalIO(count)
			ReDim signalMatchZIndex(count)
			For i = 0 To strs1.Length - 1
				signalIO(index) = CInt(strs1(i))
				signalMatchZIndex(index) = 1
				index = index + 1
			Next i
			For i = 0 To strs2.Length - 1
				signalIO(index) = CInt(strs2(i))
				signalMatchZIndex(index) = 2
				index = index + 1
			Next i
		End Sub
		
		Public Sub New(zSignal As Integer)
			ReDim signalIO(1)
			signalIO(0) = zSignal
			ReDim signalMatchZIndex(1)
			signalMatchZIndex(0) = 1
		End Sub
		
		Public Sub New(z1Signal As Integer, z2Signal As Integer)
			ReDim signalIO(2)
			signalIO(0) = z1Signal
			signalIO(1) = z2Signal
			ReDim signalMatchZIndex(2)
			signalMatchZIndex(0) = 1
			signalMatchZIndex(1) = 2
		End Sub
		
		Public Sub New(z1Signal As Integer, z2Signal As Integer, z3Signal As Integer)
			ReDim signalIO(3)
			signalIO(0) = z1Signal
			signalIO(1) = z2Signal
			signalIO(2) = z3Signal
			ReDim signalMatchZIndex(3)
			signalMatchZIndex(0) = 1
			signalMatchZIndex(1) = 2
			signalMatchZIndex(2) = 3
		End Sub
		
		Public Sub New(z1Signal As Integer, z2Signal As Integer, z3Signal As Integer, z4Signal As Integer)
			ReDim signalIO(4)
			signalIO(0) = z1Signal
			signalIO(1) = z2Signal
			signalIO(2) = z3Signal
			signalIO(3) = z4Signal
			ReDim signalMatchZIndex(4)
			signalMatchZIndex(0) = 1
			signalMatchZIndex(1) = 2
			signalMatchZIndex(2) = 3
			signalMatchZIndex(3) = 4
		End Sub
		
		Public Sub setRobot(targetRobot As RNDRobot)
			m_robotIndex = targetRobot.robotIndex
		End Sub
		
		Public Function sensorResult() As Boolean
			Dim i As Integer
			Dim result As Boolean = False
			For i = 1 To signalIO.getUpperBound(0)
				If signalIO(i-1) <> 0 Then
					result = result Or robotIO.getDIO(signalIO(i-1))
				End If
			Next i
			Return result
		End Function
		
		Public Sub checkStart()
			If ZPosErrDetectorThread.ThreadState <> -1 Then
				checkStop()
			End If
			latchStart()	
			ZPosErrDetectorThread.Argument = m_robotIndex
			ZPosErrDetectorThread.Start
		End Sub
		
		Public Sub checkStop()
			ZPosErrDetectorThread.Abort
			latchStop()
		End Sub
		
		Public Sub callibration(repeatCount As Integer)
			checkStop()
			myRobot(m_robotIndex-1).moveToHome()
			
			Dim zCount As Integer = myRobot(m_robotIndex-1).zAxisCount
			Dim detectedZPos_moveUp(signalIO.getUpperBound(0)) As Double
			Dim detectedZPos_moveDown(signalIO.getUpperBound(0)) As Double
			Dim detectedZCount_moveUp(signalIO.getUpperBound(0)) As Double
			Dim detectedZCount_moveDown(signalIO.getUpperBound(0)) As Double
			Dim latchDataList() As LatchData
			Dim latchDataCount As Integer
			
			Dim curPos As LocationEx = LocationEx.getCurJointPos()
			For i = 1 To zCount
				curPos.loc.Angle(myRobot(m_robotIndex-1).zIndexToAxis(i)) = CDbl(thePDBManager.getPDB(PDB_MIN_SOFT_LIMIT,myRobot(m_robotIndex-1).zIndexToAxis(i)))
			Next i
			theMoveEx.loc(curPos,myRobot(m_robotIndex-1).theProfileManager.getProfile(COORD_JOINT,True))
			theMoveEx.WaitForEOM
			
			latchStart()
			
			Dim i As Integer
			Dim j As Integer
			Dim index As Integer
			Dim tryCount As Integer
			For tryCount = 1 To repeatCount
				For i = 1 To zCount
					curPos.loc.Angle(myRobot(m_robotIndex-1).zIndexToAxis(i)) = CDbl(thePDBManager.getPDB(PDB_MAX_SOFT_LIMIT,myRobot(m_robotIndex-1).zIndexToAxis(i)))
				Next i
				theMoveEx.loc(curPos,myRobot(m_robotIndex-1).theProfileManager.getProfile(COORD_JOINT,True))
				theMoveEx.WaitForEOM

				latchDataCount = theLatchManager.popLatchDataList(latchDataList)

				If latchDataCount = 0 Then
					ThrowError(ERR_NO_LATCH_DATA)
				End If
				For i = 0 To latchDataCount-1
					index = signalIndex(latchDataList(i).signalIO)
					If oneSensorForAllZAxis = True Then
						detectedZPos_moveUp(index-1) = detectedZPos_moveUp(index-1) + latchDataList(i).zPosition()
					Else
						detectedZPos_moveUp(index-1) = detectedZPos_moveUp(index-1) + latchDataList(i).zPosition(signalMatchZIndex(index-1))
					End If
					detectedZCount_moveUp(index-1) = detectedZCount_moveUp(index-1) + 1
				Next i
				
				For i = 1 To zCount
					curPos.loc.Angle(myRobot(m_robotIndex-1).zIndexToAxis(i)) = CDbl(thePDBManager.getPDB(PDB_MIN_SOFT_LIMIT,myRobot(m_robotIndex-1).zIndexToAxis(i)))
				Next i
				theMoveEx.loc(curPos,myRobot(m_robotIndex-1).theProfileManager.getProfile(COORD_JOINT,True))
				theMoveEx.WaitForEOM
				
				latchDataCount = theLatchManager.popLatchDataList(latchDataList)

				If latchDataCount = 0 Then
					ThrowError(ERR_NO_LATCH_DATA)
				End If
				For i = 0 To latchDataCount-1
					index = signalIndex(latchDataList(i).signalIO)					
					If oneSensorForAllZAxis = True Then
						detectedZPos_moveDown(index-1) = detectedZPos_moveDown(index-1) + latchDataList(i).zPosition()
					Else
						detectedZPos_moveDown(index-1) = detectedZPos_moveDown(index-1) + latchDataList(i).zPosition(signalMatchZIndex(index-1))
					End If
					detectedZCount_moveDown(index-1) = detectedZCount_moveDown(index-1) + 1
				Next i
			Next tryCount
			
			latchStop()
			
			For i = 0 To signalIO.getUpperBound(0)-1
				If signalIO(i) <> 0 Then
					If (detectedZCount_moveUp(i) <> repeatCount) Or (detectedZCount_moveDown(i) <> repeatCount) Then
						ThrowError(ERR_WRONG_LATCH_DATA)
					Else
						detectedZPos_moveUp(i) = detectedZPos_moveUp(i) / repeatCount
						detectedZPos_moveDown(i) = detectedZPos_moveDown(i) / repeatCount
						setCorrectZPos(signalIO(i),detectedZPos_moveUp(i),detectedZPos_moveDown(i))
					End If
				End If
			Next i

			If theSystem.useZPosErrorCheck = 1 Then
				checkStart()
			End If
		End Sub

		Public Sub save()
			theSystem.save()
		End Sub
		
	End Class

End Module
'Created: 5/16/2013 7:28:17 PM

Module CANTOPSIO
 
' Copyright (c) 2013 by Rnd, Inc.  All rights reserved.
' =======================================================================
' <summary>
' read cantops i/o board and wite internal i/o on PRC control panel
' 
' =======================================================================


' --------------------------------------------------------------------
'                    GLOBAL ENTRY POINT FOR PROJECT
'  stx = H02
'  etx = H03
'  Digital inputs are 24 point
'  Digital outputs are 12 point
' --------------------------------------------------------------------

	Public Class CantapsIOMap
	
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SHARED ''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Shared Public Dim Ts As Socket
		
		Shared Public Sub tsSendAndReceive(msg As String, ByRef reply As String)
			Dim ex As Exception
			Dim TCPRetryCount As Integer = 0
			Const Dim TCPMaxRetryCount As Integer = 10
			For TCPRetryCount = 0 To TCPMaxRetryCount-1
				Try
					ts.Send(msg)
					Thread.Sleep(4)	
					ts.Receive(reply, 256)
					Exit Sub
				Catch ex
					Thread.Sleep(10)
				End Try
			Next
			Throw ex
		End Sub
		
		Shared Public Sub TcpCantopsIOTread()			
			Dim ex As Exception
			Dim tryCnt As Integer =0
			Dim boardIndex As Integer = Thread.CurrentThread.Argument
			Dim COMMAND As String = "I"
			Dim CMD_LENTH1 As Integer = 0
			Dim CMD_LENTH2 As Integer = 0
			
			TRYCNT:
		  	Dim ep As New IPEndPoint(cantapsIO(boardIndex-1).cIPADDRESS, cantapsIO(boardIndex-1).cPORT)
		  	Dim tc As New TcpClient()
'		  	Dim ts As Socket
		  	Dim msg As String
		  	Dim reply As String
		  	Dim Data As String

			Try
			  	MyConsole.WriteLine("try(" + CStr(tryCnt+1) + ") To connect......" + cantapsIO(boardIndex-1).cIPADDRESS + ":" + cantapsIO(boardIndex-1).cPORT)
			  	ts = tc.Client
				ts.KeepAlive = True
				ts.ReceiveTimeout = 500
				ts.SendTimeout = 500
				ts.Connect(ep)	
		   		MyConsole.WriteLine("Cantops I/O board connected......" + cantapsIO(boardIndex-1).cIPADDRESS + ":" + cantapsIO(boardIndex-1).cPORT)
				cantapsIO(boardIndex-1).isConnected = True
				
				While True
					cantapsIO(boardIndex-1).loadPaDO()		
					If cantapsIO(boardIndex-1).utillStop = True Then			' utility function for change Port and Ip Adress
						If cantapsIO(boardIndex-1).curCompareStatus()= True Then	'write DO
							COMMAND = "O"
							CMD_LENTH2 = 0
							CMD_LENTH2 = 8
							Data=""
							cantapsIO(boardIndex-1).sortDO(Data)
							msg = cantapsIO(boardIndex-1).sendCmd(COMMAND,CMD_LENTH1,CMD_LENTH2) + Data
							tsSendAndReceive(cantapsIO(boardIndex-1).makeSendBock(msg),reply)			
						End If	
						COMMAND = "I"
						CMD_LENTH2 = 0
						msg = cantapsIO(boardIndex-1).sendCmd(COMMAND,CMD_LENTH1,CMD_LENTH2)
						tsSendAndReceive(cantapsIO(boardIndex-1).makeSendBock(msg),reply)					
					Else
						If cantapsIO(boardIndex-1).SpecialOrder <> 0 Then
							Try
								Select cantapsIO(boardIndex-1).SpecialOrder
								Case 1 						'change Ip
									tsSendAndReceive(cantapsIO(boardIndex-1).makeSendBock(cantapsIO(boardIndex-1).changeIP(cantapsIO(boardIndex-1).cIPADDRESS)),reply)
									MyConsole.WriteLine("chaged ip -> " & cantapsIO(boardIndex-1).cIPADDRESS)
									MyConsole.WriteLine("chaged ip Receive"&reply)
								Case 2 						'change port
									tsSendAndReceive(cantapsIO(boardIndex-1).makeSendBock(cantapsIO(boardIndex-1).changePort(cantapsIO(boardIndex-1).cPORT)),reply)
									MyConsole.WriteLine("chaged port -> " & cantapsIO(boardIndex-1).cPORT)	
									MyConsole.WriteLine("chaged port Receive"&reply)									
								End Select
							Finally
								cantapsIO(boardIndex-1).utillStop =  True
								cantapsIO(boardIndex-1).SpecialOrder = 0
							End Try
						End If
					End If
					If 0 <> cantapsIO(boardIndex-1).DecodeReply(reply) Then
						MyConsole.WriteLine("I/O read Error")
					End If
					trycnt = 0
					Thread.Sleep(5)
				End While
			
			Catch ex
				If tryCnt > 10 Then
					ex = errorHandler.makeUserException(IO_RECEIVE_ERROR)
				End If
				errorHandler.handleError(ex)
				
				ts.Close
				Console.WriteLine("I/O Board disconneted")
				cantapsIO(boardIndex-1).isConnected = False
				tryCnt = trycnt + 1
			
				Thread.Sleep(1000)

				ex = Nothing
			End Try	
			
			Goto TRYCNT		
	
		End Sub
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Dim cIPADDRESS As String = "192.168.0.11"
		Public Dim cPORT As String = "8000"
		Public Dim isConnected As Boolean = False
		
		Public DEFAULT_DI_START As Integer = 0
		Public DEFAULT_DO_START As Integer = 0
		
		Public Dim TcpCantopsIO As Thread
		Public Dim STX As String = ToBitString(2, Byte, True)
		Public Dim ETX As String = ToBitString(3, Byte, True)
		
		Public Const INPUTCNT As Integer = 32
		Public Const OUTPUTCNT As Integer = 32
		Public Dim curCantapsDI(INPUTCNT) As Boolean
		Public Dim curCantapsDO(OUTPUTCNT) As Boolean
		Public Dim cmdPaDI(32) As Boolean
		Public Dim cmdPaDO(32) As Boolean

		Public Const BOARDID As String = "P"
		
		Public Dim COMMAND_TYPE As String = "I"

										  
		'-----------------------------------------------------------
		' If you want change port or ip Then
		' utillStop -> False
		' cIPADDRESS -> write what you want change ip
		' specialOrder -> 1(Ip) 2(Port)
		' S/W run and return value first
		' rebooting
		'------------------------------------------------------------
		Public Dim utillStop As Boolean = True
		Public Dim SpecialOrder As Integer = 0
		
  
		Public Sub New(index As Integer, ip As String, port As String, _
		inputStartAddress As Integer, outputStartAddress As Integer)
			cIPADDRESS = ip
			cPORT = port
			DEFAULT_DI_START = inputStartAddress
			DEFAULT_DO_START = outputStartAddress
			TcpCantopsIO = New Thread("CantapsIOMap.TcpCantopsIOTread",,"CantopsIOTread" + CStr(index))
			TcpCantopsIO.Argument = index
		End Sub

		Public Function SplitIP(ByVal msg As String, ByVal delimiter As String, ByRef token() As String) As Integer
			Dim dlen As Integer
			dlen = delimiter.Length
			If (dlen = 0) Or (dlen > 1) Or (msg.Length = 0) Then
				Return token.length
			End If
		
			token = msg.split(delimiter)
			Return token.length
		
		End Function
	
		Public Function sendCmd(cmd As String, len1 As Integer, len2 As Integer)As String
			Dim res As String
			res = BOARDID + COMMAND_TYPE + cmd + CStr(len1) + CStr(len2)
			Return res
		End Function
		
		Public Function makeSendBock(msg As String)As String
			Dim temStr As String
				temstr= STX + msg + ETX			'H02+data+H03
			Return temStr
		End Function
			
		Public Function readDICantaps(raw As Integer, input As Integer) As Boolean
			Dim ii As Integer
			Dim sort As Integer
			Dim Result As Boolean = True
			sort = 4 * raw
			'1 charter explain 4port
			'If input 4 that bit count are 0,1,0,0
			'so 3port is 0 other is 0
			'0~3
			
			For ii = 0 To 3		
				If sort+3 < INPUTCNT Then
					If (input And Math.Pow(2,ii)) Then
						curCantapsDI(ii+sort) = 1
						Signal.DIO(DEFAULT_DI_START+ ii+sort) = 1
					Else
						curCantapsDI(ii+sort) = 0
						Signal.DIO(DEFAULT_DI_START+ ii+sort) = 0
					End If
				Else
					Result = False
				End If
			Next
			Return Result
		End Function
	
		Public Sub showDi()
			Dim i As Integer
			For i = 0 To INPUTCNT-1
			MyConsole.WriteLine("i" &CStr(i) + ": " &CStr(curCantapsDI(i)))
			Next
		End Sub
		
		Public Function readDOCantaps(raw As Integer, input As Integer) As Boolean
			Dim ii As Integer
			Dim sort As Integer
			Dim Result As Boolean = True
			sort = 4 * raw
			
			For ii = 0 To 3	
				If sort+3 < OUTPUTCNT Then
					If (input And Math.Pow(2,ii)) Then
						curCantapsDO(ii+sort) = 1
					Else
						curCantapsDO(ii+sort) = 0
					End If
				Else
					Result = False
				End If
			Next	
			Return Result
		End Function	
		
		Public Sub loadPaDI()
			Dim i As Integer
			For i = 0 To INPUTCNT-1
				cmdPaDI(i) = Signal.DIO(DEFAULT_DI_START+i)
				'MyConsole.WriteLine("DI " &CStr(i) + ": " &CStr(cmdcurCantapsDI(i)))
			Next		
		End Sub
		
		Public Sub loadPaDO()
			Dim i As Integer
			For i = 0 To OUTPUTCNT-1
				cmdPaDO(i) = Signal.DIO(DEFAULT_DO_START+i)
				'MyConsole.WriteLine("DO " &CStr(i) + ": " &CStr(cmdcurCantapslDO(i)))
			Next
		End Sub
		
		Public Function curCompareStatus()As Boolean
			Dim i As Integer
			
			For i = 0 To OUTPUTCNT-1
				If cmdPaDO(i) <> curCantapsDO(i) Then
					Return True
				End If
			Next
		
			Return False
		End Function
		
		Public Function cDataInt(raw As Integer, data() As Boolean) As Integer 
			Dim ii As Integer
			Dim sort As Integer
			Dim totalValue As Integer
			sort = 4 * raw
			For ii = 3 To 0 Step -1
				If data(ii+sort) = True Then
					totalValue  = totalValue * 2 + 1
				Else
					totalValue  = totalValue * 2 + 0
				End If
			Next	
			Return totalValue
		End Function
	
		Public Sub sortDO(ByRef Data As String)
			Dim array1 As String
			Dim array2 As String
			Dim array3 As String
			Dim array4 As String
			Dim array5 As String
			Dim array6 As String
			Dim array7 As String
			Dim array8 As String
			
			array1 = Hex(cDataInt(0, cmdPaDO))
			array2 = Hex(cDataInt(1, cmdPaDO))
			array3 = Hex(cDataInt(2, cmdPaDO))
			array4 = Hex(cDataInt(3, cmdPaDO))
			array5 = Hex(cDataInt(4, cmdPaDO))
			array6 = Hex(cDataInt(5, cmdPaDO))
			array7 = Hex(cDataInt(6, cmdPaDO))
			array8 = Hex(cDataInt(7, cmdPaDO))
			
	'		MyConsole.WriteLine("arrary1 : " &array1)
	'		MyConsole.WriteLine("arrary2 : " &array2)
	'		MyConsole.WriteLine("arrary3 : " &array3)
	'		MyConsole.WriteLine("arrary4 : " &array4)
	'		MyConsole.WriteLine("arrary5 : " &array5)
	'		MyConsole.WriteLine("arrary6 : " &array6)
	'		MyConsole.WriteLine("arrary7 : " &array7)
	'		MyConsole.WriteLine("arrary8 : " &array8)
	
			Data = array8 + array7 + array6 + array5 + array4 + array3 + array2 + array1
		End Sub
	
		Public Function DecodeReply(msg As String) As Integer
			Dim replyString As String
			Dim haeder As String
			Dim errorCheck As Integer
			
			Dim DIcnt As Integer
			Dim Docnt As Integer
			Dim bodystr As String
			Dim tailstr As String
			
			Dim slotcnt As Integer
			
			replyString = TrimReply(msg)		
			haeder = replyString.Substring(0,3)
			errorCheck = CInt(replyString.Substring(0,4))
			
			Select haeder		
				Case "pii"
					If  replyString.Substring(3,1) = "0" Then
						slotcnt = CInt(replyString.Substring(4,2))
						 
	                    DIcnt = slotcnt/2
						Docnt = slotcnt/2
						bodystr= replyString.Substring(6,DIcnt)
						tailstr = replyString.Substring(DIcnt+6,replyString.Length-1)
	  
						If Not DecoderDI(bodystr) Then
							MyConsole.WriteLine("data Length Error DI")
						End If
						If Not DecoderDo(tailstr) Then
							MyConsole.WriteLine("data Length Error DO")
						End If
					
					Else
						MyConsole.WriteLine("read Cantops i/o error")
					End If
				
				Case "pio"
					MyConsole.WriteLine("replyString : " &replyString)				
			End Select
			
			Return errorCheck
		End Function
		
		Public Function DecoderDI(data As String) As Boolean
			Dim i As Integer
			Dim cnt As Integer
			Dim Result As Boolean = True
			For i = data.Length-1 To 0 Step -1
				cnt = data.Length-1 - i 
				Result = Result And readDICantaps(cnt,CInt("&H"+data.substring(i,1)))
			Next
			Return True
				
		End Function
		
		Public Function DecoderDo(data As String) As Boolean
			Dim i As Integer
			Dim cnt As Integer
			Dim Result As Boolean = True
			For i = data.Length-1 To 0 Step -1
				cnt = data.Length-1 - i 
				Result = Result And readDOCantaps(cnt,CInt("&H"+data.substring(i,1)))
			Next
			Return True			
				   
		End Function
								
		Public Function TrimReply(msg As String) As String	
			Dim lchar As String	
		
			If msg.Length = 0 Then
				Return ""
			End If	
			lchar = msg.Substring(1, msg.Length-2)
			Return lchar	
		End Function

		Public Function changeIP(ip As String) As String
			Dim IpAdressPos(4) As String
			Dim msg As String
			Dim haeder As String
			Dim temp As String
			Dim i As Integer
			
			SplitIP(ip,".",IpAdressPos)
			
			For i = 0 To 3 			
				If hex(IpAdressPos(i)) = "0" Then
					temp ="00"
				Else
					temp = hex(IpAdressPos(i))
					If temp.Length = 1 Then
						temp = "0"+temp
					End If
				End If
				msg = msg + temp
			Next
	
			If msg.Length+2 >= 10 Then
				haeder = "PPS"
			Else
				haeder = "PPS0"
			End If
			msg = haeder + CStr(msg.Length+2)+ "01" + msg
			MyConsole.WriteLine("msg = " & msg)
			Return msg
		End Function
		
		Public Function changePort(port As String)As String
			Dim msg As String
			msg = "PPS0604" + port
			Return msg
		End Function

		Public Sub TcpCantopsIOTreadStart()
			If TcpCantopsIO.ThreadState <> -1 Then
				TcpCantopsIOTreadStop()
			End If
			TcpCantopsIO.Start
		End Sub
		
		Public Sub TcpCantopsIOTreadErrorReset()
			If Not(TcpCantopsIO.ThreadState = 1 Or TcpCantopsIO.ThreadState = 2) Then
				If TcpCantopsIO.ThreadState <> -1 Then
					TcpCantopsIOTreadStop()
				End If
				TcpCantopsIO.Start
			End If
		End Sub
		
		Public Sub TcpCantopsIOTreadStop()
			TcpCantopsIO.Abort
		End Sub
	End Class
End Module
'Created: 5/18/2012 3:56:49 PM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module IOTransMap

	Public Class DynaxIOMap
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim ioMap As New VirtualIOMap
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub setDOBit(ch As Integer, bit As Integer, flag As Boolean)
			ioMap.setDOBit((ch-1)*8+bit,flag)
		End Sub
		
		Public Sub setDORaw(str As String)
			Dim pos1, pos2 As Integer
			Dim ch, bit As Integer
			Dim flag As Boolean
			
			pos1 = str.IndexOf("-")
			If pos1 = -1 Then
				ThrowError(ERR_INVALID_ARGUMENT)
			End If
			
			ch = CInt(str.Substring(0, pos1))
	
			pos2 = str.IndexOf(":")
			If pos2 = -1 Then
				ThrowError(ERR_INVALID_ARGUMENT)
			End If
			
			bit = CInt(str.Substring(pos1+1, pos2-pos1+1))
			
			Select str.SubString(pos2+1)
			Case "+"
				flag = True
			Case "-"
				flag = False
			Case Else
				ThrowError(ERR_INVALID_ARGUMENT)
			End Select
			
			setDOBit(ch, bit, flag)
		End Sub
		
		Public Function getDI(addr As Integer) As Boolean
			ioMap.loadvirtualDI()
			Return ioMap.vDI(addr)
		End Function
		
		Public Function getDI_Chanel(ch As Integer) As Integer
			Return getDICount((ch-1)*8, 8)
		End Function
		
		Public Function getDICount(addr As Integer, count As Integer) As Integer
			Dim res As Integer = 0
			Dim ex As Exception
			Dim i As Integer
			
			ioMap.loadvirtualDI()
			Try
				For i = count-1 To 0 Step -1
					If ioMap.vDI(addr + i) = True Then
						res = res * 2 + 1
					Else
						res = res * 2
					End If
				Next i
			Catch ex
			End Try
			
			Return res
		End Function
		
		Public Function getDO(addr As Integer) As Boolean
			ioMap.loadvirtualDO()
			Return ioMap.vDO(addr)
		End Function
		
		Public Function getDO_Chanel(ch As Integer) As Integer
			Return getDOCount((ch-1)*8, 8)
		End Function
		
		Public Function getDOCount(addr As Integer, count As Integer) As Integer
			Dim res As Integer = 0
			Dim ex As Exception
			Dim i As Integer
			
			ioMap.loadvirtualDO()
			Try
				For i = count-1 To 0 Step -1
					If ioMap.vDO(addr + i) = True Then
						res = res * 2 + 1
					Else
						res = res * 2
					End If
				Next i
			Catch ex
			End Try
			
			Return res
		End Function

	End Class
	
End Module
'Created: 9/8/2011 9:23:20 PM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module IOModule
	
	Public Class RobotIOMap
	
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SHARED ''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Shared Public Const MAX_RESERVATION_DIO_COUNT As Integer = 20
		Shared Public Dim reservationDIO_count As Integer = 0
		Shared Public Dim reservationDIO_addr(MAX_RESERVATION_DIO_COUNT) As Integer
		Shared Public Dim reservationDIO_remainTime_ms(MAX_RESERVATION_DIO_COUNT) As Double
		Shared Public Dim reservationDIO_flag(MAX_RESERVATION_DIO_COUNT) As Boolean
		Shared Public Dim reservationDIO_mutex As New Mutex
		
		Shared Public Sub CancelReservationDIO(addr As Integer)
			Dim ex As Exception
			Dim i As Integer
			Dim j As Integer
			Try
				reservationDIO_mutex.lock()
				If reservationDIO_count > 0 Then 
					For i = 0 To reservationDIO_count-1
						If (reservationDIO_addr(i) = addr) Then
							If i <> MAX_RESERVATION_DIO_COUNT-1 Then
								For j = i To reservationDIO_count-2
									reservationDIO_addr(j) = reservationDIO_addr(j+1)
									reservationDIO_remainTime_ms(j) = reservationDIO_remainTime_ms(i+1)
									reservationDIO_flag(j) = reservationDIO_flag(j+1)
								Next j
							End If
							reservationDIO_count-=1	
						End If
					Next i
				End If
			Catch ex
				Throw ex
			Finally
				reservationDIO_mutex.unLock()
			End Try
		End Sub
		
		Shared Public Sub reservationDIO(addr As Integer, time_ms As Double, flag As Boolean)
			Dim ex As Exception
			
			Try
				reservationDIO_mutex.lock()
				If reservationDIO_count < MAX_RESERVATION_DIO_COUNT Then
					reservationDIO_addr(reservationDIO_count) = addr
					reservationDIO_remainTime_ms(reservationDIO_count) = time_ms
					reservationDIO_flag(reservationDIO_count) = flag
					reservationDIO_count = reservationDIO_count + 1
				End If
			Catch ex
				Throw ex
			Finally
				reservationDIO_mutex.unLock()
			End Try
		End Sub
		
		Shared Public Sub processReservationIO(elapsedTime_ms As Double)
			Dim i As Integer
			Dim j As Integer
			Dim ex As Exception
			
			If reservationDIO_count <= 0 Then
				Exit Sub
			End If
			
			Try
				reservationDIO_mutex.lock()
				i = 0
				While (i < reservationDIO_count)
					reservationDIO_remainTime_ms(i) = reservationDIO_remainTime_ms(i) - elapsedTime_ms
					If reservationDIO_remainTime_ms(i) <= 0 Then
						robotIO.setDIO(reservationDIO_addr(i),reservationDIO_flag(i))
						For j = i To reservationDIO_count-2
							reservationDIO_addr(j) = reservationDIO_addr(j+1)
							reservationDIO_remainTime_ms(j) = reservationDIO_remainTime_ms(j+1)
							reservationDIO_flag(j) = reservationDIO_flag(j+1)
						Next j
						reservationDIO_count = reservationDIO_count - 1
					Else
						i = i + 1
					End If
				End While
			Catch ex
				Throw ex
			Finally
				reservationDIO_mutex.unLock()
			End Try
		End Sub
		
		Shared Public Sub IOMonitorThreadFunction()
			Dim ex As Exception
			Dim timer As New TimeStamp
			Dim i As Integer
			
			While True
				Try
					Thread.Sleep(20)
					
					processReservationIO(timer.elapsedTime())
					timer.startTimer()
					
					For i = 1 To robotCount
						Robot.Selected = i
						If robotIO.assSensorIO <> 0 Then
							If (robotIO.assSensorIO > 0 And Signal.DIO(robotIO.assSensorIO) = True) Or _
							(robotIO.assSensorIO < 0 And Signal.DIO(-1*robotIO.assSensorIO) = False) Then
								MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : SENSOR STOP EVENT (ROBOT:" + CStr(Robot.Selected) + ", SENSOR:" + CStr(robotIO.assSensorIO) + ")")
								theJogManager.jogStop()
								myRobot(Robot.Selected-1).stopMotion()
								robotIO.assSensorIO = 0
							End If
						End If
						
						If robotIO.rapidDecelSensorIO <> 0 Then
							If (robotIO.rapidDecelSensorIO > 0 And Signal.DIO(robotIO.rapidDecelSensorIO) = True) Or _
							(robotIO.rapidDecelSensorIO < 0 And Signal.DIO(-1*robotIO.rapidDecelSensorIO) = False) Then
								MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : SENSOR RAPIDDECEL EVENT (ROBOT:" + CStr(Robot.Selected) + ", SENSOR:" + CStr(robotIO.rapidDecelSensorIO) + ")")
								Robot.RapidDecel(Robot.Selected)
								robotIO.rapidDecelSensorIO = 0
							End If
						End If
					Next i
					
					
					If thesystem.useAutoManualSpeed = True Then
						If Signal.DIO(SYS_DI_AUTO_MANUAL_SW) = True Then
							If (thePDBManager.getPDB(PDB_SYSTEM_SPEED,1)) <> (ProfileManager.systemManualSpeed) Then
								thePDBManager.setPDB(PDB_SYSTEM_SPEED,ProfileManager.systemManualSpeed)
							End If 
						Else
							If (thePDBManager.getPDB(PDB_SYSTEM_SPEED,1)) <> (ProfileManager.systemSpeed) Then
								thePDBManager.SetPDB(PDB_SYSTEM_SPEED,ProfileManager.systemSpeed)
							End If
						End If
					End If 
							
					RobotIOUpdate()

				Catch ex
					errorHandler.handleError(ex)
					ex = Nothing
				End Try
			End While
		End Sub
	
		Shared Public Sub CrashDetectCheckThreadFunction()
			Dim ex As Exception
			Dim r,a As Integer
			Dim arm As RobotArm
			Dim flag As Boolean
			
			While True
				Try
					Thread.Sleep(10)
					
					If theSystem.crashDetectUse <> 0 Then
						For r = 1 To robotCount
							For a = 1 To myRobot(r-1).armCount
								arm = myRobot(r-1).arm(a-1)
								If arm.isCrashDetectedState = True Then
									arm.crashDetectSensorOnOff(False)
									throwError(ERR_INTERLOCK)
								End If
							Next a
						Next r
					End If
					
					For r = 1 To robotCount
						For a = 1 To myRobot(r-1).armCount
							arm = myRobot(r-1).arm(a-1)
							If arm.isRealtimeSlipCheckState = True Then
								arm.realtimeSlipCheckStarted = False
								throwError(ERR_WAFER_SLIP)
							End If
						Next a
					Next r
					
				Catch ex
					errorHandler.handleError(ex)
					
					If IsError(ex,ERR_INTERLOCK) = True Then
						theJogManager.jogStop()
						myRobot(r-1).stopMotion()
						myRobot(r-1).servoEnable(False)
					End If
					
					If IsError(ex,ERR_WAFER_SLIP) = True Then
						myRobot(r-1).stopMotion()
					End If
					
					ex = Nothing
				End Try
			End While
		End Sub
	
	
	
	
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private IOMonitorThread As Thread
		Private CrashDetectCheckThread As Thread
		
		

		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim m_assSensorIO(MAX_ROBOT_COUNT) As Integer
		Public Property assSensorIO As Integer
			Set (value As Integer)
				m_assSensorIO(Robot.Selected-1) = value
				If value = 0 Then
					m_rapidDecelSensorIO(Robot.Selected-1) = 0
				End If
			End Set
			Get
				Return m_assSensorIO(Robot.Selected-1)
			End Get
		End Property
		
		Private Dim m_rapidDecelSensorIO(MAX_ROBOT_COUNT) As Integer
		Public Property rapidDecelSensorIO As Integer
			Set (value As Integer)
				m_rapidDecelSensorIO(Robot.Selected-1) = value
				If value = 0 Then
					m_assSensorIO(Robot.Selected-1) = 0
				End If
			End Set
			Get
				Return m_rapidDecelSensorIO(Robot.Selected-1)
			End Get
		End Property
		
		Public Sub New()
			IOMonitorThread = New Thread("RobotIOMap.IOMonitorThreadFunction",,"IOMonitorThreadFunction")
			CrashDetectCheckThread = New Thread("RobotIOMap.CrashDetectCheckThreadFunction",,"CrashDetectCheckThreadFunction")
			Dim i As Integer
			For i = 1 To MAX_ROBOT_COUNT
				m_assSensorIO(i) = 0
			Next i
		End Sub
		
		Public Sub ioMonitorStart()
			IOMonitorThread.Start
		End Sub
		
		Public Sub crashDetectCheckStart()
			CrashDetectCheckThread.Start
		End Sub
		
		Public Function isCrashDetectCheckRunning() As Boolean
			If CrashDetectCheckThread.threadState > 0 Then
				Return True
			Else
				Return False
			End If
		End Function
		
		Public Sub selectDoorInterlock(stage As Integer)
			If theSystem.interlockMode <> 0 And SYS_DO_INTERLOCK <> 0 Then
				Dim maxStageCount As Integer = Math.Pow(2,SYS_DO_INTERLOCK_COUNT) - 1
				If SYS_DO_INTERLOCK_ENABLE <> 0 Then
					maxStageCount = maxStageCount + 1
				End If
				If 1 <= stage And stage <= maxStageCount Then
					Dim strList() As String
					Dim i As Integer
					strList = theSystem.unuseInterlockStationList.split(",")
					For i = 0 To strList.Length - 1
						If CInt(strList(i)) = stage Then
							Exit Sub
						End If
					Next i
					If SYS_DO_INTERLOCK_ENABLE <> 0 Then
						setDIOCount(SYS_DO_INTERLOCK, SYS_DO_INTERLOCK_COUNT, stage-1)
						setDIO(SYS_DO_INTERLOCK_ENABLE, True)
					Else
						setDIOCount(SYS_DO_INTERLOCK, SYS_DO_INTERLOCK_COUNT, stage)
					End If
					Thread.Sleep(1)
				End If
			End If
		End Sub
		
		Public Sub resetDoorInterlock()
			If SYS_DO_INTERLOCK <> 0 Then
				If SYS_DO_INTERLOCK_ENABLE <> 0 Then
					setDIO(SYS_DO_INTERLOCK_ENABLE, False)
				End If
				setDIOCount(SYS_DO_INTERLOCK, SYS_DO_INTERLOCK_COUNT, 0)
			End If
		End Sub
		
		Public Function robotLimitSensorOverrun() As Boolean
			Dim axis As Integer
			For axis = 1 To myRobot(Robot.Selected-1).axisCount
				If getDIO(CInt(thePDBManager.getPDB(PDB_POSITIVE_LIMIT_SENSOR,axis))) Or _
				getDIO(CInt(thePDBManager.getPDB(PDB_NEGATIVE_LIMIT_SENSOR,axis))) Then
					Return True
				End If
			Next axis
			Return False
		End Function
		
		'////////////////////  default IO /////////////////////		
		
		Public Sub setDOBit(ch As Integer, bit As Integer, flag As Boolean)
			Dim addr As Integer
			addr = (ch - 1) * 8 + bit + DO_BASE
			setDIO(addr, flag)
		End Sub

		Public Sub setDORaw(str As String)
			Dim pos1, pos2 As Integer
			Dim ch, bit As Integer
			Dim flag As Boolean
			
			pos1 = str.IndexOf("-")
			If pos1 = -1 Then
				ThrowError(ERR_INVALID_ARGUMENT)
			End If
			
			ch = CInt(str.Substring(0, pos1))
	
			pos2 = str.IndexOf(":")
			If pos2 = -1 Then
				ThrowError(ERR_INVALID_ARGUMENT)
			End If
			
			bit = CInt(str.Substring(pos1+1, pos2-pos1+1))
			
			Select str.SubString(pos2+1)
			Case "+"
				flag = True
			Case "-"
				flag = False
			Case Else
				ThrowError(ERR_INVALID_ARGUMENT)
			End Select
			
			setDOBit(ch, bit, flag)
		End Sub
		
		Public Sub setDIO(addr As Integer, flag As Boolean)
			If ShowCommandLogToConsole = True Then
				If Signal.DIO(addr) <> flag Then
					MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : DIO " + CStr(addr) + " is changed to " + CStr(flag))
				End If
			End If
			Signal.DIO(addr) = flag
		End Sub
		
		Public Sub setDIOCount(addr As Integer, count As Integer, value As Integer)
			If ShowCommandLogToConsole = True Then
				MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : DIO " + CStr(addr) + "(" + CStr(count) + ") is changed to " + CStr(value))
			End If
			Signal.DIO(addr, count) = value
		End Sub
		
		Public Function getDIO(addr As Integer) As Boolean
			Dim ex As Exception
			Try
				If addr < 0 And Not(-19000 < addr And addr < -18000) Then 'not limit sensor range
					Return Not(Signal.DIO(-1*addr))
				Else
					Return Signal.DIO(addr)
				End If
			Catch ex
				Return False
			End Try
		End Function
	
		Public Function getDI_Chanel(ch As Integer) As Integer
			Return getDIOCount((ch-1)*8 + DI_BASE, 8)
		End Function
		
		Public Function getDO_Chanel(ch As Integer) As Integer
			Return getDIOCount((ch-1)*8 + DO_BASE, 8)
		End Function

		Public Function getDIOCount(addr As Integer, count As Integer) As Integer
			Dim ex As Exception
			Try
				Return Signal.DIO(addr, count)
			Catch ex
				Return 0
			End Try
		End Function
	

		'////////////////////  remote IO //////////////////////
		
		Public Sub setRemoteDOBit(ch As Integer, bit As Integer, flag As Boolean)
			Dim addr As Integer
			If DO_BASE_RIO <> 0 Then
				addr = (ch - 1) * 8 + bit + DO_BASE_RIO
				setDIO(addr, flag)
			End If
		End Sub

		Public Sub setRemoteDORaw(str As String)
			Dim pos1, pos2 As Integer
			Dim ch, bit As Integer
			Dim flag As Boolean
			
			pos1 = str.IndexOf("-")
			If pos1 = -1 Then
				ThrowError(ERR_INVALID_ARGUMENT)
			End If
			
			ch = CInt(str.Substring(0, pos1))
	
			pos2 = str.IndexOf(":")
			If pos2 = -1 Then
				ThrowError(ERR_INVALID_ARGUMENT)
			End If
			
			bit = CInt(str.Substring(pos1+1, pos2-pos1+1))
			
			Select str.SubString(pos2+1)
			Case "+"
				flag = True
			Case "-"
				flag = False
			Case Else
				ThrowError(ERR_INVALID_ARGUMENT)
			End Select
			
			setRemoteDOBit(ch, bit, flag)
		End Sub
	
		Public Function getRemoteDI_Chanel(ch As Integer) As Integer
			If DI_BASE_RIO = 0 Then
				Return 0
			Else
				Return getDIOCount((ch-1)*8 + DI_BASE_RIO, 8)
			End If
		End Function
		
		Public Function getRemoteDO_Chanel(ch As Integer) As Integer
			If DO_BASE_RIO = 0 Then
				Return 0
			Else
				Return getDIOCount((ch-1)*8 + DO_BASE_RIO, 8)
			End If
		End Function
		
	End Class

End Module
'Created: 5/18/2012 3:56:49 PM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module TPIOTransMap
	
	Public Class TPIOMap
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Const MAX_DIO_BITCOUNT As Integer = 80
		Private virtualDI(MAX_DIO_BITCOUNT) As Boolean
		Private virtualDO(MAX_DIO_BITCOUNT) As Boolean
		
		Private Sub loadVirtualDI()
			Dim i,t As Integer
			Dim startIndex As Integer
			
			If Not(myRobot(Robot.selected-1).theMappingManager Is Nothing) Then
				virtualDI(0) = myRobot(Robot.selected-1).theMappingManager.sensorResult()
			End If
			
			If Not(myRobot(Robot.selected-1).theBladeDeflectionDetector Is Nothing) Then
				virtualDI(1) = myRobot(Robot.selected-1).theBladeDeflectionDetector.sensorResult()
			End If
			
			If Not(myRobot(Robot.selected-1).theZPosErrDetector Is Nothing) Then
				virtualDI(2) = myRobot(Robot.selected-1).theZPosErrDetector.sensorResult()
			End If
			
			If Not(myRobot(Robot.Selected-1).lowerArm Is Nothing) Then
				virtualDI(6) = myRobot(Robot.Selected-1).lowerArm.isCrashDetectedState
				
				If myRobot(Robot.Selected-1).lowerArm.fingerCount <= 5 Then
					For t = 1 To myRobot(Robot.Selected-1).lowerArm.totalGripTypeCount
						If t = 1 Then
							startIndex = 8
						ElseIf t = 2 Then
							startIndex = 48
						End If
						For i = 1 To myRobot(Robot.Selected-1).lowerArm.fingerCount
							virtualDI(startIndex+i-1) = myRobot(Robot.Selected-1).lowerArm.fingerSensorCheck(t,i)
						Next i
					Next t
				Else
					For i = 1 To myRobot(Robot.Selected-1).lowerArm.fingerCount
						If i <= 5 Then
							startIndex = 8
						ElseIf i <= 10 Then
							startIndex = 48
						ElseIf i <= 15 Then
							startIndex = 56
						ElseIf i <= 20 Then
							startIndex = 64
						Else
							Exit For
						End If
						virtualDI(startIndex+((i-1) Mod 5)) = myRobot(Robot.Selected-1).lowerArm.fingerSensorCheck(1,i)
					Next i
				End If
			End If
			
			If Not(myRobot(Robot.Selected-1).upperArm Is Nothing) Then
				virtualDI(7) = myRobot(Robot.Selected-1).upperArm.isCrashDetectedState
				
				If myRobot(Robot.Selected-1).upperArm.fingerCount <= 5 Then
					For t = 1 To myRobot(Robot.Selected-1).upperArm.totalGripTypeCount
						If t = 1 Then
							startIndex = 16
						ElseIf t = 2 Then
							startIndex = 56
						End If
						For i = 1 To myRobot(Robot.Selected-1).upperArm.fingerCount
							virtualDI(startIndex+i-1) = myRobot(Robot.Selected-1).upperArm.fingerSensorCheck(t,i)
						Next i
					Next t
				End If
			End If
			
			Dim axis As Integer
			Dim j As Integer
			For i = 1 To myRobot(Robot.Selected-1).tpAxisCount
				axis = myRobot(Robot.Selected-1).tpToControlAxis(i)
				If myRobot(Robot.Selected-1).zAxisCount > 1 And _
					axis = myRobot(Robot.Selected-1).zIndexToAxis(1) Then 'mulit Z
					virtualDI((i-1)*3 + 24) = False
					virtualDI((i-1)*3 + 25) = False
					virtualDI((i-1)*3 + 26) = False
					For j = 1 To myRobot(Robot.Selected-1).zAxisCount
						axis = myRobot(Robot.Selected-1).zIndexToAxis(j)
						virtualDI((i-1)*3 + 24) = virtualDI((i-1)*3 + 24) Or robotIO.getDIO(CInt(thePDBManager.getPDB(PDB_HOME_SENSOR,axis)))
						virtualDI((i-1)*3 + 25) = virtualDI((i-1)*3 + 25) Or robotIO.getDIO(CInt(thePDBManager.getPDB(PDB_POSITIVE_LIMIT_SENSOR,axis)))
						virtualDI((i-1)*3 + 26) = virtualDI((i-1)*3 + 26) Or robotIO.getDIO(CInt(thePDBManager.getPDB(PDB_NEGATIVE_LIMIT_SENSOR,axis)))
					Next j
				Else
					virtualDI((i-1)*3 + 24) = robotIO.getDIO(CInt(thePDBManager.getPDB(PDB_HOME_SENSOR,axis)))
					virtualDI((i-1)*3 + 25) = robotIO.getDIO(CInt(thePDBManager.getPDB(PDB_POSITIVE_LIMIT_SENSOR,axis)))
					virtualDI((i-1)*3 + 26) = robotIO.getDIO(CInt(thePDBManager.getPDB(PDB_NEGATIVE_LIMIT_SENSOR,axis)))
				End If
			Next
		End Sub
		
		Private Sub loadVirtualDO()
			Dim t As Integer
			Dim startIndex As Integer
			
			If errorHandler.getCurrentError() Is Nothing Then
				virtualDO(0) = False
			Else
				virtualDO(0) = True
			End If
		
			virtualDO(1) = myRobot(Robot.selected-1).isOpCommandRunningNow()
			
			virtualDO(2) = myRobot(Robot.selected-1).isOrgCompleted
			
			If Not(myRobot(Robot.Selected-1).lowerArm Is Nothing) Then
				For t = 1 To myRobot(Robot.Selected-1).lowerArm.totalGripTypeCount
					If t = 1 Then
						startIndex = 3
					ElseIf t = 2 Then
						startIndex = 11
					End If
					virtualDO(startIndex) = myRobot(Robot.Selected-1).lowerArm.isGrip(t)
				Next t
			End If
			
			If Not(myRobot(Robot.Selected-1).upperArm Is Nothing) Then
				For t = 1 To myRobot(Robot.Selected-1).upperArm.totalGripTypeCount
					If t = 1 Then
						startIndex = 4
					ElseIf t = 2 Then
						startIndex = 12
					End If
					virtualDO(startIndex) = myRobot(Robot.Selected-1).upperArm.isGrip(t)
				Next t
			End If
			
			If Not(myRobot(Robot.selected-1).theMappingManager Is Nothing) Then
				virtualDO(5) = myRobot(Robot.selected-1).theMappingManager.isSensorON()
			End If
			
			If Not(myRobot(Robot.Selected-1).lowerArm Is Nothing) Then
				If myRobot(Robot.Selected-1).lowerArm.isUseCrashDetectSensor = True Then
					virtualDO(8) = myRobot(Robot.Selected-1).lowerArm.isCrashDetectSensorOn
				End If
			End If
			
			If Not(myRobot(Robot.Selected-1).upperArm Is Nothing) Then
				If myRobot(Robot.Selected-1).upperArm.isUseCrashDetectSensor = True Then
					virtualDO(9) = myRobot(Robot.Selected-1).upperArm.isCrashDetectSensorOn
				End If
			End If
		End Sub
		
		
		
		
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New()
			Dim i As Integer
			For i = 0 To MAX_DIO_BITCOUNT
				virtualDI(i) = False
				virtualDO(i) = False
			Next i
		End Sub
		
		Public Sub setDOBit(ch As Integer, bit As Integer, flag As Boolean)
			Dim addr As Integer
			
			If ch = 1 Then
				Select bit
				Case 3
					If Not(myRobot(Robot.Selected-1).lowerArm Is Nothing) Then
						
						If myRobot(Robot.Selected-1).lowerArm.isUseExtraGuideGrip = True Then
							If flag = True Then
								myRobot(Robot.Selected-1).lowerArm.grip(1,flag)
								Thread.Sleep(theSystem.suctionOnTime)
								myRobot(Robot.Selected-1).lowerArm.extraGuideGrip(flag)
							Else
								myRobot(Robot.Selected-1).lowerArm.extraGuideGrip(flag)
								Thread.Sleep(theSystem.suctionOffTime)
								myRobot(Robot.Selected-1).lowerArm.grip(1,flag)
							End If
						Else
							myRobot(Robot.Selected-1).lowerArm.grip(1,flag)
						End If
					End If
				Case 4
					If Not(myRobot(Robot.Selected-1).upperArm Is Nothing) Then
						If myRobot(Robot.Selected-1).upperArm.isUseExtraGuideGrip = True Then
							If flag = True Then
								myRobot(Robot.Selected-1).upperArm.grip(1,flag)
								Thread.Sleep(theSystem.suctionOnTime)
								myRobot(Robot.Selected-1).upperArm.extraGuideGrip(flag)
							Else
								myRobot(Robot.Selected-1).upperArm.extraGuideGrip(flag)
								Thread.Sleep(theSystem.suctionOffTime)
								myRobot(Robot.Selected-1).upperArm.grip(1,flag)
							End If
						Else
							myRobot(Robot.Selected-1).upperArm.grip(1,flag)
						End If
					End If
				Case 5
					If Not(myRobot(Robot.selected-1).theMappingManager Is Nothing) Then
						myRobot(Robot.selected-1).theMappingManager.sensorON(flag)
					End If
				End Select
			ElseIf ch = 2 Then
				Select bit
				Case 0
					If Not(myRobot(Robot.Selected-1).lowerArm Is Nothing) Then
						myRobot(Robot.Selected-1).lowerArm.crashDetectSensorOnOff(flag)
					End If
				Case 1
					If Not(myRobot(Robot.Selected-1).upperArm Is Nothing) Then
						myRobot(Robot.Selected-1).upperArm.crashDetectSensorOnOff(flag)
					End If
				Case 3
					If Not(myRobot(Robot.Selected-1).lowerArm Is Nothing) Then
						myRobot(Robot.Selected-1).lowerArm.grip(2,flag)
					End If
				Case 4
					If Not(myRobot(Robot.Selected-1).upperArm Is Nothing) Then
						myRobot(Robot.Selected-1).upperArm.grip(2,flag)
					End If
				End Select
			End If
		End Sub
		
		Public Sub setDORaw(str As String)
			Dim pos1, pos2 As Integer
			Dim ch, bit As Integer
			Dim flag As Boolean
			
			pos1 = str.IndexOf("-")
			If pos1 = -1 Then
				ThrowError(ERR_INVALID_ARGUMENT)
			End If
			
			ch = CInt(str.Substring(0, pos1))
	
			pos2 = str.IndexOf(":")
			If pos2 = -1 Then
				ThrowError(ERR_INVALID_ARGUMENT)
			End If
			
			bit = CInt(str.Substring(pos1+1, pos2-pos1+1))
			
			Select str.SubString(pos2+1)
			Case "+"
				flag = True
			Case "-"
				flag = False
			Case Else
				ThrowError(ERR_INVALID_ARGUMENT)
			End Select
			
			setDOBit(ch, bit, flag)
		End Sub
		
		Public Function getDI(addr As Integer) As Boolean
			Dim res As Boolean = False
			If addr >= 0 And addr < MAX_DIO_BITCOUNT Then
				loadvirtualDI()
				res = virtualDI(addr)
			End If
			Return res
		End Function
		
		Public Function getDI_Chanel(ch As Integer) As Integer
			Return getDICount((ch-1)*8, 8)
		End Function
		
		Public Function getDICount(addr As Integer, count As Integer) As Integer
			Dim res As Integer = 0
			Dim ex As Exception
			Dim i As Integer
			
			loadvirtualDI()
			Try
				For i = 0 To count-1
					If (addr + i) >= 0 And (addr + i) < MAX_DIO_BITCOUNT Then
						If virtualDI(addr + i) = True Then
							res = res * 2 + 1
						Else
							res = res * 2
						End If
					Else
						res = res * 2
					End If
				Next i
			Catch ex
			End Try
			
			Return res
		End Function
		
		Public Function getDO(addr As Integer) As Boolean
			Dim res As Boolean = False
			If addr >= 0 And addr < MAX_DIO_BITCOUNT Then
				loadvirtualDO()
				res = virtualDO(addr)
			End If
			Return res
		End Function
		
		Public Function getDO_Chanel(ch As Integer) As Integer
			Return getDOCount((ch-1)*8, 8)
		End Function
		
		Public Function getDOCount(addr As Integer, count As Integer) As Integer
			Dim res As Integer = 0
			Dim ex As Exception
			Dim i As Integer
			
			loadvirtualDO()
			Try
				For i = 0 To count-1
					If (addr + i) >= 0 And (addr + i) < MAX_DIO_BITCOUNT Then
						If virtualDO(addr + i) = True Then
							res = res * 2 + 1
						Else
							res = res * 2
						End If
					Else
						res = res * 2
					End If
				Next i
			Catch ex
			End Try
			
			Return res
		End Function
		
	End Class
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module DataModule
	Public Class DataFile
	
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SHARED ''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Shared Public Dim SaveReservationMutex As New Mutex
		Shared Public Dim SaveReservationThread As Thread = New Thread("DataFile.SaveReservationThreadFunction",,"SaveReservationThreadFunction")
		Shared Public Dim SaveReservationDataFileList(30) As DataFile
		Shared Public Dim SaveReservationDataFileCount As Integer = 0
		Shared Public Dim SaveReservationPDB As Boolean = False
		Shared Public Sub AddSaveReservationList(data As DataFile)
			Dim i As Integer
			Dim ex As Exception
			
			Try
				SaveReservationMutex.lock()
				For i = 0 To SaveReservationDataFileCount-1
					If SaveReservationDataFileList(i).fileName = data.fileName Then
						SaveReservationMutex.unLock()
						If ShowCommandLogToConsole = True Then
							MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : File " + data.fileName + " already reservationed")
						End If
						Exit Sub
					End If
				Next i
				SaveReservationDataFileList(SaveReservationDataFileCount) = data
				SaveReservationDataFileCount = SaveReservationDataFileCount + 1
			Catch ex
				Throw ex
			Finally
				SaveReservationMutex.unLock()
			End Try
			
			If ShowCommandLogToConsole = True Then
				MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : File " + data.fileName + " save reservation")
			End If
			
			If protocolHandler.useFlashSaveProtocol = False Then
				SaveReservationThreadStart()
			End If
		End Sub
		
		Shared Public Sub AddSaveReservationPDB()
			SaveReservationMutex.lock()
			SaveReservationPDB = True
			SaveReservationMutex.unLock()
			
			If protocolHandler.useFlashSaveProtocol = False Then
				SaveReservationThreadStart()
			End If
		End Sub
		
		Shared Public Sub SaveReservationThreadStart()
			If SaveReservationThread.ThreadState <= 0 Then
				SaveReservationThread.Start
			End If
		End Sub
		
		Shared Public Sub WaitForSaveReservationThreadComplete()
			If SaveReservationThread.ThreadState > 0 Then
				SaveReservationThread.Join(-1)
			End If
		End Sub
		
		Shared Public Sub WaitForSaveReservationThreadComplete(waitTime_ms As Integer)
			If SaveReservationThread.ThreadState > 0 Then
				If SaveReservationThread.Join(waitTime_ms) = False Then
					ThrowError(ERR_WAIT_TIMEOUT)
				End If
			End If
		End Sub
		
		Shared Public Sub SaveReservationThreadFunction()
			Dim ex As Exception
			Dim i As Integer
			Dim data As DataFile
			
SAVESTART:

			While SaveReservationDataFileCount > 0
				
				SaveReservationMutex.lock()
				data = SaveReservationDataFileList(0)
				SaveReservationDataFileCount = SaveReservationDataFileCount - 1
				For i = 0 To SaveReservationDataFileCount - 1
					SaveReservationDataFileList(i) = SaveReservationDataFileList(i+1)
				Next i
				SaveReservationMutex.unLock()
				
				Try
					If ShowCommandLogToConsole = True Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : File save to " + data.fileName)
					End If
					
					data.saveToFile()
					
					If ShowCommandLogToConsole = True Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : File save complete.")
					End If
				Catch ex
					errorHandler.handleError(ex)
					ex = Nothing
				End Try

			End While
			
			If SaveReservationPDB = True Then
				SaveReservationMutex.lock()
				SaveReservationPDB = False
				SaveReservationMutex.unLock()
				
				Try
					If ShowCommandLogToConsole = True Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : PDB file save start")
					End If
					
					Controller.PDBnum(901, Robot.Selected, 0, 0) = 1
					
					If ShowCommandLogToConsole = True Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : PDB file save complete.")
					End If
				Catch ex
					errorHandler.handleError(ex)
					ex = Nothing
				End Try
			End If
			
			Thread.Sleep(100)
			While (Controller.PDBnum(910) = 1)
				Thread.Sleep(100)
				If SaveReservationDataFileCount > 0 Or SaveReservationPDB = True Then
					Goto SAVESTART
				End If
			End While
			
			If ShowCommandLogToConsole = True Then
				MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : FLASH MEMORY save complete.")
			End If
		End Sub
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		Private Dim m_filename As String
		Public Property fileName As String
			Get
				Return m_filename
			End Get
			Set (value As String)
				m_filename = value
			End Set
		End Property
		
		Private Dim keyValues() As KeyValue
		Private Dim keyItemCount As Integer 

		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		Public Sub New()
			ReDim keyValues(300)
		End Sub
		
		Public Sub New(filename As String)
			ReDim keyValues(300)
			load(filename)
		End Sub
		
		Public Sub New(filename As String, maxLineCount As Integer)
			ReDim keyValues(maxLineCount)
			load(filename)
		End Sub
		
		Public Sub setMaxLineCount(maxLineCount As Integer)
			ReDim Preserve keyValues(maxLineCount)
		End Sub
		
		Public Sub load(filename As String)
			m_filename = filename

			Dim dataFile As New StreamReader(m_filename)
			
			Dim str As String
			Dim ex As Exception
			
			keyItemCount = 0
			
			If dataFile Is Nothing Then
				' Error
				MyConsole.WriteLine("DataFile not exist : " & m_filename)
				ex = New Exception
				ex.ErrorCode = -508
				Throw ex.Clone
			End If

			While True
				If dataFile.Peek() = -1 Then
					Exit While
				End If
				
				str = dataFile.ReadLine()
				If str.Length >= 1 Then
					If keyValues.length <= keyItemCount Then
						ReDim Preserve keyValues(keyItemCount+1)
					End If
					keyValues(keyItemCount) = New KeyValue(str)
					keyItemCount = keyItemCount + 1
				End If
			End While

			dataFile.Close
		End Sub
			
		Public Sub save()
			DataFile.AddSaveReservationList(Me)
		End Sub
		
		Public Sub saveToFile()
			Dim i As Integer
			Dim ex As Exception
			Dim dataFile As StreamWriter
			dataFile = New StreamWriter(m_filename)
			
			If dataFile Is Nothing Then
				ex = New Exception
				ex.ErrorCode = -520
				ex.Message = "File not open"
				Throw ex
			End If
			
			For i = 0 To keyItemCount-1
				dataFile.WriteLine(keyValues(i).GetString())
			Next
			dataFile.Close
		End Sub
		
		Public Function GetValue(key As String) As String
			Return GetValue(key, "")
		End Function
		
		Public Function GetValue(key As String, defaultValue As String) As String
			Dim line As Integer
			For line = 0 To keyItemCount-1
				If keyValues(line).GetKey() = key Then
					Return keyValues(line).GetValue()
				End If
			Next
			Return defaultValue
		End Function
		
		Public Sub SetValue(key As String, newValue As String)
			Dim result As String
			Dim line As Integer
			
			For line = 0 To keyItemCount-1
				If keyValues(line).GetKey() = key Then
					keyValues(line).SetValue(newValue)
					Exit Sub
				End If
			Next
			
			If keyValues.length <= keyItemCount Then
				ReDim Preserve keyValues(keyItemCount+1)
				Exit Sub
			End If
			
			keyValues(keyItemCount) = New KeyValue(key & "=" & newValue)
			keyItemCount = keyItemCount + 1
		End Sub
		
		' It need key is integer string and ordered to upside
		Public Function getValue_binarySearch(key As Integer) As String
			' binary search
			Dim startIndex As Integer
			Dim endIndex As Integer
			Dim nowIndex As Integer
			
			startIndex = 0
			endIndex = keyItemCount-1
			While True
				nowIndex = (startIndex+endIndex)/2
				If CInt(keyValues(nowIndex).GetKey()) = key Then
					Return keyValues(nowIndex).GetValue()
				ElseIf CInt(keyValues(nowIndex).GetKey()) < key Then
					startIndex = nowIndex + 1
				Else
					endIndex = nowIndex - 1
				End If
				If startIndex > endIndex Then
					Exit While
				End If
			End While

			Return ""
		End Function
		
		' It need key is integer string and ordered to upside
		Public Sub setValue_binarySearch(key As Integer, newValue As String)
			' binary search
			Dim i As Integer
			Dim startIndex As Integer
			Dim endIndex As Integer
			Dim nowIndex As Integer
			
			startIndex = 0
			endIndex = keyItemCount-1
			While True
				nowIndex = (startIndex+endIndex)/2
				If CInt(keyValues(nowIndex).GetKey()) = key Then
					keyValues(nowIndex).SetValue(newValue)
				ElseIf CInt(keyValues(nowIndex).GetKey()) < key Then
					startIndex = nowIndex + 1
				Else
					endIndex = nowIndex - 1
				End If
				If startIndex > endIndex Then
					Exit While
				End If
			End While
			
			If keyValues.length <= keyItemCount Then
				ReDim Preserve keyValues(keyItemCount+1)
				Exit Sub
			End If
					
			For i = keyItemCount-1 To startIndex+1 Step -1
				keyValues(i) = keyValues(i-1)
			Next i
			keyValues(startIndex) = New KeyValue(CStr(key) & "=" & newValue)
			keyItemCount = keyItemCount + 1
		End Sub
		
	End Class



End Module
'Created: 7/4/2013 11:16:21 AM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module DataFormat

	Public Function assertSpeedValue(value As Integer) As Integer
		If value > 100 Then
			Return 100
		ElseIf value < 1 Then
			Return 1
		Else
			Return value
		End If
	End Function
	
    Public Function FormatDouble(dbl As Double) As String
		Return Format(dbl, ".000")
	End Function
	
	Public Function FormatDoublePos(dbl As Double) As String
		If dbl < 0 Then
			Return Format(dbl, "00000.000")
		Else
			Return "+" + Format(dbl, "0000.000")
		End If
	End Function
	
	Public Sub IntsToDoubles(ByRef ints() As Integer, ByRef dbls() As Double)
		Dim i As Integer
		
		If dbls.Length < ints.Length Then
			ThrowError(ERR_INVALID_FORMAT)
		End If
		
		For i = 0 To ints.Length-1
			dbls(i) = CDbl(ints(i))
		Next
	End Sub
	
	Public Sub DoublesToInts(ByRef dbls() As Double, ByRef ints() As Integer)
		Dim i As Integer
		
		If ints.Length < dbls.Length Then
			ThrowError(ERR_INVALID_FORMAT)
		End If
		
		For i = 0 To dbls.Length-1
			ints(i) = CInt(dbls(i))
		Next
	End Sub

	Public Sub StrsToInts(ByRef strs() As String, ByRef values() As Integer)
		Dim i As Integer
		
		For i = 0 To values.Length-1
			If strs.Length <= i Then
				Exit For
			End If
			If strs(i).Length > 0 Then
				values(i) = CInt(strs(i))
			End If
		Next
	End Sub
	
	Public Sub StrsToDoubles(ByRef strs() As String, ByRef values() As Double)
		Dim i As Integer

		For i = 0 To values.Length-1
			If strs.Length <= i Then
				Exit For
			End If
			If strs(i).Length > 0 Then
				values(i) = CDbl(strs(i))
			End If
		Next
	End Sub
	
	Public Sub StrToInts(str As String, ByRef values() As Integer, sep As String)
		Dim strs() As String
		
		strs = str.Split(sep)
		StrsToInts(strs, values)
	End Sub
	
	Public Sub StrToDoubles(str As String, ByRef values() As Double, sep As String)
		Dim strs() As String
		
		strs = str.Split(sep)
	
		StrsToDoubles(strs, values)
	End Sub

	Public Sub IntsToStrs(ByRef values() As Integer, ByRef strs() As String)
		Dim i As Integer
		
		If strs.Length < values.Length Then
			ThrowError(ERR_INVALID_FORMAT)
		End If
		
		For i = 0 To values.Length-1
			strs(i) = CStr(values(i))
		Next
	End Sub
	
	Public Sub DoublesToStrs(ByRef values() As Double, ByRef strs() As String)
		Dim i As Integer
		
		If strs.Length < values.Length Then
			ThrowError(ERR_INVALID_FORMAT)
		End If
		
		For i = 0 To values.Length-1
			strs(i) = CStr(values(i))
		Next
	End Sub
	
	Public Function StringsCombine(ByRef strs() As String, sep As String) As String
		Dim i As Integer
		Dim res As String
		
		If strs.Length = 0 Then
			Return res
		End If
		
		res = strs(0)
		
		For i = 1 To strs.Length-1
			res = res + sep + strs(i)
		Next
		
		Return res
	End Function
	
	Public Function IntsToStr(ByRef values() As Integer) As String
		Dim strs() As String
		
		If values.Length = 0 Then
			Return ""
		End If
		
		ReDim strs(values.Length-1)
		
		IntsToStrs(values, strs)
		
		Return StringsCombine(strs, ",")
	End Function
	
	Public Function DoublesToStr(ByRef values() As Double) As String
		Dim strs() As String
		
		If values.Length = 0 Then
			Return ""
		End If
		
		ReDim strs(values.Length-1)
		
		DoublesToStrs(values, strs)
		
		Return StringsCombine(strs, ",")
	End Function
	
	Public Function intToHex(value As Integer) As String
		Dim str As String = ""
		str = Hex(value)
		If str.length = 1 Then
			str = "0" + str
		End If
		Return str
	End Function
	
	Public Function hexToInt(str As String) As Integer
		Dim result As Integer
		Dim strlen As Integer
		Dim cs As String
		Dim i As Integer
		
		strlen = Len(str)
		For i = 0 To strlen-1
			cs = str.Substring(i, 1)
			result = result * 16 + Asc(cs)
		Next
		
		Return result
	End Function
	
	Public Function HexLen(Num As Integer) As Integer
		Dim result As Integer
		Dim HexSize As Integer = 0
		Dim strlen As Integer
		While (Num > Math.Pow(16,HexSize))
			HexSize +=1
		End While
		Return HexSize
	End Function
	
	Public Function HexEx(Num As Integer, bitCount As Integer) As String
		Dim i As Integer
		Dim HexLength As Integer = HexLen(Num)
		Dim Result As String
		Result = hex(Num)
		For i = 0 To (Math.floor(bitCount/16) - HexLength)
			Result = "0"+Result
		Next
		Return Result
	End Function
	
End Module
'Created: 11/15/2013 2:39:58 PM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module KeyValueModule
    Public Class KeyValue
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim raw As String
		Private Dim key As String
		Private Dim value As String
		
		
		

		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(key As String, value As String)
			Me.key = key
			Me.value = value
		End Sub
		
		Public Sub New(str As String)
			key = ""
			value = ""
			
			If str.Length = 0 Then
				raw = "'"
			Else
				raw = str
			End If
			
			If isComment() = True Then
				Exit Sub
			End If
			
			Dim strs() As String
			strs = raw.Split("=")
			If strs.Length >= 2 Then
				key = strs(0)
				value = strs(1)
			Else
				raw = "'" + raw
			End If
		End Sub
		
		Public Function isComment() As Boolean
			If raw.Substring(0, 1) = "'" Then
				Return True
			Else
				Return False
			End If
		End Function
		
		Public Function GetKey() As String
			Return key
		End Function
		
		Public Function GetValue() As String
			Return value
		End Function
		
		Public Sub SetValue(newValue As String)
			If isComment() = True Then
				Exit Sub
			Else
				value = newValue
			End If
		End Sub
		
		Public Function GetString() As String
			If isComment() = True Then
				Return raw
			Else
				Return key + "=" + value
			End If
		End Function
		
	End Class
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module LocationExModule

	Public Const AXISORDER_CONTROL As Integer = &H01
	Public Const AXISORDER_TP As Integer = &H02
	Public Const AXISORDER_DYNAX As Integer = &H04
	
	Public Const AXISDISPLAY_ORIGINAL As Integer = &H100
	Public Const AXISDISPLAY_CENTERZERO As Integer = &H200
	
	Public Const DEFAULT_CUR As Integer = 1
	Public Const DEFAULT_ZERO As Integer = 2
	
	Public Const COORD_CARTESIAN As Integer = 0
	Public Const COORD_JOINT As Integer = 1

	Public Class LocationEx
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SHARED '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Shared Public Function GetCurCartPos() As LocationEx
			Dim result As New LocationEx(Robot.Where(Robot.selected))
			If myRobot(Robot.selected-1).isTrackExist Or myRobot(Robot.selected-1).isFlipExist Or myRobot(Robot.selected-1).zAxisCount >= 2 Then
				Dim curJoint As Location = Robot.WhereAngles(Robot.selected)
				If myRobot(Robot.selected-1).isTrackExist Then
					result.extraTrack = curJoint.Angle(myRobot(Robot.selected-1).controlAxis("V"))
				End If
				If myRobot(Robot.selected-1).isFlipExist Then
					result.extraFlip = curJoint.Angle(myRobot(Robot.selected-1).controlAxis("F"))
				End If
				If myRobot(Robot.selected-1).zAxisCount >= 2 Then
					result.extraZ2 = curJoint.Angle(myRobot(Robot.selected-1).controlAxis("2"))
				End If
			End If
			Return result
		End Function
		
		Shared Public Function GetDestCartPos() As LocationEx
			Return GetDestCartPos(True)
		End Function

		Shared Public Function GetDestCartPos(curPosWhenStop As Boolean) As LocationEx
			If myRobot(Robot.Selected-1).isStopTrajState() And curPosWhenStop = True Then
				Return GetCurCartPos()
			End If

			Dim result As New LocationEx(Robot.Dest(Robot.selected))
			If myRobot(Robot.Selected-1).isTrackExist() Or myRobot(Robot.Selected-1).isFlipExist() Or myRobot(Robot.selected-1).zAxisCount >= 2 Then
				Dim destJoint As Location = Robot.DestAngles(Robot.Selected)
				If myRobot(Robot.Selected-1).isTrackExist() Then
					result.extraTrack = destJoint.Angle(myRobot(Robot.Selected-1).controlAxis("V"))
				End If
				If myRobot(Robot.Selected-1).isFlipExist() Then
					result.extraFlip = destJoint.Angle(myRobot(Robot.Selected-1).controlAxis("F"))
				End If
				If myRobot(Robot.selected-1).zAxisCount >= 2 Then
					result.extraZ2 = destJoint.Angle(myRobot(Robot.Selected-1).controlAxis("2"))
				End If
			End If
			
			Return result
		End Function
		
		Shared Public Function GetCurJointPos() As LocationEx
			Dim result As New LocationEx(Robot.WhereAngles(Robot.Selected))
			Return result
		End Function
		
		Shared Public Function GetDestJointPos() As LocationEx
			Return GetDestJointPos(True)
		End Function
		
		Shared Public Function GetDestJointPos(curPosWhenStop As Boolean) As LocationEx
			If myRobot(Robot.Selected-1).isStopTrajState() And curPosWhenStop = True Then
				Return GetCurJointPos()
			End If
	
			Dim result As New LocationEx(Robot.DestAngles(Robot.Selected))		
			Return result
		End Function
		
		
		
		
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim m_loc As Location
		Public Property loc As Location
	        Set (value As Location)
	           m_loc = value.Clone
	        End Set
	        Get
	            Return m_loc
	        End Get
	    End Property
		
		Public ReadOnly Property type As Integer
	        Get 
	            Return m_loc.type
	        End Get
	    End Property
		
		Private Dim extraTrack As Double
		Private Dim extraFlip As Double
		Private Dim extraZ2 As Double
		Public Property extra(axisName As String) As Double
	        Set (value As Double)
				Select axisName
				Case "V"
	        		extraTrack = value
				Case "F"
					extraFlip = value
				Case "2"
					extraZ2 = value
				End Select
	        End Set
	        Get
				Select axisName
				Case "V"
	            	Return extraTrack
				Case "F"
					Return extraFlip
				Case "2"
					Return extraZ2
				Case Else
					Return 0
				End Select
	        End Get
	    End Property
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		Public Sub New()
			setFromLocation(LocationEx.GetCurJointPos())
			Dim i As Integer
			For i = 1 To myRobot(Robot.Selected-1).axisCount
				m_loc.angle(i) = 0
			Next i
		End Sub
		
		Public Sub New(loc As Location)
			m_loc = loc.clone
		End Sub
		
		Public Sub New(loc As LocationEx)
			setFromLocation(loc)
		End Sub
		
		Public Sub New(type As Integer, str As String)
			setFromString(type,str)
		End Sub
		
		Public Sub New(type As Integer, str As String, axisOrder As Integer)
			setFromString(type,str,axisOrder)
		End Sub
		
		Public Sub New(type As Integer, str As String, axisOrder As Integer, defaultValueMode As Integer)
			setFromString(type,str,axisOrder,defaultValueMode)
		End Sub
		
		Public Sub New(str As String)
			setFromFullString(str)
		End Sub
		
		Public Sub New(str As String, axisOrder As Integer)
			setFromFullString(str,axisOrder)
		End Sub

		Public Function clone() As LocationEx
			Dim result As New LocationEx(Me)
			Return result
		End Function

		Public Function kinesol() As LocationEx
			Dim result As New LocationEx(m_loc.kinesol(1))

			If type = COORD_JOINT Then
				If myRobot(Robot.Selected-1).isTrackExist() Then
					result.extraTrack = m_loc.angle(myRobot(Robot.Selected-1).controlAxis("V"))
				End If
				If myRobot(Robot.Selected-1).isFlipExist() Then
					result.extraFlip = m_loc.angle(myRobot(Robot.Selected-1).controlAxis("F"))
				End If
				If myRobot(Robot.selected-1).zAxisCount >= 2 Then
					result.extraZ2 = m_loc.angle(myRobot(Robot.Selected-1).controlAxis("2"))
				End If
			Else
				If myRobot(Robot.Selected-1).isTrackExist() Then
					result.loc.angle(myRobot(Robot.Selected-1).controlAxis("V")) = extraTrack
				End If
				If myRobot(Robot.Selected-1).isFlipExist() Then
					result.loc.angle(myRobot(Robot.Selected-1).controlAxis("F")) = extraFlip
				End If
				If myRobot(Robot.selected-1).zAxisCount >= 2 Then
					result.loc.angle(myRobot(Robot.Selected-1).controlAxis("2")) = extraZ2
				End If
			End If
			
			Return result
		End Function
		
		Public Sub setFromLocation(src As LocationEx)
			m_loc = src.loc.clone
			extraTrack = src.extraTrack
			extraFlip = src.extraFlip
			extraZ2 = src.extraZ2
		End Sub

		Public Sub setFromString(type As Integer,str As String)
			setFromString(type, str, AxisOrder_Control, DEFAULT_ZERO)
		End Sub
		
		Public Sub setFromString(type As Integer,str As String, axisOrder As Integer)
			setFromString(type, str, axisOrder, DEFAULT_ZERO)
		End Sub
		
		Public Function isAllZero() As Boolean
			Dim i As Integer
			If m_loc Is Nothing Then
				Return True
			End If
			If type = COORD_CARTESIAN Then
				If m_loc.x <> 0 Or m_loc.y <> 0 Or m_loc.z <> 0 Then
					Return False
				End If
			Else
				For i = 1 To myRobot(Robot.Selected-1).axisCount
					If m_loc.angle(i) <> 0 Then
						Return False
					End If
				Next i
			End If
			Return True
		End Function
		
		Public Function isAllZero(type As Integer, strs() As String) As Boolean
			Dim i As Integer
			If type = COORD_CARTESIAN Then
				For i = 1 To 3
					If Not(strs(i-1) Is Nothing) Then
						If CDbl(strs(i-1)) <> 0 Then
							Return False
						End If
					End If
				Next i
			Else
				For i = 1 To strs.getUpperBound(0) + 1 '1 ~ getupper + 1 bowon 150720
					If Not(strs(i-1) Is Nothing) Then
						If CDbl(strs(i-1)) <> 0 Then
							Return False
						End If
					End If
				Next i
			End If
			Return True
		End Function
		
		'axisOrder is  AxisOrder_Control or AxisOrder_TP or AxisOrder_Dynax
		'Convert the comma seprated string to Location object
		'Format:<Angles or XYZ(6),extaT,extaF>
		Public Sub setFromString(type As Integer,str As String, axisOrder As Integer, defaultValueMode As Integer)
		
			If str = "" Then
				throwError(ERR_NO_DATA)
			End If
			
			Dim pos As Integer
			Dim strs() As String
			Dim sep As String = ","
			Dim i As Integer
			Dim length As Integer
			
			strs = str.Split(sep)
			
			For i = 0 To strs.Length - 1
				If strs(i) = "" Then
					strs(i) = Nothing
				End If
			Next i

			If type = COORD_CARTESIAN Then
				If myRobot(Robot.Selected-1).isStopTrajState() Then
					m_loc = Robot.Where
				Else
					m_loc = Robot.Dest
				End If
				If myRobot(Robot.Selected-1).isTrackExist() Or myRobot(Robot.Selected-1).isFlipExist() Or myRobot(Robot.selected-1).zAxisCount >= 2  Then
					Dim nowJoint As Location
					If myRobot(Robot.Selected-1).isStopTrajState() Then
						nowJoint = Robot.WhereAngles(Robot.Selected)
					Else
						nowJoint = Robot.DestAngles(Robot.Selected)
					End If
					If myRobot(Robot.Selected-1).isTrackExist() Then
						extraTrack = nowJoint.Angle(myRobot(Robot.Selected-1).controlAxis("V"))
					End If
					If myRobot(Robot.Selected-1).isFlipExist() Then
						extraFlip = nowJoint.Angle(myRobot(Robot.Selected-1).controlAxis("F"))
					End If
					If myRobot(Robot.selected-1).zAxisCount >= 2 Then
						extraZ2 = nowJoint.Angle(myRobot(Robot.Selected-1).controlAxis("2"))
					End If
				End If
			
				length = strs.Length 
				If length <= 8 Then
					ReDim Preserve strs(8)
					For i = length To 7
						strs(i) = Nothing
					Next i
				Else
					MyConsole.writeLine(TimeStamp.CurrentTimeString() + "WrongPointData : " + str)
					ThrowError(ERR_INVALID_LOCATION_FORMAT)
				End If
				
				If Not(strs(0) Is Nothing) Then
					m_loc.X = CDbl(strs(0))
				ElseIf defaultValueMode = DEFAULT_ZERO Then
					m_loc.X = 0
				End If
				If Not(strs(1) Is Nothing) Then
					m_loc.Y = CDbl(strs(1))
				ElseIf defaultValueMode = DEFAULT_ZERO Then
					m_loc.Y = 0
				End If
				If Not(strs(2) Is Nothing) Then
					setZposition(CDbl(strs(2)))
				ElseIf defaultValueMode = DEFAULT_ZERO Then
					setZposition(0)
				End If
				If Not(strs(3) Is Nothing) Then
					m_loc.yaw = CDbl(strs(3))
				ElseIf defaultValueMode = DEFAULT_ZERO Then
					m_loc.yaw = 0
				End If
				If myRobot(Robot.Selected-1).robotType = ARTICULATED_TYPE Then
					If Not(strs(4) Is Nothing) Then
						m_loc.pitch = CDbl(strs(4))
					ElseIf defaultValueMode = DEFAULT_ZERO Then
						m_loc.pitch = 0
					End If
					If Not(strs(5) Is Nothing) Then
						m_loc.roll = CDbl(strs(5))
					ElseIf defaultValueMode = DEFAULT_ZERO Then
						m_loc.roll = 0
					End If
				End If
				
				Dim extaIndex As Integer = 1
				
				If myRobot(Robot.Selected-1).isTrackExist() Then
					If Not(strs(5+extaIndex) Is Nothing) Then
						extraTrack = CDbl(strs(5+extaIndex))
					ElseIf defaultValueMode = DEFAULT_ZERO Then
						extraTrack = 0
					End If
					extaIndex = extaIndex + 1
				End If
				
				If myRobot(Robot.Selected-1).isFlipExist() Then
					If Not(strs(5+extaIndex) Is Nothing) Then
						extraFlip = CDbl(strs(5+extaIndex))
					ElseIf defaultValueMode = DEFAULT_ZERO Then
						extraFlip = 0
					End If
					extaIndex = extaIndex + 1
				End If
				
			Else
			
				If myRobot(Robot.Selected-1).isStopTrajState() Then
					m_loc = Robot.WhereAngles
				Else
					m_loc = Robot.DestAngles
				End If
			
				length = strs.Length
				If length < myRobot(Robot.Selected-1).axisCount Then
					ReDim Preserve strs(myRobot(Robot.Selected-1).axisCount)
					For i = length To myRobot(Robot.Selected-1).axisCount-1
						strs(i) = Nothing
					Next i
				End If
				
				Dim strIndex As Integer
				Dim targetRobotArm As RobotArm
				
				If isAllZero(COORD_JOINT,strs) = True Then
					For i = 1 To myRobot(Robot.Selected-1).axisCount
						m_loc.Angle(i) = 0
					Next i
				Else
					For i = 1 To myRobot(Robot.Selected-1).axisCount
						targetRobotArm = Nothing
						If axisOrder And AXISDISPLAY_CENTERZERO Then
							targetRobotArm = myRobot(Robot.Selected-1).isArmAxis(i)
						End If
						
						If axisOrder And AxisOrder_Control Then
							strIndex = i
						ElseIf axisOrder And AxisOrder_TP Then
							strIndex = myRobot(Robot.Selected-1).controlToTPAxis(i)
						Else
							strIndex = myRobot(Robot.Selected-1).controlToDynaxAxis(i)
						End If
						
						If strIndex > 0 Then
							If Not(strs(strIndex-1) Is Nothing) Then
								If targetRobotArm Is Nothing Then
									m_loc.Angle(i) = CDbl(strs(strIndex-1))
								Else
									m_loc.Angle(i) = CDbl(strs(strIndex-1)) + targetRobotArm.armCenterDeg
								End If
							ElseIf defaultValueMode = DEFAULT_ZERO Then
								m_loc.Angle(i) = 0
							End If
						ElseIf defaultValueMode = DEFAULT_ZERO Then
							m_loc.Angle(i) = 0
						End If
					Next i
					
					'set Z Position
					If myRobot(Robot.Selected-1).zAxisCount > 1 Then
						i = myRobot(Robot.Selected-1).zIndexToAxis(1)
						If axisOrder And AxisOrder_Control Then
							strIndex = i
						ElseIf axisOrder And AxisOrder_TP Then
							strIndex = myRobot(Robot.Selected-1).controlToTPAxis(i)
						Else
							strIndex = myRobot(Robot.Selected-1).controlToDynaxAxis(i)
						End If
						
						If strIndex > 0 Then
							If Not(strs(strIndex-1) Is Nothing) Then
								setZposition(CDbl(strs(strIndex-1)))
							End If
						End If
					End If
				End If
			End If
		End Sub
		
		Public Sub setFromFullString(str As String)
			setFromFullString(str, AxisOrder_Control)
		End Sub
		
		'axisOrder is  AxisOrder_Control or AxisOrder_TP or AxisOrder_Dynax
		'Convert the comma seprated string to Location object
		'Format:<Type>,<Angles or XYZ (6)>,<ZWorld>,<ZClearance>,<Config>
		Public Sub setFromFullString(str As String, axisOrder As Integer)
			If str = "" Then
				throwError(ERR_NO_DATA)
			End If
			
			Dim strs() As String
			Dim i As Integer
			strs = str.Split(",")
			
			If CInt(strs(0)) = COORD_CARTESIAN Then	'Cartesian
				setFromLocation(LocationEx.getCurCartPos())
				
				If strs.Length < 10 Then
					MyConsole.writeLine(TimeStamp.CurrentTimeString() + "WrongPointData : " + str)
					ThrowError(ERR_INVALID_LOCATION_FORMAT)
				End If
				
				m_loc.XYZ(CDbl(strs(1)), CDbl(strs(2)), CDbl(strs(3)), _
				CDbl(strs(4)), CDbl(strs(5)), CDbl(strs(6)))
				
				'set Z Position
				If myRobot(Robot.Selected-1).zAxisCount > 1 Then
					setZposition(CDbl(strs(3)))
				End If
				
				Dim extaIndex As Integer = 1
				
				If myRobot(Robot.Selected-1).isTrackExist() Then
					If strs.Length < 10+extaIndex Then
						MyConsole.writeLine(TimeStamp.CurrentTimeString() + "WrongPointData : " + str)
						ThrowError(ERR_INVALID_LOCATION_FORMAT)
					End If
					
					extraTrack = CDbl(strs(6 + extaIndex))
					extaIndex = extaIndex + 1
				End If
				
				If myRobot(Robot.Selected-1).isFlipExist() Then
					If strs.Length < 10+extaIndex Then
						MyConsole.writeLine(TimeStamp.CurrentTimeString() + "WrongPointData : " + str)
						ThrowError(ERR_INVALID_LOCATION_FORMAT)
					End If
					
					extraFlip = CDbl(strs(6 + extaIndex))
					extaIndex = extaIndex + 1
				End If
				
				m_loc.ZWorld = CBool(strs(6 + extaIndex))
				m_loc.ZClearance = CDbl(strs(7 + extaIndex))
				m_loc.Config = CInt(strs(8 + extaIndex))
				
			Else
				setFromLocation(LocationEx.getCurJointPos())
				
				If strs.Length - 1 < myRobot(Robot.Selected-1).axisCount Then
					MyConsole.writeLine(TimeStamp.CurrentTimeString() + "WrongPointData : " + str)
					ThrowError(ERR_INVALID_LOCATION_FORMAT)
				End If
					
				For i = 1 To myRobot(Robot.Selected-1).axisCount
					If axisOrder And AxisOrder_Control Then
						m_loc.Angle(i) = CDbl(strs(i))
					ElseIf axisOrder And AxisOrder_TP Then
						m_loc.Angle(i) = CDbl(strs(myRobot(Robot.Selected-1).controlToTPAxis(i)))
					Else
						m_loc.Angle(i) = CDbl(strs(myRobot(Robot.Selected-1).controlToDynaxAxis(i)))
					End If
				Next
				
			End If

		End Sub
		
		Public Function toString() As String
			Return toString(AxisOrder_Control)
		End Function
		
		'axisOrder is  AxisOrder_Control or AxisOrder_TP or AxisOrder_Dynax
		Public Function toString(axisOrder As Integer) As String
			Dim res As String = ""
			Dim sep As String = ","
			Dim i As Integer
		
			If m_loc Is Nothing Then
				throwError(ERR_NO_DATA)
			End If
			
			If type = COORD_CARTESIAN Then
				
				res = FormatDoublePos(m_loc.X)
				res = res + sep + FormatDoublePos(m_loc.Y)
				res = res + sep + FormatDoublePos(getZposition()) 'FormatDoublePos(m_loc.Z)
				res = res + sep + FormatDoublePos(m_loc.yaw)
				res = res + sep + FormatDoublePos(m_loc.pitch)
				res = res + sep + FormatDoublePos(m_loc.roll)
				
				If myRobot(Robot.Selected-1).isTrackExist() Then
					res = res + sep + FormatDoublePos(extraTrack)
				End If
				
				If myRobot(Robot.Selected-1).isFlipExist() Then
					res = res + sep + FormatDoublePos(extraFlip)
				End If
				
			Else 'angle

				Dim itemIndex As Integer
				Dim maxItemCount As Integer
				If axisOrder And AxisOrder_Control Then
					maxItemCount = myRobot(Robot.Selected-1).axisCount
				ElseIf axisOrder And AxisOrder_TP Then
					maxItemCount = myRobot(Robot.Selected-1).tpAxisCount
				Else
					maxItemCount = myRobot(Robot.Selected-1).dynaxAxisCount
				End If
				Dim strs(maxItemCount) As String
				
				If isAllZero() = False Then
					Dim targetRobotArm As RobotArm
					For i = 1 To myRobot(Robot.Selected-1).axisCount
						targetRobotArm = Nothing
						If axisOrder And AXISDISPLAY_CENTERZERO Then
							targetRobotArm = myRobot(Robot.Selected-1).isArmAxis(i)
						End If
						
						If axisOrder And AxisOrder_Control Then
							itemIndex = i
						ElseIf axisOrder And AxisOrder_TP Then
							itemIndex = myRobot(Robot.Selected-1).controlToTPAxis(i)
						Else
							itemIndex = myRobot(Robot.Selected-1).controlToDynaxAxis(i)
						End If
						
						If itemIndex > 0 Then
							If (Not(axisOrder And AxisOrder_Control)) And (myRobot(Robot.Selected-1).zAxisCount > 1) And i = myRobot(Robot.Selected-1).zIndexToAxis(1) Then
								strs(itemIndex-1) = FormatDoublePos(getZPosition())
							Else
								If targetRobotArm Is Nothing Then
									strs(itemIndex-1) = FormatDoublePos(m_loc.Angle(i))
								Else
									strs(itemIndex-1) = FormatDoublePos(m_loc.Angle(i) - targetRobotArm.armCenterDeg)
								End If
							End If
						End If
					Next i
				End If
				
				For i = 0 To maxItemCount-1
					If i > 0 Then
						res = res + sep
					End If
					If strs(i) = "" Then
						res = res + FormatDoublePos(0)
					Else
						res = res + strs(i)
					End If
				Next i

			End If
			
			Return res
		End Function
	
		Public Function toFullString() As String
			Dim i As Integer
			Dim res As String = ""
			Dim sep As String = ","
			
			If m_loc Is Nothing Then
				throwError(ERR_NO_DATA)
			End If
			
			res = CStr(m_loc.Type)
			If m_loc.Type = COORD_CARTESIAN Then
				res = res + sep + CStr(m_loc.X)
				res = res + sep + CStr(m_loc.Y)
				res = res + sep + CStr(getZposition())
				res = res + sep + CStr(m_loc.Yaw)
				res = res + sep + CStr(m_loc.Pitch)
				res = res + sep + CStr(m_loc.Roll)
				
				If myRobot(Robot.Selected-1).isTrackExist() Then
					res = res + sep + CStr(extraTrack)
				End If
				
				If myRobot(Robot.Selected-1).isFlipExist() Then
					res = res + sep + CStr(extraFlip)
				End If
				
				res = res + sep + CStr(m_loc.ZWorld)
				res = res + sep + CStr(m_loc.ZClearance)
				res = res + sep + CStr(m_loc.Config)
				
			Else
			
				Dim itemIndex As Integer
				Dim maxItemCount As Integer
				maxItemCount = myRobot(Robot.Selected-1).axisCount
				Dim strs(maxItemCount) As String
				
				For i = 1 To myRobot(Robot.Selected-1).axisCount
					strs(i-1) = FormatDoublePos(m_loc.Angle(i))
				Next i
				
				For i = 0 To maxItemCount-1
					If strs(i) = "" Then
						res = res + sep + FormatDoublePos(0)
					Else
						res = res + sep + strs(i)
					End If
				Next i
			
			End If

			Return res
		End Function
		
		Public Sub setCurrentFixedPosition()
			setCurrentFixedPosition(True)
		End Sub
		
		Public Sub setCurrentFixedPosition(curPosWhenStop As Boolean)
			Dim curLoc As LocationEx
			If Type = COORD_CARTESIAN Then
				curLoc = LocationEx.GetDestCartPos(curPosWhenStop)
			Else
				curLoc = LocationEx.GetDestJointPos(curPosWhenStop)
			End If
			setFixedPosition(curLoc)
		End Sub
		
		Public Sub setFixedPosition(targetLoc As LocationEx)
			If targetLoc Is Nothing Then
				Exit Sub
			End If
			
			setZposition(targetLoc.getZposition())
			
			If myRobot(Robot.Selected-1).isTrackExist() Then
				If Type = COORD_CARTESIAN Then
					If targetLoc.type = COORD_CARTESIAN Then
						extraTrack = targetLoc.extraTrack
					Else
						extraTrack = targetLoc.loc.angle(myRobot(Robot.Selected-1).controlAxis("V"))
					End If
				Else
					If targetLoc.type = COORD_CARTESIAN Then
						m_loc.Angle(myRobot(Robot.Selected-1).controlAxis("V")) = targetLoc.extraTrack
					Else
						m_loc.Angle(myRobot(Robot.Selected-1).controlAxis("V")) = targetLoc.loc.angle(myRobot(Robot.Selected-1).controlAxis("V"))
					End If
				End If
			End If
			
			If myRobot(Robot.Selected-1).isFlipExist() Then
				If Type = COORD_CARTESIAN Then
					If targetLoc.type = COORD_CARTESIAN Then
						extraFlip = targetLoc.extraFlip
					Else
						extraFlip = targetLoc.loc.angle(myRobot(Robot.Selected-1).controlAxis("F"))
					End If
				Else
					If targetLoc.type = COORD_CARTESIAN Then
						m_loc.Angle(myRobot(Robot.Selected-1).controlAxis("F")) = targetLoc.extraFlip
					Else
						m_loc.Angle(myRobot(Robot.Selected-1).controlAxis("F")) = targetLoc.loc.angle(myRobot(Robot.Selected-1).controlAxis("F"))
					End If
				End If
			End If
		End Sub
		
		Public Sub setAllArmHomePosition()
			Dim robotArmList() As RobotArm
			myRobot(Robot.Selected-1).getAllArmList(robotArmList)
			setArmHomePosition(robotArmList)
		End Sub
		
		Public Sub setArmHomePosition(arm As RobotArm)
			Dim armList(1) As RobotArm
			armList(0) = arm
			setArmHomePosition(armList)
		End Sub
		
		Public Sub setArmHomePosition(armList() As RobotArm)
			Dim i As Integer
			Dim j As Integer
			
			If armList.getUpperBound(0) < 1 Then
				Exit Sub
			End If
			
			If m_loc.type = COORD_CARTESIAN Then
				Exit Sub
			End If
			
			Dim homeLoc As LocationEx = myRobot(Robot.Selected-1).thePointDataManager.getLocation(HOME_POINT_INDEX)
			If homeLoc Is Nothing Then
				Exit Sub
			End If
			
			Dim sumOfCustomIndex As Integer = 0
			For i = 0 To armList.GetUpperBound(0) - 1
				sumOfCustomIndex = sumOfCustomIndex + Math.Pow(2,armList(i).armIndex-1)
			Next i
			Dim otherArmList() As RobotArm
			myRobot(Robot.Selected-1).getOtherArmList(otherArmList,armList)
			
			For i = 0 To armList.getUpperBound(0) - 1
				m_loc.angle(armList(i).controlAxis) = homeLoc.loc.angle(armList(i).controlAxis)
				If armList(i).elbowControlAxis <> 0 Then
					For j = 0 To otherArmList.getUpperBound(0) - 1
						If armList(i).elbowControlAxis = otherArmList(j).elbowControlAxis Then
							Exit For
						ElseIf j = otherArmList.getUpperBound(0) - 1 Then
							m_loc.angle(armList(i).elbowControlAxis) = homeLoc.loc.angle(armList(i).elbowControlAxis)
						End If
					Next j
				End If
			Next i
		End Sub
		
		Public Sub setZposition(zPosition As Double)
			If Type = COORD_CARTESIAN Then
				If myRobot(Robot.Selected-1).zAxisCount = 2 Then
					m_loc.Z = zPosition / 2
					extraZ2 = zPosition / 2
				Else
					m_loc.Z = zPosition
				End If
			Else
				Dim i As Integer
				Dim zCount As Integer = myRobot(Robot.Selected-1).zAxisCount
				For i = 1 To zCount
					m_loc.Angle(myRobot(Robot.Selected-1).zIndexToAxis(i)) = zPosition / zCount
				Next i
			End If
		End Sub
		
		Public Function getZposition(zIndex As Integer) As Double
			If Type = COORD_CARTESIAN Then
				If zIndex = 1 Then
					Return m_loc.Z
				ElseIf zIndex = 2 Then
					Return extraZ2
				Else
					ThrowError(ERR_INVALID_COORDINATE_TYPE)
				End If
			Else
				Return m_loc.Angle(myRobot(Robot.Selected-1).zIndexToAxis(zIndex))
			End If
		End Function
		
		Public Function getZposition() As Double
			If Type = COORD_CARTESIAN Then
				If myRobot(Robot.Selected-1).zAxisCount > 1 Then
					Return m_loc.Z + extraZ2
				Else
					Return m_loc.Z
				End If
			Else
				Dim i As Integer
				Dim zCount As Integer = myRobot(Robot.Selected-1).zAxisCount
				Dim result As Double = 0
				For i = 1 To zCount
					result = result + m_loc.Angle(myRobot(Robot.Selected-1).zIndexToAxis(i))
				Next i
				Return result
			End If
		End Function
		
		Public Sub liftUp(distance As Double)
			If distance = 0 Then
				Exit Sub
			End If
			setZposition(getZposition() + distance)
		End Sub
		
		Public Sub liftDown(distance As Double)
			liftUp(distance * -1)
		End Sub
		
		Public Sub liftFront(ByRef arm As RobotArm, distance As Double)
			liftFront(arm, distance, Nothing, myRobot(Robot.Selected-1).linkLength)
		End Sub
		
		Public Sub liftFront(ByRef arm As RobotArm, distance As Double, fromLoc As LocationEx)
			liftFront(arm,distance,fromLoc,myRobot(Robot.Selected-1).linkLength)
		End Sub
		
		Public Sub liftFront(ByRef arm As RobotArm, distance As Double, fromLoc As LocationEx, linkLength As Double)
			If distance = 0 Then
				Exit Sub
			End If
			
			Dim kinematicType As Integer = CInt(thePDBManager.getPDB(PDB_ROBOT_TYPE))
			
			If loc.Type = COORD_CARTESIAN Then
				If kinematicType = 1 Then 
					throwError(ERR_INVALID_COORDINATE_TYPE)
				End If
			Else
				If myRobot(Robot.Selected-1).robotType = WTR_TYPE Or myRobot(Robot.Selected-1).robotType = FTR_TYPE Then
				Else
					throwError(ERR_INVALID_COORDINATE_TYPE)
				End If
			End If
			
			Dim toLoc As LocationEx
			toLoc = Me.clone()
			
			If toLoc.Type = COORD_CARTESIAN Then
				Dim dx As Double
				Dim dy As Double
				If fromLoc Is Nothing Then
					dx = Math.cos(toLoc.loc.Yaw * Math.PI/180)
					dy = Math.sin(toLoc.loc.Yaw * Math.PI/180)
				Else
					Dim startLoc As Location
					If fromLoc.Type = COORD_CARTESIAN Then
						startLoc = fromLoc.loc
					Else
						startLoc = fromLoc.loc.Kinesol
					End If
					dx = toLoc.loc.X - startLoc.X
					dy = toLoc.loc.Y - startLoc.Y
					Dim length As Double = Math.Sqrt(dx*dx+dy*dy)
					dx = dx / length
					dy = dy / length
				End If
				toLoc.loc.X = toLoc.loc.X + dx * distance
				toLoc.loc.Y = toLoc.loc.Y + dy * distance
			Else
				If fromLoc Is Nothing Then
					Dim deg As Double
					Dim nowDistance As Double
					Dim targetDistance As Double
					Dim armAxis As Integer = arm.controlAxis
					
					If linkLength = 0 Then
						toLoc.loc.Angle(armAxis) = loc.Angle(armAxis) + distance
					Else
						nowDistance = Math.Sin((loc.Angle(armAxis) - arm.armCenterDeg) * Math.PI / 180) * linkLength
						targetDistance = nowDistance + (distance / 2)
						deg = (Math.Asin(targetDistance / linkLength) * 180 / Math.PI) + arm.armCenterDeg
						toLoc.loc.Angle(armAxis) = deg
					End If
				Else
					throwError(ERR_INVALID_COORDINATE_TYPE)
				End If
			End If
				
			setFromLocation(toLoc)
		End Sub
		
		Public Sub liftBack(ByRef arm As RobotArm, distance As Double, fromLoc As LocationEx, linkLength As Double)
			liftFront(arm, distance * -1, fromLoc, linkLength)
		End Sub
		
		Public Sub liftBack(ByRef arm As RobotArm, distance As Double, fromLoc As LocationEx)
			liftFront(arm, distance * -1, fromLoc, myRobot(Robot.Selected-1).linkLength)
		End Sub
		
		Public Sub liftBack(ByRef arm As RobotArm, distance As Double)
			liftFront(arm, distance * -1, Nothing, myRobot(Robot.Selected-1).linkLength)
		End Sub
		
		Public Function distance(refLoc As LocationEx) As Double
			Dim result As Double
			If CInt(thePDBManager.getPDB(PDB_ROBOT_TYPE)) = 1 Then 'joint only
				throwError(ERR_INVALID_COORDINATE_TYPE)
			Else
				Dim p1 As LocationEx
				Dim p2 As LocationEx
				If type = COORD_JOINT Then
					p1 = kinesol()
				Else
					p1 = clone()
				End If
				If refLoc.type = COORD_JOINT Then
					p2 = refLoc.kinesol()
				Else
					p2 = refLoc
				End If
				result = Math.Pow(p1.loc.x - p2.loc.x, 2) + Math.Pow(p1.loc.y - p2.loc.y, 2)
				If myRobot(Robot.Selected-1).isTrackExist() Then
					result = result + Math.Pow(p1.extra("V") - p2.extra("V"), 2)
				End If
				Return Math.Sqrt(result)
			End If
		End Function
		
	End Class
	
End Module
'Created: 1/10/2013 1:31:16 PM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module MovePause
	
	Public Class MoveEx
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim commandMutex As New Mutex
		Private Dim pauseMutex As New Mutex
		Private Dim targetLocation(MAX_ROBOT_COUNT) As LocationEx
		Private Dim movePf(MAX_ROBOT_COUNT) As ProfileEx
		Private Dim pauseFlag(MAX_ROBOT_COUNT) As Boolean
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New()
			Dim i As Integer
			For i = 0 To MAX_ROBOT_COUNT-1
				targetLocation(i) = Nothing
				movePf(i) = Nothing
				pauseFlag(i) = False
			Next i
		End Sub
		
		Public Sub OneAxis(axis As Integer, axis_position As Double, relative_flag As Boolean, profile_1 As ProfileEx)
		'Use Joint Only	
			Dim ex As Exception
			Dim i As Integer
			
			While pauseFlag(Robot.Selected-1) = True
				Thread.Sleep(10)
			End While

			Try	
				commandMutex.lock()
				movePf(Robot.Selected-1) = profile_1.clone	
				
				Move.OneAxis(axis, axis_position, relative_flag, profile_1.pf)
				'ReDim targetLocation(Robot.Selected-1)
				targetLocation(Robot.Selected-1) = New LocationEx
				targetLocation(Robot.Selected-1).loc = Robot.DestAngles(Robot.Selected).clone
			Catch ex
				If ex.ErrorCode = -1012 Then 
					Dim curLoc As LocationEx = LocationEx.GetDestJointPos()
					Dim min As Double
					Dim max As Double
					For i = 1 To myRobot(Robot.Selected-1).axisCount
						min = CDbl(thePDBManager.getPDB(PDB_MIN_SOFT_LIMIT,i))
						max = CDbl(thePDBManager.getPDB(PDB_MAX_SOFT_LIMIT,i))
						If min - 0.2 > curLoc.loc.angle(i) Or curLoc.loc.angle(i) > max + 0.2 Then
							'current position large scale out. Then throw error
							Throw ex
						End If
					Next i
					
					If ShowCommandLogToConsole = True Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot" + CStr(Robot.Selected) + " Try excapeFromSoftLimitUseJog")
					End If
					
					'current position small scale out. Then move retry
					theJogManager.excapeFromSoftLimitUseJog(False)
					
					'clear error
					errorHandler.clearError()
					ex = Nothing
					
					'If target position is out of softlimit. error again
					Move.OneAxis(axis, axis_position, relative_flag, profile_1.pf)
					targetLocation(Robot.Selected-1) = New LocationEx
					targetLocation(Robot.Selected-1).loc = Robot.DestAngles(Robot.Selected).clone
					
				Else
					Throw ex
				End If
			Finally
				commandMutex.unLock()
			End Try
		
		End Sub
		
		Public Sub loc(moveLocation As LocationEx, pf As ProfileEx)
			Dim ex As Exception
			Dim i As Integer
			
			If moveLocation Is Nothing Then
				Exit Sub
			End If
			
			While pauseFlag(Robot.Selected-1) = True
				Thread.Sleep(10)
			End While

			Try
				commandMutex.lock()
				
				targetLocation(Robot.Selected-1) = moveLocation.clone
				movePf(Robot.Selected-1) = pf.clone
			
				If ShowCommandLogToConsole = True Then
					If targetLocation(Robot.Selected-1).type = COORD_CARTESIAN Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot" + CStr(Robot.Selected) + " MoveTo " + targetLocation(Robot.Selected-1).toString() + " (config:" + CStr(targetLocation(Robot.Selected-1).loc.config) + ")")
					Else
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot" + CStr(Robot.Selected) + " MoveTo " + targetLocation(Robot.Selected-1).toString())
					End If
				End If
				
				If targetLocation(Robot.Selected-1).type = COORD_CARTESIAN And myRobot(Robot.Selected-1).zAxisCount > 1 Then
					Dim axtraPosition(3) As Double
					Dim extraPositionCount As Integer = 0
					If myRobot(Robot.Selected-1).robotType = WTR_TYPE Or myRobot(Robot.Selected-1).robotType = SCARA_TYPE Then
						If myRobot(Robot.Selected-1).armCount >= 2 Then
							Dim selectedArmIndex As Integer = myRobot(Robot.Selected-1).getSelectedArmIndex()
							Dim selectedArmlist() As RobotArm
							myRobot(Robot.Selected-1).armSelectIndexToArmList(selectedArmIndex,selectedArmlist)
							If selectedArmlist.getUpperBound(0) < myRobot(Robot.Selected-1).armCount Then
								Dim unSelectedArmlist() As RobotArm
								myRobot(Robot.Selected-1).getOtherArmList(unSelectedArmlist,selectedArmlist)
								For i = 0 To unSelectedArmlist.getUpperBound(0)-1
									Dim curMotorLoc As LocationEx = LocationEx.GetDestJointPos()
									axtraPosition(extraPositionCount) = curMotorLoc.loc.Angle(unSelectedArmlist(i).controlAxis)
									extraPositionCount = extraPositionCount + 1
								Next i
							End If
						End If
						For i = 1 To myRobot(Robot.Selected-1).extraAxisCount
							axtraPosition(extraPositionCount) = targetLocation(Robot.Selected-1).extra(myRobot(Robot.Selected-1).robotExtraAxisName(i))
							extraPositionCount = extraPositionCount + 1
						Next i
					End If
					

					
					If extraPositionCount = 1 Then
						Move.Extra(axtraPosition(0))
					ElseIf extraPositionCount = 2 Then
						Move.Extra(axtraPosition(0),axtraPosition(1))
					ElseIf extraPositionCount = 3 Then
						Move.Extra(axtraPosition(0),axtraPosition(1),axtraPosition(2))
					End If					
				End If
				
				Move.Loc(targetLocation(Robot.Selected-1).loc,movePf(Robot.Selected-1).pf)

			Catch ex
				If ex.ErrorCode = -1012 Then
					
					Dim curLoc As LocationEx = LocationEx.GetDestJointPos()
					Dim min As Double
					Dim max As Double
					For i = 1 To myRobot(Robot.Selected-1).axisCount
						min = CDbl(thePDBManager.getPDB(PDB_MIN_SOFT_LIMIT,i))
						max = CDbl(thePDBManager.getPDB(PDB_MAX_SOFT_LIMIT,i))
						If min - 0.2 > curLoc.loc.angle(i) Or curLoc.loc.angle(i) > max + 0.2 Then
							'current position large scale out. Then throw error
							Throw ex
						End If
					Next i
					
					If ShowCommandLogToConsole = True Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot" + CStr(Robot.Selected) + " Try excapeFromSoftLimitUseJog")
					End If
					
					'current position small scale out. Then move retry
					theJogManager.excapeFromSoftLimitUseJog(False)
					
					'clear error
					errorHandler.clearError()
					ex = Nothing
					
					'If target position is out of softlimit. error again
					Move.Loc(targetLocation(Robot.Selected-1).loc,movePf(Robot.Selected-1).pf)
				Else
					Throw ex
				End If
			Finally
				commandMutex.unLock()
			End Try
		End Sub
		
		Public Sub pause(flag As Boolean)
			If pauseFlag(Robot.Selected-1) <> flag Then
				pauseMutex.lock()
				pauseFlag(Robot.Selected-1) = flag
				If flag = True Then
					Robot.RapidDecel(Robot.Selected)
					commandMutex.lock()
					Robot.RapidDecel(Robot.Selected) 'when doing force overlap, it need to stop again.
					commandMutex.unLock()
					
					While Robot.TrajState(Robot.Selected, 0) <> 1 'wait until robot stop
						Thread.Sleep(100)
					End While
					
					If ShowCommandLogToConsole = True Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot Pause")
					End If
				Else
					If ShowCommandLogToConsole = True Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot Resume")
					End If
				End If
				Thread.Sleep(100)
				pauseMutex.unLock()
			End If
		End Sub

		Public Sub moveStop()
			Dim currentPause As Boolean = pauseFlag(Robot.Selected-1)
			
			If currentPause = True Then
				pauseMutex.lock()
				pauseFlag(Robot.Selected-1) = False
			End If
			
			'Robot.RapidDecel(Robot.Selected)
			Controller.SoftEStop = True
			If ShowCommandLogToConsole = True Then
				MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot SoftEStop")
			End If
			
			targetLocation(Robot.Selected-1) = Nothing
			
			If currentPause = True Then
				pauseMutex.unLock()
			End If
		End Sub
		
		Public Sub waitForEOM()
			Dim ex As Exception
			While True
				Try
					Move.WaitForEOM
				Catch ex
					pauseFlag(Robot.Selected-1) = False
					Throw ex
				End Try
				
				If pauseFlag(Robot.Selected-1) = True Then
					' If pause is setted, wait will stopped. so it need reMove when pause cleared
					While (pauseFlag(Robot.Selected-1) = True)
						Thread.Sleep(10)
					End While
					loc(targetLocation(Robot.Selected-1),movePf(Robot.Selected-1))
				Else
					Exit While
				End If
			End While
			If ShowCommandLogToConsole = True Then
				MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Move Complete")
			End If
		End Sub
		
		Public Sub waitForAlmostEOM()
			Dim ex As Exception
			Dim trajState As Integer = -1
			While True
				Try
					While True
						If trajState <> Robot.TrajState(Robot.Selected, 0) Then
							trajState = Robot.TrajState(Robot.Selected, 0)
							'MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " trajState=" + CStr(trajState))
						End If
						If trajState = 1 Or trajState = 5 Then
							Exit While
						Else
							Thread.Sleep(10)
						End If
					End While
					
					If Controller.SoftEStop = True Then
						Move.WaitForEOM
					End If
					
				Catch ex
					pauseFlag(Robot.Selected-1) = False
					Throw ex
				End Try
				
				If pauseFlag(Robot.Selected-1) = True Then
					' If pause is setted, wait will stopped. so it need reMove when pause cleared
					While (pauseFlag(Robot.Selected-1) = True)
						Thread.Sleep(10)
					End While
					loc(targetLocation(Robot.Selected-1),movePf(Robot.Selected-1))
				Else
					Exit While
				End If
			End While
			If ShowCommandLogToConsole = True Then
				MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Move Almost Complete")
			End If
		End Sub
		
		Public Sub waitForAcceleratingUp(maxWaitPercent As Integer)
			Dim ex As Exception
			Dim trajState As Integer = -1
			Dim tFactor As Integer = -1
			While True
				Try
					While True
						If trajState <> Robot.TrajState(Robot.Selected, 0) Then
							trajState = Robot.TrajState(Robot.Selected, 0)
							'MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " trajState=" + CStr(trajState))
						End If
						If trajState = 1 Or trajState = 2 Then
							Exit While
						End If
						If tFactor <> CInt(Robot.TrajState(Robot.Selected, 6) * 10) Then
							tFactor = CInt(Robot.TrajState(Robot.Selected, 6) * 10)
							'MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " tFactor=" + CStr(tFactor))
						End If
						'when blending, accel traj 2 was not occured...
						If (trajState = 4 Or trajState = 6) And (CDbl(maxWaitPercent) / 100) <= Robot.TrajState(Robot.Selected, 6) Then
							Exit While
						End If
						Thread.Sleep(10)
					End While
					
				Catch ex
					pauseFlag(Robot.Selected-1) = False
					Throw ex
				End Try
				
				If pauseFlag(Robot.Selected-1) = True Then
					' If pause is setted, wait will stopped. so it need reMove when pause cleared
					While (pauseFlag(Robot.Selected-1) = True)
						Thread.Sleep(10)
					End While
					loc(targetLocation(Robot.Selected-1),movePf(Robot.Selected-1))
				Else
					Exit While
				End If
			End While
		End Sub

		Public Sub wait()
			If ContinuousMotionMode = False Then
				waitForEOM()
			Else
				waitForAlmostEOM()
			End If
		End Sub

		Public Sub motionOverlap(percent As Integer)
			If ContinuousMotionMode = False Then
				waitForEOM()
			Else
				Move.ForceOverlap(0,percent)
			End If
		End Sub
		
		Public Sub motionOverlap(mode As Integer, value As Integer)
			If ContinuousMotionMode = False Then
				waitForEOM()
			Else
				Move.ForceOverlap(mode,value)
			End If
		End Sub

		Public Sub forceOverlap(percent As Integer)
			Move.ForceOverlap(0,percent)
		End Sub
		
		Public Sub forceOverlap(mode As Integer, value As Integer)
			Move.ForceOverlap(mode,value)
		End Sub
		
	End Class
	
End Module
'Created: 7/2/2013 9:30:20 AM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module MutexModule

    Public Class Mutex
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim lock_var As Integer
		
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub lock()
			Dim waitingCount As Integer = 1
		    While Thread.TestAndSet(lock_var, 1) <> 0
		        Thread.Sleep(0)
				waitingCount = waitingCount + 1
				If waitingCount = 1000 Then
					If ShowCommandLogToConsole = True Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Handler" + CStr(Thread.CurrentThread.Argument) + " Mutex waiting...")
					End If
				End If
		    End While
			
			If waitingCount > 1000 Then
				If ShowCommandLogToConsole = True Then
					MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Handler" + CStr(Thread.CurrentThread.Argument) + " Mutex lock complete")
				End If
			End If
		End Sub
		    
		Public Sub unlock()
		    lock_var = 0
		End Sub
		
		Public Function isLocked() As Boolean
			If lock_var <> 0 Then
				Return True
			Else
				Return False
			End If
		End Function
		
    End Class
End Module
'Created: 7/2/2013 9:30:20 AM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module MyLibModule

	Private Dim StrTokTargetString As String = Nothing
	
	Public Function StrTok(seq As String) As String
		Dim result As String
		
		Dim posIndex As Integer = StrTokTargetString.IndexOf(seq)
		If posIndex = -1 Then
			If StrTokTargetString Is Nothing Then
				Return Nothing
			Else
				result = StrTokTargetString
				StrTokTargetString = Nothing
			End If
		Else
			result = Mid(StrTokTargetString,1,posIndex)
			StrTokTargetString = StrTokTargetString.Substring(posIndex+1)
		End If
		
		Return result
	End Function
	
	Public Function StrTok(str As String,seq As String) As String
		StrTokTargetString = str
		Return StrTok(seq)
	End Function
	
	Public Function isSignalTriger(ByRef prevSignalMember As Boolean,nowSignal As Boolean) As Boolean
		If prevSignalMember = False And nowSignal = True Then
			prevSignalMember = nowSignal
			Return True
		Else
			prevSignalMember = nowSignal
			Return False
		End If
	End Function
	
	Public Function readSignalShort(startAddress As Integer) As Short
		Return FromBitString(Chr(Signal.DIO(startAddress,8)) & Chr(Signal.DIO(startAddress+8,8)), Short, False)
	End Function
	
	Public Function readSignalSingle(startAddress As Integer) As Single
		Return FromBitString(Chr(Signal.DIO(startAddress,8)) & Chr(Signal.DIO(startAddress+8,8)) & Chr(Signal.DIO(startAddress+16,8)) & Chr(Signal.DIO(startAddress+24,8)), Single, False)
	End Function
	
	Public Sub writeSignalShort(startAddress As Integer, value As Short)
		Dim stg As String = ToBitString(value, Short, False)
		Signal.DIO(startAddress,8) = Asc(stg.Substring(0,1))
		Signal.DIO(startAddress+8,8) = Asc(stg.Substring(1,1))
	End Sub
	
	Public Sub writeSignalSingle(startAddress As Integer, value As Single)
		Dim stg As String = ToBitString(value, Single, False)
		Signal.DIO(startAddress,8) = Asc(stg.Substring(0,1))
		Signal.DIO(startAddress+8,8) = Asc(stg.Substring(1,1))
		Signal.DIO(startAddress+16,8) = Asc(stg.Substring(2,1))
		Signal.DIO(startAddress+24,8) = Asc(stg.Substring(3,1))
	End Sub
	
End Module


'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module ProfileExModule

	Public Class ProfileEx
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private m_pf As Profile
		Public Property pf As Profile
	        Set (value As Profile)
	           m_pf = value.Clone
	        End Set
	        Get 
	            Return m_pf
	        End Get
	    End Property
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(str As String)
			setFromString(str)
		End Sub
		
		Public Sub New(src As ProfileEx)
			m_pf = src.pf.clone
		End Sub
		
		Public Sub New(pf As Profile)
			m_pf = pf.clone
		End Sub
		
		Public Function clone() As ProfileEx
			Dim result As New ProfileEx(Me)
			Return result
		End Function
		
		'Convert the comma seprated string to Profile object
		'Format:<Speed>,<Speed2(not used)>,<Accel>,<Decel>,<AccelRamp>,<DecelRamp>,<Straight>,<InRange>
		Public Sub setFromString(str As String)
			Dim strs() As String
			strs = str.Split(",")
			
			If strs.Length = 8 Then
				m_pf = New Profile
				m_pf.Speed = CDbl(strs(0))
				m_pf.Speed2 = CDbl(strs(1))
				m_pf.Accel = 100 'CDbl(strs(2))
				m_pf.Decel = 100 'CDbl(strs(3))
				m_pf.AccelRamp = CDbl(strs(4))
				m_pf.DecelRamp = CDbl(strs(5))
				m_pf.Straight = CBool(strs(6))
				m_pf.InRange = CDbl(strs(7))
			Else
				ThrowError(ERR_INVALID_PROFILE_FORMAT)
			End If
				
		End Sub
		
		Public Function toString() As String
			Dim str As String = ""
			Dim sep As String = ","
			
			If m_pf Is Nothing Then
				throwError(ERR_NO_DATA)
			End If
			
			str = CStr(m_pf.Speed)
			str = str + sep + CStr(m_pf.Speed2)
			str = str + sep + CStr(m_pf.Accel)
			str = str + sep + CStr(m_pf.Decel)
			str = str + sep + CStr(m_pf.AccelRamp)
			str = str + sep + CStr(m_pf.DecelRamp)
			str = str + sep + CStr(m_pf.Straight)
			str = str + sep + CStr(m_pf.InRange)
			
			Return str
		End Function
	End Class

End Module
'Created: 1/2/2014 4:28:05 PM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module TimeStampModule
    Public Class TimeStamp
	
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SHARED ''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Shared Public Function CurrentTimeString() As String
			Dim timeString As String
			Dim tempStrs() As String
			
			timeString = FormatDouble(Controller.Timer)
			tempStrs = timeString.split(".")
			timeString = Controller.PDB(121) + "." + tempStrs(1)
			Return timeString
		End Function
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private m_startTime As Double = 0
		
		

		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub startTimer()
			m_startTime = Controller.Timer
		End Sub
		
		Public Sub resetTimer()
			m_startTime = 0
		End Sub
		
		Public Function elapsedTime() As Double 'ms
			If m_startTime = 0 Then
				Return 0
			Else
				Return (Controller.Timer - m_startTime)*1000
			End If
		End Function
		
		Public Sub assertTimeDelay(delay_ms As Double)
			Dim remainWaitDelay As Double = delay_ms - elapsedTime()
			If remainWaitDelay > 0 Then
				Thread.Sleep(CInt(remainWaitDelay))
			End If
		End Sub
		
    End Class 
	
	
	Public Class MotionTimeStamp
	
				
		Public Dim  MoveGetReadyTime As Double = 0
		Public Dim  MovePutReadyTime As Double = 0
		Public Dim  GetArmExtendTime As Double = 0
		Public Dim  PutArmExtendTime As Double = 0
		Public Dim  GetZUpDownTime As Double = 0
		Public Dim  PutZUpDownTime As Double = 0
		Public Dim  GetRetractTime As Double = 0
		Public Dim  PutRetractTime As Double = 0
		Public Dim  Grip As Double = 0
		Public Dim  UnGrip As Double = 0
		
		Private m_MotionStartTime As Double = 0
				
		Public Sub MtionStartTimer()
			m_MotionStartTime = Controller.Timer
		End Sub
		
		
		Public MotionSequence As String				
		Public Sub MtionSequence(cmd As String)
			MotionSequence = cmd
		End Sub
		
		Public Sub MotionResetTimer()
			m_MotionStartTime = 0
			MoveGetReadyTime= 0
			MovePutReadyTime= 0
			GetArmExtendTime= 0
			PutArmExtendTime= 0
			GetZUpDownTime= 0
			PutZUpDownTime= 0
			GetRetractTime= 0
			PutRetractTime= 0
			Grip= 0
			UnGrip= 0
			MotionSequence=""
		End Sub
		
		
		Public Sub test()

			MoveGetReadyTime= 2
			MovePutReadyTime= 3
			GetArmExtendTime= 4
			PutArmExtendTime= 5
			GetZUpDownTime= 6
			PutZUpDownTime= 7
			GetRetractTime= 8
			PutRetractTime= 9
			Grip= 10
			UnGrip= 11
		End Sub
		
		Public Function MotionElapsedTime(cmd As String)As Double 'ms
			If protocolHandler.useMotionTimer = False Then
				Exit Function
			End If
			Select cmd
				Case "GetReady"
					MoveGetReadyTime =Format((Controller.Timer - m_MotionStartTime),".###")
					Console.WriteLine("GetReady : " &CStr(MoveGetReadyTime))
					Return MoveGetReadyTime
				Case "PutReady"
					MovePutReadyTime =Format((Controller.Timer - m_MotionStartTime),".###")
					Console.WriteLine("PutReady : " &CStr(MovePutReadyTime))
					Return MovePutReadyTime
				Case "GetArmExtend"	
					GetArmExtendTime=Format((Controller.Timer - m_MotionStartTime),".###")
					Console.WriteLine("GetArmExtend : " &CStr(GetArmExtendTime))
					Return GetArmExtendTime
				Case "PutArmExtend"	
					PutArmExtendTime=Format((Controller.Timer - m_MotionStartTime),".###")
					Console.WriteLine("PutArmExtend : " &CStr(PutArmExtendTime))
					Return PutArmExtendTime
				Case "PutDown"	
					PutZUpDownTime=Format((Controller.Timer - m_MotionStartTime),".###")
					Console.WriteLine("PutDown : " &CStr(PutZUpDownTime))
					Return PutZUpDownTime
				Case "GetUp"	
					GetZUpDownTime=Format((Controller.Timer - m_MotionStartTime),".###")
					Console.WriteLine("GetUp : " &CStr(GetZUpDownTime))
					Return GetZUpDownTime
					
				Case "GetRetract"	
					GetRetractTime=Format((Controller.Timer - m_MotionStartTime),".###")
					Console.WriteLine("GetRetract : " &CStr(GetRetractTime))
					Return GetRetractTime
				Case "PutRetract"	
					PutRetractTime=Format((Controller.Timer - m_MotionStartTime),".###")
					Console.WriteLine("PutRetract : " &CStr(PutRetractTime))
					Return PutRetractTime
					
				Case "Grip"	
					Grip=Format((Controller.Timer - m_MotionStartTime),".###")
					Console.WriteLine("Grip : " &CStr(Grip))
					Return Grip
				Case "Ungrip"	
					UnGrip=Format((Controller.Timer - m_MotionStartTime),".###")
					Console.WriteLine("Ungrip : " &CStr(UnGrip))
					Return UnGrip
			End Select
			
		End Function
		
		
		Public Sub ElapsedTimeSet(cmd As String, ByRef ReCmd As Response)
			If protocolHandler.useMotionTimer = False Then
				Exit Sub
			Else
				If cmd = "" Then
					ThrowError(ERR_INVALID_DATA)
				End If
			End If
			Select cmd
				Case "GET"
					ReCmd.args(0) = CStr(MoveGetReadyTime)
					ReCmd.args(1) = CStr(GetArmExtendTime)
					ReCmd.args(2) = CStr(Grip)
					ReCmd.args(3) = CStr(GetZUpDownTime)
					ReCmd.args(4) = CStr(GetRetractTime)
					Console.WriteLine(" Get Total time: " &CStr(MoveGetReadyTime+GetArmExtendTime+Grip+GetZUpDownTime+GetRetractTime))
				Case "PUT"	
					ReCmd.args(0) = CStr(MovePutReadyTime)
					ReCmd.args(1) = CStr(PutArmExtendTime)
					ReCmd.args(2) = CStr(Ungrip)
					ReCmd.args(3) = CStr(PutZUpDownTime)					
					ReCmd.args(4) = CStr(PutRetractTime)
					Console.WriteLine(" Get Total time: " &CStr(MovePutReadyTime+PutArmExtendTime+Ungrip+PutZUpDownTime+PutRetractTime))
				Case "CRO"
					ReCmd.args(0) = CStr(MoveGetReadyTime)
					ReCmd.args(1) = CStr(GetArmExtendTime)
					ReCmd.args(2) = CStr(Grip)
					ReCmd.args(3) = CStr(GetZUpDownTime)		
					ReCmd.args(4) = CStr(PutArmExtendTime)
					ReCmd.args(5) = CStr(Ungrip)
					ReCmd.args(6) = CStr(PutZUpDownTime)					
					ReCmd.args(7) = CStr(PutRetractTime)
					Dim tatalCro As Double
					tatalCro = MoveGetReadyTime+GetArmExtendTime+Grip+GetZUpDownTime+GetRetractTime+MovePutReadyTime+PutArmExtendTime+Ungrip+PutZUpDownTime+PutRetractTime
					Console.WriteLine(" Get Total time: " &CStr(tatalCro))
			End Select
			
		End Sub
		
	End Class
		
	

	
End Module
'Created: 3/12/2014 10:08:56 AM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module MyConsoleModule
    Public Class MyConsole
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''' SHARED ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Shared Private Dim logWriteMutex As New Mutex
		
		Shared Public Const LOG_PORT As Integer = 1400
		Shared Public Const BEFORE_LOG_MAX_COUNT As Integer = 5000
		
		Shared Public Dim logSocket As Socket = Nothing
		Shared Public Dim isConnected As Boolean = False
		
		Shared Public Sub LogSocketStart()
			LogSocketConnectThread.start
		End Sub
		
		Shared Public Sub LogSocketConnectThreadFunction()			
			Dim m_IPEndPoint As New IPEndPoint("", LOG_PORT)
			Dim m_TcpListener As New TcpListener(m_IPEndPoint)
			Dim m_socket As Socket
			
			Dim ex As Exception
			Dim ret As Integer
			Dim buf As String
			
			While True
				m_TcpListener.Start
			
				While Not m_TcpListener.Pending()
					Thread.Sleep(100)
				End While
				
				MyConsole.isConnected = True
				MyConsole.logSocket = m_TcpListener.AcceptSocket
				m_socket = MyConsole.logSocket
				
				m_Socket.KeepAlive = True
				m_Socket.ReceiveTimeout = 0
				
				m_TcpListener.Stop
				m_TcpListener.Close
				
				WriteLine("== Log Socket Connected ==")
				
				While True
					Try
						ret = m_Socket.Receive(buf,2000)
						If ret = 0 And m_TcpListener.Pending()= False Then
							ret = -2
							Exit Try
						End If
	
					Catch ex
						If ex.ErrorCode = -1705 Then 'time out
						Else
							errorHandler.handleError(ex)
							Console.WriteLine(TimeStamp.CurrentTimeString() + " : logSocketConnectThread ERROR (" + CStr(GetErrorCode(ex)) + ") " + ex.Message)
						End If
						ex = Nothing
					End Try
					
					If ret = -2 Then 'socket is closed
						m_Socket.Close
						MyConsole.isConnected = False
						MyConsole.logSocket = Nothing
				
						WriteLine("== Log Socket Disconnected ==")
						Exit While
					End If
					
					Thread.Sleep(10)
				End While
				
			End While
		End Sub
		
		Shared Public Sub Write(str As String)
			Dim ex As Exception
			
			If ShowCommandLogToConsole = True Then
				Console.Write(str)
			End If
			
			logWriteMutex.lock()
			beforeLogStr(beforeLogStr_EndIndex) = str
			If BufferFullCount<BEFORE_LOG_MAX_COUNT Then BufferFullCount+=1
			beforeLogStr_EndIndex = beforeLogStr_EndIndex + 1
			If BEFORE_LOG_MAX_COUNT <= beforeLogStr_EndIndex Then
				beforeLogStr_EndIndex = 0
			End If
			If beforeLogStr_EndIndex = beforeLogStr_StartIndex Then
				beforeLogStr_StartIndex = beforeLogStr_StartIndex + 1
				If BEFORE_LOG_MAX_COUNT <= beforeLogStr_StartIndex Then
					beforeLogStr_StartIndex = 0
				End If
			End If
			logWriteMutex.unLock()
			
			If isConnected = True Then
				Try
					logWriteMutex.lock()
					Dim i As Integer = beforeLogStr_StartIndex
					While (i <> beforeLogStr_EndIndex)
						logSocket.Send(beforeLogStr(i))
						i = i + 1
						If BEFORE_LOG_MAX_COUNT <= i Then
							i = 0
						End If
					End While
				Catch ex
					Console.WriteLine(TimeStamp.CurrentTimeString() + " : MyConsole Write ERROR (" + CStr(GetErrorCode(ex)) + ") " + ex.Message)
				Finally
					beforeLogStr_StartIndex = beforeLogStr_EndIndex
					logWriteMutex.unLock()
				End Try
			End If
		End Sub
		
		Shared Public Sub WriteLine(str As String)
			Write(str & Chr(13) & Chr(10))
		End Sub
		
		Shared Public Function GetLogBuffer(LineCount As Integer, ResultData() As String) As Integer
			Dim i,resultLinCount As Integer
			Dim NowlineIndex As Integer
			Dim StartlineIndex As Integer
			Dim CRLF As String = Chr(GPL_CR)+Chr(GPL_LF)
			NowlineIndex = beforeLogStr_EndIndex
			If LineCount < 1 Then LineCount = 1
			If LineCount > BufferFullCount Then LineCount = BufferFullCount
			StartlineIndex = beforeLogStr_EndIndex-LineCount
'			ReDim ResultData(LineCount-1)
			resultLinCount = 0
			If StartlineIndex<0 Then
				For i= BEFORE_LOG_MAX_COUNT+StartlineIndex+1 To BEFORE_LOG_MAX_COUNT
					If Not(beforeLogStr(i) = "") Then'Or beforeLogStr(i) = CRLF) Then
						ResultData(resultLinCount) = beforeLogStr(i)
						resultLinCount+=1
					End If
				Next
				For i=0 To NowlineIndex
					If Not(beforeLogStr(i) = "") Then'Or beforeLogStr(i) = CRLF) Then
						ResultData(resultLinCount) = beforeLogStr(i)
						resultLinCount+=1
					End If
				Next
			Else
				For i= StartlineIndex To NowlineIndex
					If Not(beforeLogStr(i) = "") Then'Or beforeLogStr(i) = CRLF) Then
						ResultData(resultLinCount) = beforeLogStr(i)
						resultLinCount+=1
					End If
				Next
			End If
			Return resultLinCount
		End Function
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Shared Private Dim LogSocketConnectThread As Thread = New Thread("MyConsole.LogSocketConnectThreadFunction",,"LOG_SOCKET")
		
		Shared Private Dim beforeLogStr(BEFORE_LOG_MAX_COUNT) As String
		Shared Private Dim beforeLogStr_StartIndex As Integer = 0
		Shared Private Dim beforeLogStr_EndIndex As Integer = 0
		Shared Private Dim BufferFullCount As Integer = 0
	End Class
End Module
'Created: 3/12/2015 4:58:49 PM
Module CCLINK_MODULE

	Public Const HALF_BIT As Integer = 4
	Public Const BYTE_BIT As Integer = 8
	Public Const WORD_BIT As Integer = 16
	Public Const SINGLE_BIT As Integer = 32
	
    Public Class CCLinkManager
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''' SHARED ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Shared Public Dim cclinkSendDataBuffer As NetworkDataQueue
		
		Shared Public Dim NowProcessSomeCommand As Boolean = False
		Shared Public Dim Input_bitCommand_addr As Integer
		Shared Public Dim Output_bitCommand_addr As Integer
		Shared Public Dim Input_wordData_addr As Integer
		Shared Public Dim Output_wordData_addr As Integer
		
		Shared Public Dim blockBitSize As Integer
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		Private Dim cclinkDataReceiveThread As Thread
		Private Dim cclinkDataSendThread As Thread
		
		Shared Private Function blockAddress(startAddr As Integer, index As Integer, bitSize As Integer) As Integer
			Dim cnt As Integer = blockBitSize / bitSize
			Return startAddr + 100 * Math.Floor(index / cnt) + bitSize * (index Mod cnt)
		End Function
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(blockBitSize As Integer, input_bitCommand_addr As Integer, output_bitCommand_addr As Integer, input_wordData_addr As Integer, output_wordData_addr As Integer)
			Me.Input_bitCommand_addr = input_bitCommand_addr
			Me.Output_bitCommand_addr = output_bitCommand_addr
			Me.Input_wordData_addr = input_wordData_addr
			Me.Output_wordData_addr = output_wordData_addr
			Me.blockBitSize = blockBitSize
			
			cclinkSendDataBuffer = New NetworkDataQueue
			cclinkDataReceiveThread = New Thread("CCLinkManager.CCLinkDataReceiveThreadFunc",,"CCLINK_RECEIVER")
			cclinkDataSendThread = New Thread("CCLinkManager.CCLinkDataSendThreadFunc",,"CCLINK_SENDER")
		End Sub
		
		Public Sub communicationStart()
				NowProcessSomeCommand = False
				cclinkDataReceiveThread.Start
				cclinkDataSendThread.Start
		End Sub
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''' THREAD ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Shared Public Sub CCLinkDataReceiveThreadFunc()
			Dim prev_CommandStart As Boolean = False
			Dim prev_RobotStop As Boolean = False
			Dim prev_ErrorReset As Boolean = False
			Dim prev_ORG As Boolean = False
			Dim prev_ENABLE As Boolean = False
			Dim prev_DISABLE As Boolean = False
			Dim prev_FlashSave As Boolean = False

			Dim commandCode As Integer = 0
			Dim stageCode As Integer = 0
			Dim slotCode As Integer = 0
			Dim armIndexCode As Integer = 0
			Dim modeCode As Integer = 0
			
			Dim receiveData As NetworkData
			Dim ascProtocol As String = ""
			Dim ex As Exception
			
			Dim cAddr As Integer = CCLinkManager.Input_bitCommand_addr
			Dim wAddr As Integer = CCLinkManager.Input_wordData_addr
			
			While True
				receiveData = Nothing
				commandCode = 0
				stageCode = 0
				slotCode = 0
				armIndexCode = 0
				modeCode = 0
				ascProtocol = ""
				
				Try
					If NetworkManager.IsTPMode Then
						Exit Try
					End If
					
					If CCLinkManager.NowProcessSomeCommand = True Then
						Exit Try
					End If
					
					If isSignalTriger(prev_RobotStop,Signal.DIO(cAddr + 1)) Then
						ascProtocol = "ASS"
						Exit Try
					End If
					
					If isSignalTriger(prev_ErrorReset,Signal.DIO(cAddr + 2)) Then
						ascProtocol = "DRT"
						Exit Try
					End If
					
					If isSignalTriger(prev_ORG,Signal.DIO(cAddr + 3)) Then
						ascProtocol = "ORG"
						Exit Try
					End If
					
					If isSignalTriger(prev_ENABLE,Signal.DIO(cAddr + 4)) Then
						ascProtocol = "ENABLE"
						Exit Try
					End If
					
					If isSignalTriger(prev_DISABLE,Signal.DIO(cAddr + 5)) Then
						ascProtocol = "DISABLE"
						Exit Try
					End If
					
					If isSignalTriger(prev_FlashSave,Signal.DIO(cAddr + 6)) Then
						ascProtocol = "SAVEFLASH 0"
						Exit Try
					End If

					theMoveEx.pause(Signal.DIO(cAddr + 7))
					
					If isSignalTriger(prev_CommandStart,Signal.DIO(cAddr + 0)) Then
						commandCode = Signal.DIO(cAddr + 2*8,8)
						stageCode = Signal.DIO(cAddr + 3*8,8)
						slotCode = Signal.DIO(cAddr + 4*8,8)
						armIndexCode = Signal.DIO(cAddr + 5*8,31)
						modeCode = Signal.DIO(cAddr + 9*8,8)
						
						Select commandCode
						Case 1 'RETA
							ascProtocol = "RETA " + CStr(armIndexCode)
						Case 2 'EXTA
							ascProtocol = "EXTA " + CStr(stageCode) + "," + CStr(armIndexCode) + "," + CStr(modeCode)
						Case 3 'GRDY
							ascProtocol = "GRDY " + CStr(stageCode) + "," + CStr(slotCode) + "," + CStr(armIndexCode)
						Case 4 'PRDY
							ascProtocol = "PRDY " + CStr(stageCode) + "," + CStr(slotCode) + "," + CStr(armIndexCode)
						Case 5 'TRDY
							ascProtocol = "TRDY " + CStr(stageCode) + "," + CStr(slotCode) + "," + CStr(armIndexCode)
						Case 6 'GET
							ascProtocol = "GET " + CStr(stageCode) + "," + CStr(slotCode) + "," + CStr(armIndexCode)
						Case 7 'GAEXTA
							ascProtocol = "GAEXTA " + CStr(stageCode) + "," + CStr(slotCode) + "," + CStr(armIndexCode)
						Case 8 'GARETA
							ascProtocol = "GARETA " + CStr(stageCode) + "," + CStr(slotCode) + "," + CStr(armIndexCode)
						Case 9 'PUT
							ascProtocol = "PUT " + CStr(stageCode) + "," + CStr(slotCode) + "," + CStr(armIndexCode)
						Case 10 'PAEXTA
							ascProtocol = "PAEXTA " + CStr(stageCode) + "," + CStr(slotCode) + "," + CStr(armIndexCode)
						Case 11 'PARETA
							ascProtocol = "PARETA " + CStr(stageCode) + "," + CStr(slotCode) + "," + CStr(armIndexCode)
						Case 12 'POM
							ascProtocol = "POM " + CStr(Signal.DIO(cAddr + 5*8,16))
						Case 13 'P2P
							ascProtocol = "P2P " + CStr(Signal.DIO(cAddr + 5*8,16))
						Case 14 'MAP
							ascProtocol = "MAP " + CStr(stageCode)
						
						Case 136 'APS
							ascProtocol = "APS"
						Case 137 'MPS
							ascProtocol = "MPS"
						
						Case 144 'NIDO
							ascProtocol = "NIDO " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 145 'NIDI
							ascProtocol = "NIDI " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 146 'NIOS
							ascProtocol = "NIOS " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 147 'NIOT
							If readSignalShort(wAddr+32) = 0 Then
								ascProtocol = "NIOT " + CStr(readSignalShort(wAddr)) + "-" + CStr(readSignalShort(wAddr+16)) + ":-"
							Else
								ascProtocol = "NIOT " + CStr(readSignalShort(wAddr)) + "-" + CStr(readSignalShort(wAddr+16)) + ":+"
							End If
						Case 148 'IDO
							ascProtocol = "IDO " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 149 'IDI
							ascProtocol = "IDI " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 150 'IOS
							ascProtocol = "IOS " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 151 'IOT
							If readSignalShort(wAddr+32) = 0 Then
								ascProtocol = "IOT " + CStr(readSignalShort(wAddr)) + "-" + CStr(readSignalShort(wAddr+16)) + ":-"
							Else
								ascProtocol = "IOT " + CStr(readSignalShort(wAddr)) + "-" + CStr(readSignalShort(wAddr+16)) + ":+"
							End If
						Case 152 'RIDO
							ascProtocol = "RIDO " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 153 'RIDI
							ascProtocol = "RIDI " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 154 'RIOS
							ascProtocol = "RIOS " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 155 'RIOT
							If readSignalShort(wAddr+32) = 0 Then
								ascProtocol = "RIOT " + CStr(readSignalShort(wAddr)) + "-" + CStr(readSignalShort(wAddr+16)) + ":-"
							Else
								ascProtocol = "RIOT " + CStr(readSignalShort(wAddr)) + "-" + CStr(readSignalShort(wAddr+16)) + ":+"
							End If
							
						Case 160 'RDEM
							ascProtocol = "RDEM"
						Case 161 'WDEM
							ascProtocol = "WDEM " + CStr(readSignalShort(wAddr))
						Case 162 'RSNM
							ascProtocol = "RSNM"
						Case 163 'WSNM
							ascProtocol = "WSNM " + CStr(readSignalShort(wAddr))
						Case 164 'RLDM
							ascProtocol = "RLDM"
						Case 165 'WLDM
							ascProtocol = "WLDM " + CStr(readSignalShort(wAddr))
						Case 166 'RSKD
							ascProtocol = "RSKD"
						Case 167 'WSKD
							ascProtocol = "WSKD " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 168 'RSSL
							ascProtocol = "RSSL " + CStr(readSignalShort(wAddr))
						Case 169 'WSSL
							ascProtocol = "WSSL " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 170 'RSHT
							ascProtocol = "RSHT " + CStr(readSignalShort(wAddr))
						Case 171 'WSHT
							ascProtocol = "WSHT " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 172 'RSPI
							ascProtocol = "RSHT " + CStr(readSignalShort(wAddr))
						Case 173 'WSPI
							ascProtocol = "WSHT " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 174 'ROFF
							ascProtocol = "ROFF " + CStr(readSignalShort(wAddr))
						Case 175 'WOFF
							ascProtocol = "WOFF " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16)) + "," + CStr(readSignalShort(wAddr+32))
						Case 176 'RSUS
							ascProtocol = "RSUS " + CStr(readSignalShort(wAddr))
						Case 177 'WSUS
							ascProtocol = "WSUS " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16)) + "," + CStr(readSignalShort(wAddr+32))
						Case 178 'RSDS
							ascProtocol = "RSDS " + CStr(readSignalShort(wAddr))
						Case 179 'WSDS
							ascProtocol = "WSDS " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16)) + "," + CStr(readSignalShort(wAddr+32))
						Case 180 'RNSM
							ascProtocol = "RNSM " + CStr(readSignalShort(wAddr))
						Case 181 'WNSM
							ascProtocol = "WNSM " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						
						Case 184 'RHMS
							ascProtocol = "RHMS"
						Case 185 'WHMS
							ascProtocol = "WHMS " + CStr(readSignalShort(wAddr))
						Case 186 'RHIS
							ascProtocol = "RHIS"
						Case 187 'WHIS
							ascProtocol = "WHIS " + CStr(readSignalShort(wAddr))
						Case 188 'RLOS
							ascProtocol = "RLOS"
						Case 189 'WLOS
							ascProtocol = "WLOS " + CStr(readSignalShort(wAddr))
						Case 190 'RZSP
							ascProtocol = "RZSP"
						Case 191 'WZSP
							ascProtocol = "WZSP " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 192 'RSPD
							ascProtocol = "RSPD"
						Case 193 'WSPD
							ascProtocol = "WSPD " + CStr(readSignalShort(wAddr))
						Case 194 'RSSP
							ascProtocol = "RSSP"
						Case 195 'WSSP
							ascProtocol = "WSSP " + CStr(readSignalShort(wAddr))
						Case 196 'RJSS
							ascProtocol = "RJSS"
						Case 197 'WJSS
							ascProtocol = "WJSS " + CStr(readSignalShort(wAddr))
						
						Case 200 'MLD
							ascProtocol = "MLD " + CStr(readSignalShort(wAddr))
							
						Case 204 'RMPS
							ascProtocol = "RMPS"
						Case 205 'WMPS
							ascProtocol = "WMPS " + CStr(readSignalShort(wAddr))
						Case 206 'RMAP
							ascProtocol = "RMAP " + CStr(readSignalShort(wAddr))
						Case 207 'WWTH
							ascProtocol = "WWTH " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 208 'WSCT
							ascProtocol = "WSCT " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 209 'WSDT
							ascProtocol = "WSDT " + CStr(readSignalShort(wAddr)) + "," + CStr(readSignalShort(wAddr+16))
						Case 210 'RMSD
							ascProtocol = "RMSD"
						Case 211 'WMSD
							ascProtocol = "WMSD " + CStr(readSignalShort(wAddr))
							
						Case Else
							ascProtocol = ""
							MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : CCLINK INVALID COMMAND (" + CStr(commandCode) + ")")
						End Select

						Exit Try
					End If
					
				Catch ex
					errorHandler.handleError(ex)
					MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : CCLINK COMMAND RECEIVE ERROR (" + CStr(GetErrorCode(ex)) + ") " + ex.Message)
					If IsError(ex,-1518) Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : CCLINK IO NOT CORRECT")
						Exit Sub
					End If
					ex = Nothing
				End Try
				
				If ascProtocol <> "" Then
					receiveData = New NetworkData(COM_CCLINK, commandCode, ascProtocol)
					CCLinkManager.NowProcessSomeCommand = True
					If ShowCommandLogToConsole = True And receiveData.cmd.needLogWrite = True Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : [RECV]" & ascProtocol)
					End If
					NetworkManager.receiveDataBuffer.pushData(receiveData)
				End If
				
				Thread.Sleep(10)
			End While
		End Sub
		
		Shared Public Sub CCLinkDataSendThreadFunc()
			Dim ex As Exception
			Dim ex2 As Exception
			Dim sendData As NetworkData
			Dim i,j As Integer
			Dim armList() As RobotArm
			
			Dim cAddr As Integer = CCLinkManager.Output_bitCommand_addr
			Dim wAddr As Integer = CCLinkManager.Output_wordData_addr
			
			Dim intervalCount As Integer = 0
			
			While True
				Try
					Signal.DIO(cAddr) = Not(CCLinkManager.NowProcessSomeCommand)
					
					Signal.DIO(cAddr+1) = myRobot(0).isOpCommandRunningNow()
					Signal.DIO(cAddr+2) = Not(myRobot(0).isOpCommandRunningNow())
					Signal.DIO(cAddr+3) = myRobot(0).isOrgCompleted
			
					If errorHandler.getCurrentError() Is Nothing Then
						Signal.DIO(cAddr+4) = False
						Signal.DIO(blockAddress(cAddr,3,BYTE_BIT),16) = 0
					Else
						Signal.DIO(cAddr+4) = True
						Signal.DIO(blockAddress(cAddr,3,BYTE_BIT),16) = errorHandler.changeResponseErrorCodeString(errorHandler.getCurrentErrorCode())
					End If
					
					Signal.DIO(cAddr+5) = Controller.PowerEnabled
					Signal.DIO(cAddr+6) = Not(NetworkManager.IsTPMode)
					
					If intervalCount Mod 3 = 0 Then
						myRobot(0).getCurrentNotHomeArmList(armList)
						If armList.getUpperBound(0) = 0 Then
							Signal.DIO(cAddr+7) = True
						Else
							Signal.DIO(cAddr+7) = False
						End If
					End If
					
					Try
						If Not(myRobot(0).threadRunOpCommand Is Nothing) Then
							Signal.DIO(blockAddress(cAddr,1,BYTE_BIT),BYTE_BIT) = myRobot(0).threadRunOpCommand.cmdCode
						Else
							Signal.DIO(blockAddress(cAddr,1,BYTE_BIT),BYTE_BIT) = 0
						End If
					Catch ex2
						'some times get threadRunOpCommand is not nothing, but when read cmdCode this time threadRunOpCommand is nothing
						Signal.DIO(blockAddress(cAddr,1,BYTE_BIT),BYTE_BIT) = 0
					End Try
					
					Dim bladeIndex As Integer = 0
					For i = 1 To myRobot(0).armCount
						For j = 1 To myRobot(0).arm(i-1).fingerCount
							bladeIndex = bladeIndex + 1
							If bladeIndex <= 32 Then
								Signal.DIO(blockAddress(cAddr,5,BYTE_BIT)+bladeIndex-1) = myRobot(0).arm(i-1).fingerSensorCheck(1,j)
							End If
						Next j
					Next i
				
					For i = 1 To myRobot(0).axisCount
						If i <= 8 Then
							Signal.DIO(blockAddress(cAddr,9,BYTE_BIT)+3*(i-1)+0) = Signal.DIO(CInt(thePDBManager.getPDB(PDB_HOME_SENSOR, i)))
							Signal.DIO(blockAddress(cAddr,9,BYTE_BIT)+3*(i-1)+1) = Signal.DIO(CInt(thePDBManager.getPDB(PDB_POSITIVE_LIMIT_SENSOR, i)))
							Signal.DIO(blockAddress(cAddr,9,BYTE_BIT)+3*(i-1)+2) = Signal.DIO(CInt(thePDBManager.getPDB(PDB_NEGATIVE_LIMIT_SENSOR, i)))
						End If
					Next i
					
					Dim torque,speed As Double
					If intervalCount Mod 3 = 0 Then
						For i = 1 To myRobot(0).axisCount
							If i <= 3 Then
								torque = Math.Abs(CDbl(thePDBManager.getPDB(12304, i))) * 100 / CDbl(thePDBManager.getPDB(10612, i))
								speed = CDbl(thePDBManager.getPDB(3505, i))
								writeSignalShort(blockAddress(wAddr,10+2*(i-1),WORD_BIT),CShort(torque))
								writeSignalShort(blockAddress(wAddr,11+2*(i-1),WORD_BIT),CShort(speed))
							End If
						Next i
					End If
					
					sendData = CCLinkManager.cclinkSendDataBuffer.popData
					Dim str As String
					If Not(sendData Is Nothing) Then
						Signal.DIO(blockAddress(cAddr,2,BYTE_BIT),BYTE_BIT) = sendData.cmd.cmdCode
						
						'read protocol return word data
						If sendData.respList.resp(0).argNo > 0 Then
							'first 10 word reset 0
							For i = 0 To 9
								Signal.DIO(blockAddress(wAddr,i,WORD_BIT),WORD_BIT) = 0
							Next i
							
							Select sendData.cmd.cmdCode
							Case 136 'APS
								writeSignalSingle(blockAddress(wAddr,0,SINGLE_BIT),CSng(sendData.respList.resp(0).args(0))) 'X
								writeSignalSingle(blockAddress(wAddr,1,SINGLE_BIT),CSng(sendData.respList.resp(0).args(1))) 'Y
								writeSignalSingle(blockAddress(wAddr,2,SINGLE_BIT),CSng(sendData.respList.resp(0).args(2))) 'Z
								writeSignalSingle(blockAddress(wAddr,3,SINGLE_BIT),CSng(sendData.respList.resp(0).args(3))) 'Yaw
								If sendData.respList.resp(0).argNo >= 7 Then
									writeSignalSingle(blockAddress(wAddr,4,SINGLE_BIT),CSng(sendData.respList.resp(0).args(6))) 'Track
								End If
								
							Case 137 'MPS
								For i = 0 To sendData.respList.resp(0).argNo-1
									If i < 5 Then
										writeSignalShort(blockAddress(wAddr,i,SINGLE_BIT),CShort(sendData.respList.resp(0).args(i)))
									End If
								Next i
							
							'NIDO,NIDI,NIOS,IDO,IDI,IOS,RIDO,RIDI,RIOS
							Case 144,145,146,148,149,150,152,153,154
								For i = 0 To sendData.respList.resp(0).argNo-1
									If i < 20 Then
										Signal.DIO(blockAddress(wAddr,i,BYTE_BIT),BYTE_BIT) = hexToInt(sendData.respList.resp(0).args(i))
									End If
								Next i
	
							Case 200 'MLD
								For i = 0 To sendData.respList.resp(0).args(0).length
									If i < 40 Then
										Select sendData.respList.resp(0).args(0).Substring(i,1)
										Case "0"
											Signal.DIO(blockAddress(wAddr,i,HALF_BIT),HALF_BIT) = 0
										Case "1"
											Signal.DIO(blockAddress(wAddr,i,HALF_BIT),HALF_BIT) = 1
										Case "D"
											Signal.DIO(blockAddress(wAddr,i,HALF_BIT),HALF_BIT) = 2
										Case "C"
											Signal.DIO(blockAddress(wAddr,i,HALF_BIT),HALF_BIT) = 3
										End Select
									End If
								Next i
								
							Case Else 'default
								For i = 0 To sendData.respList.resp(0).argNo-1
									str = sendData.respList.resp(0).args(i)
									j = str.IndexOf("=")
									If j = -1 Then
										writeSignalShort(blockAddress(wAddr,i,WORD_BIT),CShort(str))
									Else
										writeSignalShort(blockAddress(wAddr,i,WORD_BIT),CShort(str.Substring(j+1,str.Length-j-1)))
									End If
								Next i
							End Select
						End If

						If ShowCommandLogToConsole = True And sendData.cmd.needLogWrite = True Then
							MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : [SEND]" & sendData.respList.resp(0).toString())
						End If
						
						CCLinkManager.NowProcessSomeCommand = False
					End If

				Catch ex
					errorHandler.handleError(ex)
					MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : CCLINK COMMAND SEND ERROR (" + CStr(GetErrorCode(ex)) + ") " + ex.Message)
					If IsError(ex,-1518) Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : CCLINK IO NOT CORRECT")
						Exit Sub
					End If
					ex = Nothing
				End Try
				
				intervalCount = intervalCount + 1
				If intervalCount > 10 Then
					intervalCount = 0
				End If
				
				Thread.Sleep(30)
			End While
		End Sub
		
    End Class 
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module RS232Module_Data

	Public Class NetworkData
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private m_sourceDevice As Integer
		Public ReadOnly Property sourceDevice As Integer
	        Get 
	            Return m_sourceDevice
	        End Get
	    End Property
		
		Private m_rawData As String
		
		Private m_cmd As Command
		Public Property cmd As Command
	        Set (value As Command)
	           m_cmd = value
	        End Set
	        Get 
	            Return m_cmd
	        End Get
	    End Property
		
		Private m_respList As ResponseList = Nothing
		Public ReadOnly Property respList As ResponseList
	        Get 
	            Return m_respList
	        End Get
	    End Property
		
		Private m_nextLinkedNetworkData As NetworkData = Nothing
		Public ReadOnly Property nextLinkedNetworkData As NetworkData
	        Get 
	            Return m_nextLinkedNetworkData
	        End Get
	    End Property
		
		Private Sub dataInit(sourceDevice As Integer, commandCode As Integer, rawData As String)
			m_sourceDevice = sourceDevice
			
			Dim nextLinkPos As Integer = rawData.IndexOf("&&")
			If nextLinkPos = -1 Then
				m_rawData = rawData
			Else
				m_rawData = rawData.Substring(0,nextLinkPos)
				m_nextLinkedNetworkData = New NetworkData(sourceDevice,rawData.Substring(nextLinkPos+2))
			End If
			m_cmd = New Command(m_sourceDevice, commandCode, m_rawData)
		End Sub
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(sourceDevice As Integer, rawData As String)
			dataInit(sourceDevice,0,rawData)
		End Sub
		
		Public Sub New(sourceDevice As Integer, commandCode As Integer, rawData As String)
			dataInit(sourceDevice,commandCode,rawData)
		End Sub
		
		Public Sub setResponseList(respList As ResponseList)
			 m_respList = respList
		End Sub
		
	End Class
	
	
	
	Public Class NetworkDataQueue
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Const MAX_DATA_COUNT As Integer = 200
		Private Dim dataList(MAX_DATA_COUNT) As NetworkData
		Private Dim dataCount As Integer
		Private Dim dataStartIndex As Integer
		Private Dim dataEndIndex As Integer
		Private Dim dataMutex As New Mutex
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub pushData(data As NetworkData)
			If dataCount >= MAX_DATA_COUNT Then
				throwError(ERR_RECEIVEBUF_FULL)
			End If
			
			dataMutex.lock()
			
			If dataCount >= MAX_DATA_COUNT Then
				dataMutex.unLock()
				throwError(ERR_RECEIVEBUF_FULL)
			End If
			
			dataList(dataEndIndex) = data
			dataEndIndex = dataEndIndex + 1
			If dataEndIndex >= MAX_DATA_COUNT Then
				dataEndIndex = 0
			End If
			dataCount = dataCount + 1
			
			dataMutex.unLock()
		End Sub
		
		Public Function popData() As NetworkData
			If dataCount <= 0 Then
				Return Nothing
			End If
			
			dataMutex.lock()
			
			If dataCount <= 0 Then
				dataMutex.unLock()
				Return Nothing
			End If
			
			Dim result As NetworkData
			result = dataList(dataStartIndex)
			dataList(dataStartIndex) = Nothing
			dataStartIndex = dataStartIndex + 1
			If dataStartIndex >= MAX_DATA_COUNT Then
				dataStartIndex = 0
			End If
			dataCount = dataCount - 1
			
			dataMutex.unLock()
			Return result
		End Function
		
	End Class
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN


Module RS232Module_DataHandler
		
	Public Class NetworkDataHandler
	
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SHARED ''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Shared Public Sub DataHandlerThreadFunc()
			Dim handleData As NetworkData
			Dim ex As Exception
			Dim returnRespList As ResponseList
			
			While True
				Thread.Sleep(10)
				
				handleData = NetworkManager.receiveDataBuffer.popData()
				
				While (Not(handleData Is Nothing))
					Try
						If handleData.cmd.needLogWrite = True Then
							If errorLogWriter_new Is Nothing Then
								errorLogWriter_old.addRunCommandLog(handleData.cmd)
							Else
								errorLogWriter_new.addRunCommandLog(handleData.cmd)
							End If
						End If
						
						If ShowCommandLogToConsole = True And handleData.cmd.needLogWrite = True Then
							MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Handler" + CStr(Thread.CurrentThread.Argument) + " excute start <" + handleData.cmd.cmd + ">")
						End If
						
						returnRespList = New ResponseList
						protocolHandler.commMain(handleData.cmd,returnRespList)
						handleData.setResponseList(returnRespList)
						
						If ShowCommandLogToConsole = True And handleData.cmd.needLogWrite = True Then
							MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Handler" + CStr(Thread.CurrentThread.Argument) + " excute complete <" + handleData.cmd.cmd + ">")
						End If
						
						If handleData.sourceDevice = COM_HOST Then
							NetworkManager.hostSendDataBuffer.pushData(handleData)
						ElseIf handleData.sourceDevice = COM_TP Then
							NetworkManager.tpSendDataBuffer.pushData(handleData)
						ElseIf handleData.sourceDevice = COM_TCPIP Then
							NetworkManager.tcpipSendDataBuffer.pushData(handleData)
						ElseIf handleData.sourceDevice = COM_CCLINK Then
							CCLinkManager.cclinkSendDataBuffer.pushData(handleData)
						End If
					Catch ex
						errorHandler.handleError(ex)
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Handler" + CStr(Thread.CurrentThread.Argument) + " excute ERROR <" + handleData.cmd.cmd + "> : (" + CStr(GetErrorCode(ex)) + ") " + ex.Message)
						ex = Nothing
					End Try
					
					handleData = handleData.nextLinkedNetworkData
				End While
			End While
		End Sub
	
	
	
	
	
	
	
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim dataHandlerThread As Thread
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(id As Integer)
			dataHandlerThread = New Thread("NetworkDataHandler.DataHandlerThreadFunc",,"DataHandlerThreadFunc" & CStr(id))
			dataHandlerThread.Argument = id
		End Sub
		
		Public Sub startDataHandle()
			dataHandlerThread.Start()
		End Sub
		
	End Class
	
	
	
	
	
	
	
	
	
	

End Module
'Created: 7/10/2013 10:39:24 AM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module RS232Module_DataReceiver


	Public Class NetworkDataReceiver
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SHARED '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Shared Public Sub SerialDataReceiveThreadFunc()
			Dim sourceDevice As Integer
			sourceDevice = Thread.CurrentThread.Argument
			
			Dim comReceiver As StreamReader
			If sourceDevice = COM_HOST Then
				comReceiver = NetworkManager.comReceiver(COM_HOST)
			ElseIf sourceDevice = COM_TP Then
				comReceiver = NetworkManager.comReceiver(COM_TP)
			Else
				Exit Sub
			End If
			
			Dim nowData As String
			Dim ex As Exception
			Dim receiveData As NetworkData
			
			While True
				Try
					If comReceiver.Peek() = -1 Then
						Exit Try
					End If
					
					nowData = ""
					nowData = comReceiver.ReadLine()
					
					If nowData.Length < 1 Then
						Exit Try
					End If
					
					If sourceDevice = COM_TP And Not NetworkManager.IsTPMode Then
						Exit Try
					ElseIf sourceDevice = COM_HOST And NetworkManager.IsTPMode Then
						Exit Try
					End If
					
					receiveData = New NetworkData(sourceDevice,nowData)
					If ShowCommandLogToConsole = True And receiveData.cmd.needLogWrite = True Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : [RECV]" & nowData)
					End If
					NetworkManager.receiveDataBuffer.pushData(receiveData)
					
				Catch ex
					errorHandler.handleError(ex)
					MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : RECEIVE ERROR (" + CStr(GetErrorCode(ex)) + ") " + ex.Message)
					ex = Nothing
				End Try
				
				Thread.Sleep(10)

			End While
		End Sub
		
		Shared Public Sub TcpipDataReceiveThreadFunc()
			Dim portNumber As Integer
			portNumber = Thread.CurrentThread.Argument
			
			Dim m_IPEndPoint As New IPEndPoint("", portNumber)
			Dim m_TcpListener As New TcpListener(m_IPEndPoint)
			Dim m_socket As Socket
			
			Dim ex As Exception
			Dim ret As Integer
			Dim nowData As String
			Dim recv As String
			Dim buf As String
			Dim pos As Integer
			Dim receiveData As NetworkData
		
			While True
			
				NetworkManager.tcpipSocket = Nothing
			
				m_TcpListener.Start
			
				While Not m_TcpListener.Pending()
					Thread.Sleep(100)
				End While
				
				MyConsole.WriteLine(" Connected Socket")
				NetworkManager.tcpipSocket = m_TcpListener.AcceptSocket
				m_socket = networkManager.tcpipSocket
				m_Socket.KeepAlive = True
				
				m_TcpListener.Stop
				m_TcpListener.Close
				
				recv = ""
		
				While True
		
					Try
	
						m_Socket.ReceiveTimeout = 0
						pos = recv.IndexOf(Chr(GPL_CR) & Chr(GPL_LF))
						Do While pos = -1
							buf = ""
							ret = m_Socket.Receive(buf,2000)
						
							If ret = 0 And m_TcpListener.Pending()= False Then
								MyConsole.WriteLine(" Disconnected Socket")
								m_Socket.Close
								ret = -2
								Exit Try
							End If
							
							recv = recv & buf
							pos = recv.IndexOf(Chr(GPL_CR) & Chr(GPL_LF))
						Loop
						
						nowData = recv.Substring(0, pos)
						recv = recv.Substring(pos+2, recv.Length-pos-2)
						
						If nowData.Length < 1 Then
							Exit Try
						End If
						
						If NetworkManager.IsTPMode Then
							If ShowCommandLogToConsole = True Then
								MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Current mode is TP")
							End If
							Exit Try
						End If
	
						receiveData = New NetworkData(COM_TCPIP,nowData)
						If ShowCommandLogToConsole = True And receiveData.cmd.needLogWrite = True Then
							MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : [RECV]" & nowData)
						End If
						NetworkManager.receiveDataBuffer.pushData(receiveData)
	
					Catch ex
						If ex.ErrorCode = -1705 Then 'time out
						Else
							errorHandler.handleError(ex)
							MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : RECEIVE ERROR (" + CStr(GetErrorCode(ex)) + ") " + ex.Message)
						End If
						ex = Nothing
					End Try
					
					If ret = -2 Then 'socket is closed
						Exit While
					End If
					
					Thread.Sleep(10)
				
				End While
				
			End While
		End Sub
		
		
		
		
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim hostDataReceiveThread As Thread
		Private Dim tpDataReceiveThread As Thread
		Private Dim tcpipDataReceiveThread As Thread
		
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New()		
			hostDataReceiveThread = New Thread("NetworkDataReceiver.SerialDataReceiveThreadFunc",,"RS232_RECEIVER")
			tpDataReceiveThread = New Thread("NetworkDataReceiver.SerialDataReceiveThreadFunc",,"TP_RECEIVER")
			tcpipDataReceiveThread = New Thread("NetworkDataReceiver.TcpipDataReceiveThreadFunc",,"TCPIP_RECEIVER")
		End Sub
		
		Public Sub startHostDataReceive()
			hostDataReceiveThread.Argument = COM_HOST
			hostDataReceiveThread.start
		End Sub
		
		Public Sub startTpDataReceive()
			tpDataReceiveThread.Argument = COM_TP
			tpDataReceiveThread.start
		End Sub
		
		Public Sub startTcpipDataReceive(portNumber As Integer)
			tcpipDataReceiveThread.Argument = portNumber
			tcpipDataReceiveThread.start
		End Sub
		
	End Class
	
	
End Module
'Created: 7/10/2013 10:39:57 AM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module RS232Module_DataSender

	Public Class NetworkDataSender
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SHARED '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Shared Public Sub SerialDataSendThreadFunc()

			Dim i As Integer
			Dim sourceDevice As Integer
			sourceDevice = Thread.CurrentThread.Argument
			
			Dim comSender As StreamWriter
			If sourceDevice = COM_HOST Then
				comSender = NetworkManager.comSender(COM_HOST)
			ElseIf sourceDevice = COM_TP Then
				comSender = NetworkManager.comSender(COM_TP)
			Else
				Exit Sub
			End If
			
			Dim sendData As NetworkData
			Dim sendString As String
			Dim ex As Exception
			
			While True
				Try
					sendData = Nothing
					If sourceDevice = COM_HOST Then
						sendData = NetworkManager.hostSendDataBuffer.popData
					ElseIf sourceDevice = COM_TP Then
						sendData = NetworkManager.tpSendDataBuffer.popData
					End If
					
					If sendData Is Nothing Then
						Exit Try
					End If
					
					sendString = ""
					For i = 0 To sendData.respList.respCount - 1
						sendString = sendString & sendData.respList.resp(i).toString() & Chr(13) & Chr(10)
					Next i
					
					If ShowCommandLogToConsole = True And sendData.cmd.needLogWrite = True Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : [SEND]" & sendString)
					End If
					
					comSender.Flush
					comSender.Write(sendString)
					
				Catch ex
					errorHandler.handleError(ex)
					MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : SEND ERROR (" + CStr(GetErrorCode(ex)) + ") " + ex.Message)
					ex = Nothing
				End Try
				
				Thread.Sleep(10)
				
			End While
		End Sub
		
		Shared Public Sub TcpipDataSendThreadFunc()
			Dim i As Integer
			Dim sendData As NetworkData
			Dim sendString As String
			Dim ex As Exception
	
			While True
				Try
	
					sendData = Nothing
					sendData = NetworkManager.tcpipSendDataBuffer.popData
					
					If sendData Is Nothing Then
						Exit Try
					End If
					
					If NetworkManager.tcpipSocket Is Nothing Then
						Exit Try
					End If
					
					For i = 0 To sendData.respList.respCount - 1
						sendString = sendData.respList.resp(i).toString()
						
						If ShowCommandLogToConsole = True And sendData.cmd.needLogWrite = True Then
							MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : [SEND]" & sendString)
						End If
						
						NetworkManager.tcpipSocket.Send(sendString & Chr(13) & Chr(10))
					Next i
					
				Catch ex
					errorHandler.handleError(ex)
					MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : SEND ERROR (" + CStr(GetErrorCode(ex)) + ") " + ex.Message)
					ex = Nothing
				End Try
				
				Thread.Sleep(10)
				
			End While
		End Sub
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim showConsoleLog As Boolean
		
		Private Dim hostDataSendThread As Thread
		Private Dim tpDataSendThread As Thread
		Private Dim tcpipDataSendThread As Thread
		

		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New()			
			hostDataSendThread = New Thread("NetworkDataSender.SerialDataSendThreadFunc",,"RS232_SENDER")
			tpDataSendThread = New Thread("NetworkDataSender.SerialDataSendThreadFunc",,"TP_SENDER")
			tcpipDataSendThread = New Thread("NetworkDataSender.TcpipDataSendThreadFunc",,"TCPIP_SENDER")
		End Sub
		
		Public Sub startHostDataSend()
			hostDataSendThread.Argument = COM_HOST
			hostDataSendThread.Start
		End Sub
		
		Public Sub startTpDataSend()
			tpDataSendThread.Argument = COM_TP
			tpDataSendThread.Start
		End Sub
		
		Public Sub startTcpipDataSend()
			tcpipDataSendThread.Start
		End Sub
		
	End Class
	
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module RS232Module_NetManager

	Public Const COM_DEFAULT As Integer = -1
	Public Const COM_HOST As Integer = 0
	Public Const COM_TP As Integer = 1
	Public Const COM_TCPIP As Integer = 2
	Public Const COM_CCLINK As Integer = 3

	Public Class NetworkManager

		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''' SHARED ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Shared Public Dim theCCLinkManager As CCLinkManager = Nothing
		
		Shared Public Dim comReceiver(MAX_DEV_COUNT) As StreamReader
		Shared Public Dim comSender(MAX_DEV_COUNT) As StreamWriter
		Shared Public Dim tcpipSocket As Socket = Nothing

		Shared Public Dim receiveDataBuffer As NetworkDataQueue
		Shared Public Dim hostSendDataBuffer As NetworkDataQueue
		Shared Public Dim tpSendDataBuffer As NetworkDataQueue
		Shared Public Dim tcpipSendDataBuffer As NetworkDataQueue
		
		Shared Public Function isTPMode() As Boolean
			If UseTP = True Then
				If SYS_DI_AUTO_MANUAL_SW <> 0 Then
					Return robotIO.getDIO(SYS_DI_AUTO_MANUAL_SW)
				Else
					Return False
				End If
			Else
				Return False
			End If
		End Function
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim networkDataReceiver As NetworkDataReceiver
		Private Dim networkDataSender As NetworkDataSender
		Private Dim networkDataHandler(MAX_HANDLER_COUNT) As NetworkDataHandler
		
		Private Const HOST_DEV_NAME As String = "/dev/com1"
		Private Const TP_DEV_NAME As String = "/dev/com2"
		Private Const MAX_DEV_COUNT As Integer = 2
		
		Private Const MAX_HANDLER_COUNT As Integer = 3
		
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New()
			NetworkManager.comReceiver(COM_HOST) = New StreamReader(HOST_DEV_NAME)
			NetworkManager.comSender(COM_HOST) = New StreamWriter(HOST_DEV_NAME)
			If UseTP = True Then
				NetworkManager.comReceiver(COM_TP) = New StreamReader(TP_DEV_NAME)
				NetworkManager.comSender(COM_TP) = New StreamWriter(TP_DEV_NAME)
			End If

			receiveDataBuffer = New NetworkDataQueue
			hostSendDataBuffer = New NetworkDataQueue
			tpSendDataBuffer = New NetworkDataQueue
			tcpipSendDataBuffer = New NetworkDataQueue
			
			networkDataReceiver = New NetworkDataReceiver
			networkDataSender = New NetworkDataSender
			
			Dim i As Integer
			For i = 0 To MAX_HANDLER_COUNT-1
				networkDataHandler(i) = New NetworkDataHandler(i+1)
			Next
		End Sub
		
		Public Sub communicationStart()
			' Flush
			Dim i As Integer
			For i = 0 To MAX_DEV_COUNT-1
				If Not(NetworkManager.comReceiver(i) Is Nothing) Then
					While NetworkManager.comReceiver(i).Peek() <> -1
						NetworkManager.comReceiver(i).Read()
					End While
				End If
				If Not(NetworkManager.comSender(i) Is Nothing) Then
					NetworkManager.comSender(i).autoFlush = True
					NetworkManager.comSender(i).NewLine = Chr(GPL_CR) & Chr(GPL_LF)
				End If
			Next
			
			networkDataReceiver.startHostDataReceive()
			If UseTP = True Then
				networkDataReceiver.startTpDataReceive()
			End If
			networkDataReceiver.startTcpipDataReceive(theSystem.TcpipPortNum)
			
			networkDataSender.startHostDataSend()
			If UseTP = True Then
				networkDataSender.startTpDataSend()
			End If
			networkDataSender.startTcpipDataSend()
						
			For i = 0 To MAX_HANDLER_COUNT-1
				networkDataHandler(i).startDataHandle()
			Next
			
			If Not(theCCLinkManager Is Nothing) Then
				theCCLinkManager.communicationStart()
			End If
		End Sub
		
		Public Sub useCCLink(blockBitSize As Integer, input_bitCommand_addr As Integer, output_bitCommand_addr As Integer, input_wordData_addr As Integer, output_wordData_addr As Integer)
			theCCLinkManager = New CCLinkManager(blockBitSize, input_bitCommand_addr, output_bitCommand_addr ,input_wordData_addr, output_wordData_addr)
		End Sub
		
	End Class
End Module
'Created: 7/10/2013 9:48:20 AM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module ReceiveCommandModule

   	Public Class Command
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''' SHARED ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Shared Public NotNeedLogCommands As String = "<APS><MPS><NMPS><ERR><ERD><RPS><IDI><IDO><IOS><TPIDI><TPIDO><TPIOS><RIDI><RIDO><RIOS><NIDI><NIDO><NIOS><RCLOG>"
	
	
	
	
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private m_sourceDevice As Integer = COM_DEFAULT
		Public ReadOnly Property sourceDevice As Integer
	        Get 
	            Return m_sourceDevice
	        End Get
	    End Property
		
		Private Const Space As String = " "
		Private Const RobotSep1 As String = "|"
		Private Const RobotSep2 As String = "!"
		Private Const Sep As String = ","
		
		Private Dim m_cmd As String
		Public ReadOnly Property cmd As String
	        Get
	            Return m_cmd
	        End Get
	    End Property
		
		Private Dim m_cmdCode As Integer
		Public ReadOnly Property cmdCode As Integer
	        Get
	            Return m_cmdCode
	        End Get
	    End Property
		
		Private Dim m_rawArg As String = ""
		Public ReadOnly Property rawArg As String
	        Get
				If m_rawArg Is Nothing Then
					Return ""
				Else
	            	Return m_rawArg
				End If
	        End Get
	    End Property
		
		Public ReadOnly Property rawArgFrom(index As Integer) As String
	        Get 
				Dim i As Integer
				Dim result As String = ""
				If index < 0 Then
					index = 0
				End If
				For i = index To m_rawArgs.Length - 1
					If i > index Then
						result = result + Sep
					End If
					result = result + m_rawArgs(i)
				Next i
				Return result
	        End Get
	    End Property
		
		Private Dim m_robotIndex As Integer
		Public ReadOnly Property robotIndex As Integer
			Get
				Return m_robotIndex
			End Get
		End Property
		
		Private Dim m_responseRobotIndex As Boolean
		Public ReadOnly Property responseRobotIndex As Boolean
			Get
				Return m_responseRobotIndex
			End Get
		End Property
		
		Private Dim m_rawArgs() As String
		Public ReadOnly Property args(index As Integer) As String
	        Get
				If m_rawArg = "" Or index < 0 Or m_rawArgs.Length <= index Then
					Return ""
				Else
	            	Return m_rawArgs(index)
				End If
	        End Get
	    End Property
		
		Public ReadOnly Property ints(index As Integer) As Integer
	        Get 
				If m_rawArg = "" Or index < 0 Or m_rawArgs.Length <= index Then
					Return 0
				Else
	            	Return CInt(m_rawArgs(index))
				End If
	        End Get
	    End Property
		
		Public ReadOnly Property dbls(index As Integer) As Double
	        Get 
				If m_rawArg = "" Or index < 0 Or m_rawArgs.Length <= index Then
					Return 0
				Else
	            	Return CDbl(m_rawArgs(index))
				End If
	        End Get
	    End Property
		
		Public ReadOnly Property bools(index As Integer) As Boolean
	        Get 
				If m_rawArg = "" Or index < 0 Or m_rawArgs.Length <= index Then
					Return False
				Else
	            	Return CBool(m_rawArgs(index))
				End If
	        End Get
	    End Property
		
		Public ReadOnly Property argCount As Integer
	        Get 
				If m_rawArg = "" Then
					Return 0
				Else
	            	Return m_rawArgs.Length
				End If
	        End Get
	    End Property
		
		Private Dim m_needLogWrite As Boolean = True
		Public ReadOnly Property needLogWrite As Boolean
	        Get 
				Return m_needLogWrite
	        End Get
	    End Property
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(str As String)
			parseCommand(str)
		End Sub
		
		Public Sub New(sourceDevice As Integer, str As String)
			m_sourceDevice = sourceDevice
			parseCommand(str)
		End Sub
		
		Public Sub New(sourceDevice As Integer, commandCode As Integer, str As String)
			m_sourceDevice = sourceDevice
			m_cmdCode = commandCode
			parseCommand(str)
		End Sub
		
		'Command Format:
		'<Commans><SP><Arg1>,<Arg2>,...
		'Argument is option
		Public Sub parseCommand(str As String)
			Dim argPos As Integer
			Dim robotIndexArgPos As Integer
			
			m_robotIndex = 0
			m_rawArg = ""
			
			argPos = str.IndexOf(space)
			If argPos = -1 Then
				m_cmd = str
			Else
				m_cmd = str.Substring(0, argPos)
				
				robotIndexArgPos = str.IndexOf(robotSep1)
				m_responseRobotIndex = True
				If robotIndexArgPos = -1 Then
					robotIndexArgPos = str.IndexOf(robotSep2)
					m_responseRobotIndex = False
				End If
				
				If robotIndexArgPos <> -1 Then
					m_robotIndex = CInt(str.Substring(argPos+1, robotIndexArgPos-argPos-1))
					argPos = robotIndexArgPos
				End If
				
				m_rawArg = str.Substring(argPos+1)
				m_rawArgs = str.Substring(argPos+1).Split(sep)
			End If
			
			If NotNeedLogCommands.IndexOf("<" + m_cmd.ToUpper + ">") <> -1 Then
				m_needLogWrite = False
			Else
				m_needLogWrite = True
			End If
		End Sub
		
		Public Function toString() As String
			If argCount = 0 Then
				Return m_cmd
			Else
				Return m_cmd & space & m_rawArg
			End If
		End Function
	End Class
End Module
'Created: 8/12/2011 5:32:12 PM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module ProtocolModule

	Public Class RobotProtocolHandler
	
	
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SETTING ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		Private Dim m_useMotionTimer As Boolean = False
		Public Property useMotionTimer As Boolean
	        Get
	            Return m_useMotionTimer
	        End Get
			Set (value As Boolean)
	            m_useMotionTimer = value
	        End Set
	    End Property
		
		Private Dim m_useEOD As Boolean = False
		Public Property useEOD As Boolean
	        Get
	            Return m_useEOD
	        End Get
			Set (value As Boolean)
	            m_useEOD = value
	        End Set
	    End Property
		
		Private Dim m_useGETPUTmotionArg As Boolean = False
		Public Property useGETPUTmotionArg As Boolean
	        Get
	            Return m_useGETPUTmotionArg
	        End Get
			Set (value As Boolean)
	            m_useGETPUTmotionArg = value
	        End Set
	    End Property
		
		Private Dim m_useOffsetDistance As Boolean = False
		Public Property useOffsetDistance As Boolean
	        Get
	            Return m_useOffsetDistance
	        End Get
			Set (value As Boolean)
	            m_useOffsetDistance = value
	        End Set
	    End Property
		
		Private Dim m_useDynaxIOT As Boolean = True
		Public Property useDynaxIOT As Boolean
	        Get
	            Return m_useDynaxIOT
	        End Get
			Set (value As Boolean)
	            m_useDynaxIOT = value
	        End Set
	    End Property
		
		Private Dim m_useHOMEasORG As Boolean = False
		Public Property useHOMEasORG As Boolean
	        Get
	            Return m_useHOMEasORG
	        End Get
			Set (value As Boolean)
	            m_useHOMEasORG = value
	        End Set
	    End Property
		
		Private Dim m_enableWhenDRT As Boolean = False
		Public Property enableWhenDRT As Boolean
	        Get
	            Return m_enableWhenDRT
	        End Get
			Set (value As Boolean)
	            m_enableWhenDRT = value
	        End Set
	    End Property
		
		Private Dim m_useFlashSaveProtocol As Boolean = True
		Public Property useFlashSaveProtocol As Boolean
	        Get
	            Return m_useFlashSaveProtocol
	        End Get
			Set (value As Boolean)
	            m_useFlashSaveProtocol = value
	        End Set
	    End Property
		
		Private Dim m_locationDisplayCenterZero As Boolean = True
		Public Property locationDisplayCenterZero As Boolean
	        Get
	            Return m_locationDisplayCenterZero
	        End Get
			Set (value As Boolean)
	            m_locationDisplayCenterZero = value
	        End Set
	    End Property
		
		Private Dim m_autoChangeRIOAddress As Boolean = False
		Public Property autoChangeRIOAddress As Boolean
	        Get
	            Return m_autoChangeRIOAddress
	        End Get
			Set (value As Boolean)
	            m_autoChangeRIOAddress = value
	        End Set
	    End Property
		
		Private Dim m_autoChangeRIOAddressInterval As Integer = 10
		Public Property autoChangeRIOAddressInterval As Integer
	        Get
	            Return m_autoChangeRIOAddressInterval
	        End Get
			Set (value As Integer)
	            m_autoChangeRIOAddressInterval = value
	        End Set
	    End Property
		
		Private Dim m_ExternalEMOResetBoardIndex As Integer = 0
		Public ReadOnly Property ExternalEMOResetBoardIndex As Integer
	        Get
	            Return m_ExternalEMOResetBoardIndex
	        End Get
	    End Property	
		
		Private Dim m_useEMOResetSignalIO As Integer = 0
		Public Property useEMOResetSignalIO As Integer
	        Get
	            Return m_useEMOResetSignalIO
	        End Get
			Set (value As Integer)
				Dim i As Integer
	            m_useEMOResetSignalIO = value
				For i = 1 To cantapsIOCount
					If cantapsIO(i-1).DEFAULT_DO_START <= value And value <= cantapsIO(i-1).DEFAULT_DO_START+cantapsIO(i-1).OUTPUTCNT Then
						m_ExternalEMOResetBoardIndex = i
					End If
				Next
	        End Set
	    End Property			
		
		
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SHARED '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	
		Shared Public Function isOpCommandButDoNotNeedAttach(cmd As String) As Boolean
			Select cmd
			'motion command (need attach)
			Case "ENABLE"
			Case "SEVO"
			Case "ORG"
			Case "HOME"
				If protocolHandler.useHOMEasORG = True Then
					Return True
				Else
					Return False
				End If
			'PUSHER TIME CHECK
			Case "GRIPCHECK"
			Case "GCK"
			Case "HALFGRIPCHECK"
			Case "HGCK"
			Case Else
				Return False
			End Select
			Return True
		End Function
		
		Shared Public Function isOpCommandButNotMotion(cmd As String) As Boolean
			'always wait done
			Select cmd
			'motion command (need attach)
			Case "ENABLE"
			Case "SEVO"
			Case "HND"
			Case "FZS"
			Case "ORG"
			Case "HOME"
				If protocolHandler.useHOMEasORG = True Then
					Return True
				Else
					Return False
				End If
			'PUSHER TIME CHECK
			Case "GRIPCHECK"
			Case "GCK"
			Case "HALFGRIPCHECK"
			Case "HGCK"
			Case Else
				Return False
			End Select
			Return True
		End Function
		
		Shared Public Function isOpCommand(cmd As Command) As Boolean
			
			Select cmd.cmd.toUpper
			Case "ENABLE"
			Case "SEVO"
				If cmd.argCount = 2 Then
					If cmd.ints(1) = 0 Then ' servo off not need attach
						Return False
					End If
				End If
			Case "ORG"
			Case "HOME"
			Case "FZS"
			Case "HND"
				If cmd.argCount = 0 Then ' only read now hand custom
					Return False
				End If
			
			'base motion
			Case "LMI"
			Case "MMI"
			Case "NMMI"
			Case "LMA"
			Case "MMA"
			Case "NMMA"
			
			'robot motion
			Case "RETA"
			Case "EXTA"
			Case "GRDY"
			Case "PRDY"
			Case "TRDY"
			Case "GET"
			Case "GAEXTA"
			Case "GAEXTA2"
			Case "GARETA"
			Case "GARETAF"
			Case "PUT"
			Case "PAEXTA"
			Case "PAEXTA2"
			Case "PARETA"
			Case "PARETAF"
			Case "UPUT"
			Case "UPAEXTA"
			Case "UPARETA"
			Case "CRO"
			Case "TRANS"
			Case "ROTATE"
			Case "FLIP"
			Case "POM"
			Case "P2P"
			Case "ZSCAN"
			Case "RETAD"
			Case "RETAU"
			
			'mapping
			Case "MAP"
			Case "MRDY"
			Case "MEXT"
			Case "MRET"
			Case "MZUP"
			
			'blade mapping
			Case "MZI"
				If cmd.argCount = 2 Then
					If cmd.ints(1) = 2 Then ' only read error result
						Return False
					End If
				End If
			Case "MZC"
			
			'Z ERROR DETECT
			Case "WZPC"
			
			'PUSHER TIME CHECK
			Case "GRIPCHECK"
			Case "GCK"
			Case "HALFGRIPCHECK"
			Case "HGCK"
			
			'AUTO TUNING
			Case "AGT"
			
			Case Else
				Return False
			End Select
			Return True
		End Function
		






		
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

		Private Sub checkArgumentNo(cmd As Command, no As Integer)
			If cmd.argCount <> no Then
				ThrowError(ERR_INVALID_FORMAT)
			End If
		End Sub
		
		Private Sub checkCommandAvailable(robotIndex As Integer, cmd As String)
			Dim i As Integer
			Select cmd
			Case "GRDY","PRDY","TRDY","GET","GAEXTA","GARETA","EXTA","RETA","RETAD","RETAU"
				If myRobot(robotIndex-1).armCount = 0 Then
					throwError(ERR_INVALID_COMMAND)
				End If
				
			Case "PUT","PAEXTA","PARETA","GRIP","GAEXTA2","PAEXTA2","GARETAF","PARETAF"
				If myRobot(robotIndex-1).armCount = 0 Then
					throwError(ERR_INVALID_COMMAND)
				End If
				
			Case "ROTATE","FLIP"
				If myRobot(robotIndex-1).armCount = 0 Then
					throwError(ERR_INVALID_COMMAND)
				End If
				For i = 0 To myRobot(robotIndex-1).armCount - 1
					If myRobot(robotIndex-1).arm(i).isCanFlip = True Then
						Exit For
					ElseIf i = myRobot(robotIndex-1).armCount - 1 Then
						throwError(ERR_INVALID_COMMAND)
					End If
				Next i
				
			Case "UPUT","UPAEXTA","UPARETA"
				If myRobot(robotIndex-1).armCount = 0 Or myRobot(robotIndex-1).isCanUPutMotion = False Then
					throwError(ERR_INVALID_COMMAND)
				End If

			Case "CRO"
				If myRobot(robotIndex-1).armCount < 2 Or myRobot(robotIndex-1).isCanCrossMotion = False Then
					throwError(ERR_INVALID_COMMAND)
				End If
				For i = 0 To myRobot(robotIndex-1).armCount - 1
					If myRobot(robotIndex-1).arm(i).fingerCount >= 2 Then
						throwError(ERR_INVALID_COMMAND)
					End If
				Next i
				
			Case "RMPS","WMPS"
				If (myRobot(robotIndex-1).theMappingManager Is Nothing) And _
				myRobot(robotIndex-1).theBladeDeflectionDetector Is Nothing Then
					throwError(ERR_INVALID_COMMAND)
				End If
				
			Case "MAP","MLD","RMAP","WWTH","WSCT","WBZP","WSDT","RMSD"
				If myRobot(robotIndex-1).theMappingManager Is Nothing Then
					throwError(ERR_INVALID_COMMAND)
				End If
				
			Case "MSET","WMSD","MRDY","MEXT","MRET","MZUP","MOUT","MP1","MP2","MDBG"
				If myRobot(robotIndex-1).theMappingManager Is Nothing Then
					throwError(ERR_INVALID_COMMAND)
				End If
			
			Case "MSP2"
				If myRobot(robotIndex-1).theMappingManager Is Nothing Then
					throwError(ERR_INVALID_COMMAND)
				End If
			
			Case "WZPC","ZEM","ZES"
				If myRobot(robotIndex-1).theZPosErrDetector Is Nothing Then
					throwError(ERR_INVALID_COMMAND)
				End If

			Case "WMZI","RMZI","MZR","MZI","MZC"
				If myRobot(robotIndex-1).theBladeDeflectionDetector Is Nothing Then
					throwError(ERR_INVALID_COMMAND)
				End If
				
			Case "POM"
				If myRobot(robotIndex-1).robotType = WTR_TYPE Or myRobot(robotIndex-1).robotType = FTR_TYPE Then
				Else
					throwError(ERR_INVALID_COMMAND)
				End If
				
			Case "VBU"
				For i = 1 To myRobot(robotIndex-1).armCount
					If myRobot(robotIndex-1).arm(i-1).isUseCrashDetectSensor = True Then
						Exit For
					ElseIf i = myRobot(robotIndex-1).armCount Then
						throwError(ERR_INVALID_COMMAND)
					End If
				Next i
				
			Case "SAVEFLASH"
				If useFlashSaveProtocol = False Then
					throwError(ERR_INVALID_COMMAND)
				End If
				
			Case "RGETS","WGETS","RPUTS","WPUTS"
				If myRobot(robotIndex-1).theProfileManager.useOnOffSpeedAsGetPutSpeed = False Then
					throwError(ERR_INVALID_COMMAND)
				End If
							
			Case "RSPDM", "TSPDM"
				If thesystem.useAutoManualSpeed = False Then
					throwError(ERR_INVALID_COMMAND)
				End If
			Case "MTTE","MMTTE","MTLTE","MTTEL","MMTTEL"
				If TheStateMonitorManager.IsUsePM_Monitoring = False Then
					throwError(ERR_INVALID_COMMAND)
				End If
			Case "MTLTEL","MTDU","MMTDU","MTDUL","MMTDUL","MTLDUL"
				If TheStateMonitorManager.IsUsePM_Monitoring = False Then
					throwError(ERR_INVALID_COMMAND)
				End If
				
			End Select
		End Sub
		
		
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub commRoutine(robotIndex As Integer, cmd As Command, ByRef cmdResponse As Response, ByRef respList As ResponseList)
			Dim tempResponse As Response = Nothing
			Dim robotArm As RobotArm
			Dim robotArmList() As RobotArm
			Dim robotArmList2() As RobotArm
			Dim tempLoc As LocationEx
			Dim tempValue_int As Integer
			Dim tempValue_dbl As Double
			Dim tempValue_dbl1 As Double
			Dim tempValue_dbl2 As Double
			Dim tempValue_dbl3 As Double
			Dim tempValue_dbl4 As Double
			Dim tempStrSplitBuf() As String
			Dim motionSelector As Integer
			Dim i,j As Integer
			
			If robotIndex = 0 Then
				robotIndex = 1
			End If
			If Robot.Selected <> robotIndex Then
				Robot.Selected = robotIndex
			End If
			
		
			
			Select cmd.cmd.ToUpper
			

			''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			'''''''''''''''''' Basic controller command ''''''''''''''''''
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			Case "ORG"				
				If myRobot(robotIndex-1).theMappingManager Is Nothing Then
				Else
					myRobot(robotIndex-1).theMappingManager.sensorOFF()
				End If
				myRobot(robotIndex-1).org()
				theSystem.demoMode = 0
				If theSystem.interLockCheckModeAutoOn = True Then
					theSystem.interlockMode = 1
				End If
				
			Case "ORGCHECK"
				If myRobot(robotIndex-1).isOrgCompleted = True Then
					cmdResponse.args(0) = "1"
				Else
					cmdResponse.args(0) = "0"
				End If
				
			Case "HOME"
				If useHOMEasORG = True Then
					myRobot(robotIndex-1).org()
					theSystem.demoMode = 0
					If theSystem.interLockCheckModeAutoOn = True Then
						theSystem.interlockMode = 1
					End If
				Else
					myRobot(robotIndex-1).moveToHome()
				End If
				
			Case "ASS"
				If theJogManager.isJogCommandRunningNow(robotIndex) = True Then
					theJogManager.jogStop()
				Else
					myRobot(robotIndex-1).stopMotion()
				End If
				
			Case "SENSORASS"
				CheckArgumentNo(cmd, 1)
				robotIO.assSensorIO = cmd.ints(0)
				
			Case "AES"
				If theJogManager.isJogCommandRunningNow(robotIndex) = True Then
					theJogManager.jogStop()
				Else
					myRobot(robotIndex-1).stopMotion()
				End If
				myRobot(robotIndex-1).servoEnable(False)
				
			Case "PAUSE"
				CheckArgumentNo(cmd, 1)
				If CInt(thePDBManager.getPDB(PDB_ROBOT_TYPE)) = 1 Then
					theMoveEx.pause(cmd.bools(0))
				End If		
				
			Case "ERR"
				cmdResponse.args(0) = errorHandler.changeResponseErrorCodeString(errorHandler.getCurrentErrorCode())
				
			Case "DRT"
				robotIO.resetDoorInterlock() 'it is necessary for clear interlock
				errorHandler.clearError()
				For i = 1 To cantapsIOCount
					cantapsIO(i-1).TcpCantopsIOTreadErrorReset()
				Next i
				If enableWhenDRT = True Then
					myRobot(robotIndex-1).servoEnable(True)
				End If
				
			Case "ERD"
				If errorHandler.getCurrentErrorDescript() <> "" Then
					cmdResponse.args(0) = errorHandler.getCurrentErrorDescript()
				End If
				
			Case "EEC"
				encoderErrorCheckAndClear()
			Case "EES"
				cmdResponse.args(0) = AllEncoderBetteryState(ENCODER_ERROR_INDEX)
				cmdResponse.args(1) = AllEncoderBetteryState(ENCODER_WARNING_INDEX)
			Case "REI"
				If theSystem.IgnoreBatteryWarning Then
					cmdResponse.args(0) = CStr(1)
				Else
					cmdResponse.args(0) = CStr(0)
				End If
			Case "SEI"
				theSystem.IgnoreBatteryWarning = cmd.bools(0)	
			Case "APS"
				cmdResponse.args(0) = LocationEx.getCurCartPos().toString()

			Case "MPS"
				If locationDisplayCenterZero = True Then
					If cmd.argCount = 0 Then
						cmdResponse.args(0) = LocationEx.getCurJointPos().toString(AxisOrder_Dynax + AXISDISPLAY_CENTERZERO)
					ElseIf cmd.argCount = 1 Then
						tempStrSplitBuf = LocationEx.getCurJointPos().toString(AxisOrder_Dynax + AXISDISPLAY_CENTERZERO).Split(",")
						cmdResponse.args(0) = tempStrSplitBuf(cmd.ints(0)-1)
					Else
						ThrowError(ERR_INVALID_ARGUMENT)
					End If
				Else
					If cmd.argCount = 0 Then
						cmdResponse.args(0) = LocationEx.getCurJointPos().toString(AxisOrder_Dynax + AXISDISPLAY_ORIGINAL)
					ElseIf cmd.argCount = 1 Then
						cmdResponse.args(0) = FormatDoublePos(LocationEx.getCurJointPos().loc.angle(myRobot(robotIndex-1).dynaxToControlAxis(cmd.ints(0))))
					Else
						ThrowError(ERR_INVALID_ARGUMENT)
					End If
				End If
				
			Case "NMPS"
				If locationDisplayCenterZero = True Then
					If cmd.argCount = 0 Then
						cmdResponse.args(0) = LocationEx.getCurJointPos().toString(AxisOrder_TP + AXISDISPLAY_CENTERZERO)
					ElseIf cmd.argCount = 1 Then
						tempStrSplitBuf = LocationEx.getCurJointPos().toString(AxisOrder_TP + AXISDISPLAY_CENTERZERO).Split(",")
						cmdResponse.args(0) = tempStrSplitBuf(cmd.ints(0)-1)
					Else
						ThrowError(ERR_INVALID_ARGUMENT)
					End If
				Else
					If cmd.argCount = 0 Then
						cmdResponse.args(0) = LocationEx.getCurJointPos().toString(AxisOrder_TP + AXISDISPLAY_ORIGINAL)
					ElseIf cmd.argCount = 1 Then
						cmdResponse.args(0) = FormatDoublePos(LocationEx.getCurJointPos().loc.angle(myRobot(robotIndex-1).tpToControlAxis(cmd.ints(0))))
					Else
						ThrowError(ERR_INVALID_ARGUMENT)
					End If
				End If
			Case "MOCT"
				
				MotionCountTimer.ElapsedTimeSet(MotionCountTimer.MotionSequence, cmdResponse)

			Case "DELAY"
				CheckArgumentNo(cmd, 1)
				Thread.Sleep(cmd.rawArg)
				
			Case "VER"
				cmdResponse.args(0) = "VER:" + PROGRAM_VERSION
				cmdResponse.args(1) = "GPL:" + StrTok(Controller.PDB(103),",") 'GPL VERSION
				StrTok(Controller.PDB(132),",")
				cmdResponse.args(2) = StrTok(",")'FPGA VERSION DATE
				cmdResponse.args(3) = Controller.PDB(110) 'SERIAL NUMBER
				
			Case "NAME"
				cmdResponse.args(0) = myRobot(robotIndex-1).name
				
			Case "RPS"
				cmdResponse.args(0) = "V01=" + Format(Controller.PowerState,"00")
			
			Case "RMHS"
				cmdResponse.args(0) = "V01=" + thePDBManager.getPDB(PDB_MOTOR_HOME_STATE)
				
			Case "ENABLE"
				myRobot(robotIndex-1).servoEnable(True)
			
			Case "DISABLE"
				myRobot(robotIndex-1).servoEnable(False)
			
			Case "SEVO"
				CheckArgumentNo(cmd, 2)
				If cmd.ints(1) = 1 Then
					myRobot(robotIndex-1).servoEnable(True)
				ElseIf cmd.ints(1) = 0 Then
					myRobot(robotIndex-1).servoEnable(False)
				Else
					ThrowError(ERR_INVALID_ARGUMENT)
				End If
				
			
			Case "HND"
				If cmd.argCount = 0 Then
					cmdResponse.args(0) = "V01=" + Format(myRobot(robotIndex-1).getSelectedArmIndex(),"0")
				ElseIf cmd.argCount = 1 Then
					myRobot(robotIndex-1).setSelectedArmIndex(cmd.ints(0))
				Else
					CheckArgumentNo(cmd, -1)
				End If
				
			Case "FZS"
				If cmd.argCount = 0 Then
					myRobot(robotIndex-1).setFactoryZero(0)
				ElseIf cmd.ints(0) = 0 Then
					myRobot(robotIndex-1).setFactoryZero(0)
				Else
					myRobot(robotIndex-1).setFactoryZero(myRobot(robotIndex-1).tpToControlAxis(cmd.ints(0)))
				End If
				thePDBManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
				
			Case "PDB"
				Select cmd.argCount
				Case 1
					cmdResponse.args(0) = thePDBManager.getPDB(cmd.ints(0))
				Case 2
					If rt1.getRT1Item(cmd.ints(0)).axisParam = True Then
						cmdResponse.args(0) = thePDBManager.getPDB(cmd.ints(0), myRobot(robotIndex-1).tpToControlAxis(cmd.ints(1)))
					Else
						cmdResponse.args(0) = thePDBManager.getPDB(cmd.ints(0), cmd.ints(1))
					End If
				Case 3
					If rt1.getRT1Item(cmd.ints(0)).axisParam = True Then
						thePDBManager.setPDB_str(cmd.ints(0), myRobot(robotIndex-1).tpToControlAxis(cmd.ints(1)), cmd.args(2))
					Else
						thePDBManager.setPDB_str(cmd.ints(0), cmd.ints(1), cmd.args(2))
					End If
					thePDBManager.save()
					If cmd.sourceDevice = COM_TP Then
						DataFile.SaveReservationThreadStart()
					End If
				Case Else
					CheckArgumentNo(cmd, -1)
				End Select
			
			Case "RT1"
				CheckArgumentNo(cmd, 1)
				cmdResponse.args(0) = rt1.getItemRawStr(cmd.ints(0))
				
			Case "RALIMIT"
				For i = 1 To myRobot(robotIndex-1).tpAxisCount
					If myRobot(robotIndex-1).zAxisCount > 1 And _
						myRobot(robotIndex-1).tpToControlAxis(i) = myRobot(robotIndex-1).zIndexToAxis(1) Then 'mulit Z
						tempValue_dbl = 0
						For j = 1 To myRobot(robotIndex-1).zAxisCount
							tempValue_dbl = tempValue_dbl + thePDBManager.getPDB(PDB_MAX_HARD_LIMIT,myRobot(robotIndex-1).zIndexToAxis(j))
						Next j
						cmdResponse.args((i-1)*4 + 0) = FormatDoublePos(tempValue_dbl)
						tempValue_dbl = 0
						For j = 1 To myRobot(robotIndex-1).zAxisCount
							tempValue_dbl = tempValue_dbl + thePDBManager.getPDB(PDB_MIN_HARD_LIMIT,myRobot(robotIndex-1).zIndexToAxis(j))
						Next j
						cmdResponse.args((i-1)*4 + 1) = FormatDoublePos(tempValue_dbl)
						tempValue_dbl = 0
						For j = 1 To myRobot(robotIndex-1).zAxisCount
							tempValue_dbl = tempValue_dbl + thePDBManager.getPDB(PDB_MAX_SOFT_LIMIT,myRobot(robotIndex-1).zIndexToAxis(j))
						Next j
						cmdResponse.args((i-1)*4 + 2) = FormatDoublePos(tempValue_dbl)
						tempValue_dbl = 0
						For j = 1 To myRobot(robotIndex-1).zAxisCount
							tempValue_dbl = tempValue_dbl + thePDBManager.getPDB(PDB_MIN_SOFT_LIMIT,myRobot(robotIndex-1).zIndexToAxis(j))
						Next j
						cmdResponse.args((i-1)*4 + 3) = FormatDoublePos(tempValue_dbl)
					Else
						robotArm = myRobot(robotIndex-1).isArmAxis(myRobot(robotIndex-1).tpToControlAxis(i))
						If locationDisplayCenterZero = True And (Not(robotArm Is Nothing)) Then
							cmdResponse.args((i-1)*4 + 0) = FormatDoublePos(CDbl(thePDBManager.getPDB(PDB_MAX_HARD_LIMIT,myRobot(robotIndex-1).tpToControlAxis(i))) - robotArm.armCenterDeg)
							cmdResponse.args((i-1)*4 + 1) = FormatDoublePos(CDbl(thePDBManager.getPDB(PDB_MIN_HARD_LIMIT,myRobot(robotIndex-1).tpToControlAxis(i))) - robotArm.armCenterDeg)
							cmdResponse.args((i-1)*4 + 2) = FormatDoublePos(CDbl(thePDBManager.getPDB(PDB_MAX_SOFT_LIMIT,myRobot(robotIndex-1).tpToControlAxis(i))) - robotArm.armCenterDeg)
							cmdResponse.args((i-1)*4 + 3) = FormatDoublePos(CDbl(thePDBManager.getPDB(PDB_MIN_SOFT_LIMIT,myRobot(robotIndex-1).tpToControlAxis(i))) - robotArm.armCenterDeg)
						Else
							cmdResponse.args((i-1)*4 + 0) = FormatDoublePos(CDbl(thePDBManager.getPDB(PDB_MAX_HARD_LIMIT,myRobot(robotIndex-1).tpToControlAxis(i))))
							cmdResponse.args((i-1)*4 + 1) = FormatDoublePos(CDbl(thePDBManager.getPDB(PDB_MIN_HARD_LIMIT,myRobot(robotIndex-1).tpToControlAxis(i))))
							cmdResponse.args((i-1)*4 + 2) = FormatDoublePos(CDbl(thePDBManager.getPDB(PDB_MAX_SOFT_LIMIT,myRobot(robotIndex-1).tpToControlAxis(i))))
							cmdResponse.args((i-1)*4 + 3) = FormatDoublePos(CDbl(thePDBManager.getPDB(PDB_MIN_SOFT_LIMIT,myRobot(robotIndex-1).tpToControlAxis(i))))
						End If
					End If
				Next i
				
			Case "LIMIT"
				If cmd.argCount = 1 Then
					If myRobot(robotIndex-1).zAxisCount > 1 And _
						myRobot(robotIndex-1).tpToControlAxis(cmd.ints(0)) = myRobot(robotIndex-1).zIndexToAxis(1) Then 'mulit Z
						tempValue_dbl = 0
						For j = 1 To myRobot(robotIndex-1).zAxisCount
							tempValue_dbl = tempValue_dbl + CDbl(thePDBManager.getPDB(PDB_MAX_HARD_LIMIT,myRobot(robotIndex-1).zIndexToAxis(j)))
						Next j
						cmdResponse.args(0) = FormatDoublePos(tempValue_dbl)
						tempValue_dbl = 0
						For j = 1 To myRobot(robotIndex-1).zAxisCount
							tempValue_dbl = tempValue_dbl + CDbl(thePDBManager.getPDB(PDB_MIN_HARD_LIMIT,myRobot(robotIndex-1).zIndexToAxis(j)))
						Next j
						cmdResponse.args(1) = FormatDoublePos(tempValue_dbl)
						tempValue_dbl = 0
						For j = 1 To myRobot(robotIndex-1).zAxisCount
							tempValue_dbl = tempValue_dbl + CDbl(thePDBManager.getPDB(PDB_MAX_SOFT_LIMIT,myRobot(robotIndex-1).zIndexToAxis(j)))
						Next j
						cmdResponse.args(2) = FormatDoublePos(tempValue_dbl)
						tempValue_dbl = 0
						For j = 1 To myRobot(robotIndex-1).zAxisCount
							tempValue_dbl = tempValue_dbl + CDbl(thePDBManager.getPDB(PDB_MIN_SOFT_LIMIT,myRobot(robotIndex-1).zIndexToAxis(j)))
						Next j
						cmdResponse.args(3) = FormatDoublePos(tempValue_dbl)
					Else
						robotArm = myRobot(robotIndex-1).isArmAxis(myRobot(robotIndex-1).tpToControlAxis(cmd.ints(0)))
						If locationDisplayCenterZero = True And (Not(robotArm Is Nothing)) Then
							cmdResponse.args(0) = FormatDoublePos(CDbl(thePDBManager.getPDB(PDB_MAX_HARD_LIMIT,myRobot(robotIndex-1).tpToControlAxis(cmd.ints(0)))) - robotArm.armCenterDeg)
							cmdResponse.args(1) = FormatDoublePos(CDbl(thePDBManager.getPDB(PDB_MIN_HARD_LIMIT,myRobot(robotIndex-1).tpToControlAxis(cmd.ints(0)))) - robotArm.armCenterDeg)
							cmdResponse.args(2) = FormatDoublePos(CDbl(thePDBManager.getPDB(PDB_MAX_SOFT_LIMIT,myRobot(robotIndex-1).tpToControlAxis(cmd.ints(0)))) - robotArm.armCenterDeg)
							cmdResponse.args(3) = FormatDoublePos(CDbl(thePDBManager.getPDB(PDB_MIN_SOFT_LIMIT,myRobot(robotIndex-1).tpToControlAxis(cmd.ints(0)))) - robotArm.armCenterDeg)
						Else
							cmdResponse.args(0) = FormatDoublePos(CDbl(thePDBManager.getPDB(PDB_MAX_HARD_LIMIT,myRobot(robotIndex-1).tpToControlAxis(cmd.ints(0)))))
							cmdResponse.args(1) = FormatDoublePos(CDbl(thePDBManager.getPDB(PDB_MIN_HARD_LIMIT,myRobot(robotIndex-1).tpToControlAxis(cmd.ints(0)))))
							cmdResponse.args(2) = FormatDoublePos(CDbl(thePDBManager.getPDB(PDB_MAX_SOFT_LIMIT,myRobot(robotIndex-1).tpToControlAxis(cmd.ints(0)))))
							cmdResponse.args(3) = FormatDoublePos(CDbl(thePDBManager.getPDB(PDB_MIN_SOFT_LIMIT,myRobot(robotIndex-1).tpToControlAxis(cmd.ints(0)))))
						End If
					End If
				ElseIf cmd.argCount = 5 Then
					If myRobot(robotIndex-1).zAxisCount > 1 And _
						myRobot(robotIndex-1).tpToControlAxis(cmd.ints(0)) = myRobot(robotIndex-1).zIndexToAxis(1) Then 'mulit Z
						For j = 1 To myRobot(robotIndex-1).zAxisCount
							thePDBManager.setLimit(myRobot(robotIndex-1).zIndexToAxis(j), _
							cmd.dbls(1) / myRobot(robotIndex-1).zAxisCount, _
							cmd.dbls(2) / myRobot(robotIndex-1).zAxisCount, _
							cmd.dbls(3) / myRobot(robotIndex-1).zAxisCount, _
							cmd.dbls(4) / myRobot(robotIndex-1).zAxisCount)
						Next j
					Else
						robotArm = myRobot(robotIndex-1).isArmAxis(myRobot(robotIndex-1).tpToControlAxis(cmd.ints(0)))
						If locationDisplayCenterZero = True And (Not(robotArm Is Nothing)) Then
							thePDBManager.setLimit(myRobot(robotIndex-1).tpToControlAxis(cmd.ints(0)), cmd.dbls(1) + robotArm.armCenterDeg, cmd.dbls(2) + robotArm.armCenterDeg, cmd.dbls(3) + robotArm.armCenterDeg, cmd.dbls(4) + robotArm.armCenterDeg)
						Else
							thePDBManager.setLimit(myRobot(robotIndex-1).tpToControlAxis(cmd.ints(0)), cmd.dbls(1), cmd.dbls(2), cmd.dbls(3), cmd.dbls(4))
						End If
					End If
					thePDBManager.save()
					If cmd.sourceDevice = COM_TP Then
						DataFile.SaveReservationThreadStart()
					End If
				Else
					CheckArgumentNo(cmd, -1)
				End If
				
			Case "CMDLOG"
				If cmd.argCount = 0 Then
					cmdResponse.args(0) = Command.NotNeedLogCommands
				Else
					Command.NotNeedLogCommands = ""
					For i = 0 To cmd.argCount - 1
						Command.NotNeedLogCommands = Command.NotNeedLogCommands + "<" + cmd.args(i) + ">"
					Next i
				End If
				
			Case "CMDLOG+"
				CheckArgumentNo(cmd, 1)
				Command.NotNeedLogCommands = Command.NotNeedLogCommands + "<" + cmd.args(0) + ">"
				
			Case "CMDLOG-"
				CheckArgumentNo(cmd, 1)
				While True
					tempValue_int = Command.NotNeedLogCommands.indexOf("<" + cmd.args(0) + ">")
					If tempValue_int = -1 Then
						Exit While
					End If
					Command.NotNeedLogCommands = Mid(Command.NotNeedLogCommands,1,tempValue_int) + _
					Mid(Command.NotNeedLogCommands,_
						tempValue_int + Len("<" + cmd.args(0) + ">") + 1,_
						Len(Command.NotNeedLogCommands) - tempValue_int - Len("<" + cmd.args(0) + ">")_
					)
				End While

			Case "RERRLOG"
				If cmd.argCount = 0 Then
					If errorLogWriter_new Is Nothing Then
						cmdResponse.args(0) = "V01=" + CStr(errorLogWriter_old.getErrLogCount())
					Else
						cmdResponse.args(0) = "V01=" + CStr(errorLogWriter_new.getErrLogCount())
					End If
				ElseIf cmd.argCount = 1 Then
					If errorLogWriter_new Is Nothing Then
						cmdResponse.args(0) = "V01=" + errorLogWriter_old.getErrLog(cmd.ints(0))
					Else
						cmdResponse.args(0) = "V01=" + errorLogWriter_new.getErrLog(cmd.ints(0))
					End If
				Else
					CheckArgumentNo(cmd, -1)
				End If

			Case "POR"
				If cmd.argCount = 1 Then
					tempLoc = myRobot(robotIndex-1).thePointDataManager.getLocation(cmd.ints(0))
					If tempLoc Is Nothing Then
						tempLoc = New LocationEx()
					End If
					If tempLoc.type = COORD_CARTESIAN Then
						tempResponse = New Response("POS")
					Else
						tempResponse = New Response("POA")
					End If
					If locationDisplayCenterZero = True Then
						tempResponse.args(0) = tempLoc.toString(AxisOrder_Dynax + AXISDISPLAY_CENTERZERO)
					Else
						tempResponse.args(0) = tempLoc.toString(AxisOrder_Dynax + AXISDISPLAY_ORIGINAL)
					End If
					respList.addResponseList(tempResponse)
				ElseIf cmd.argCount = 2 Then
					For i = 0 To cmd.ints(1)-1
						tempLoc = myRobot(robotIndex-1).thePointDataManager.getLocation(cmd.ints(0) + i)
						If tempLoc Is Nothing Then
							tempLoc = New LocationEx()
						End If
						If tempLoc.type = COORD_CARTESIAN Then
							tempResponse = New Response("POS")
						Else
							tempResponse = New Response("POA")
						End If
						If locationDisplayCenterZero = True Then
							tempResponse.args(0) = tempLoc.toString(AxisOrder_Dynax + AXISDISPLAY_CENTERZERO)
						Else
							tempResponse.args(0) = tempLoc.toString(AxisOrder_Dynax + AXISDISPLAY_ORIGINAL)
						End If
						respList.addResponseList(tempResponse)
					Next i
				Else
					CheckArgumentNo(cmd, -1)
				End If
				
			Case "NPOR"
				If cmd.argCount = 1 Then
					tempLoc = myRobot(robotIndex-1).thePointDataManager.getLocation(cmd.ints(0))
					If tempLoc Is Nothing Then
						tempLoc = New LocationEx()
					End If
					If tempLoc.type = COORD_CARTESIAN Then
						tempResponse = New Response("POS")
					Else
						tempResponse = New Response("POA")
					End If
					If locationDisplayCenterZero = True Then
						tempResponse.args(0) = tempLoc.toString(AxisOrder_TP + AXISDISPLAY_CENTERZERO)
					Else
						tempResponse.args(0) = tempLoc.toString(AxisOrder_TP + AXISDISPLAY_ORIGINAL)
					End If
					respList.addResponseList(tempResponse)
				ElseIf cmd.argCount = 2 Then
					For i = 0 To cmd.ints(1)-1
						tempLoc = myRobot(robotIndex-1).thePointDataManager.getLocation(cmd.ints(0) + i)
						If tempLoc Is Nothing Then
							tempLoc = New LocationEx()
						End If
						If tempLoc.type = COORD_CARTESIAN Then
							tempResponse = New Response("POS")
						Else
							tempResponse = New Response("POA")
						End If
						If locationDisplayCenterZero = True Then
							tempResponse.args(0) = tempLoc.toString(AxisOrder_TP + AXISDISPLAY_CENTERZERO)
						Else
							tempResponse.args(0) = tempLoc.toString(AxisOrder_TP + AXISDISPLAY_ORIGINAL)
						End If
						respList.addResponseList(tempResponse)
					Next i
				Else
					CheckArgumentNo(cmd, -1)
				End If
			
			Case "POF"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				End If
				
				Select cmd.ints(0)
				Case 1
					CheckArgumentNo(cmd, 2)
					myRobot(robotIndex-1).thePointDataManager.StartWrite(cmd.ints(1))
				Case 2
					myRobot(robotIndex-1).thePointDataManager.EndWrite()
				Case Else
					ThrowError(ERR_INVALID_ARGUMENT)
				End Select
				
			Case "POS"
				If locationDisplayCenterZero = True Then
					myRobot(robotIndex-1).thePointDataManager.setDataToCurrentIndex(New LocationEx(COORD_CARTESIAN,cmd.rawArg,AXISORDER_TP + AXISDISPLAY_CENTERZERO))
				Else
					myRobot(robotIndex-1).thePointDataManager.setDataToCurrentIndex(New LocationEx(COORD_CARTESIAN,cmd.rawArg,AXISORDER_TP + AXISDISPLAY_ORIGINAL))
				End If
				myRobot(robotIndex-1).thePointDataManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If

			Case "POA"
				If locationDisplayCenterZero = True Then
					myRobot(robotIndex-1).thePointDataManager.setDataToCurrentIndex(New LocationEx(COORD_JOINT,cmd.rawArg,AXISORDER_TP + AXISDISPLAY_CENTERZERO))
				Else
					myRobot(robotIndex-1).thePointDataManager.setDataToCurrentIndex(New LocationEx(COORD_JOINT,cmd.rawArg,AXISORDER_TP + AXISDISPLAY_ORIGINAL))
				End If
				myRobot(robotIndex-1).thePointDataManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If

			Case "CURPOS"		' Set Point Data From Current User Pos
				CheckArgumentNo(cmd, 1)
				myRobot(robotIndex-1).thePointDataManager.StartWrite(cmd.ints(0))
				myRobot(robotIndex-1).thePointDataManager.setDataToCurrentIndex(LocationEx.getCurCartPos())
				myRobot(robotIndex-1).thePointDataManager.EndWrite()
				myRobot(robotIndex-1).thePointDataManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If

			Case "CURPOA"		' Set Point Data From Current Joint Pos
				CheckArgumentNo(cmd, 1)
				myRobot(robotIndex-1).thePointDataManager.StartWrite(cmd.ints(0))
				myRobot(robotIndex-1).thePointDataManager.setDataToCurrentIndex(LocationEx.getCurJointPos())
				myRobot(robotIndex-1).thePointDataManager.EndWrite()
				myRobot(robotIndex-1).thePointDataManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If

			Case "MSO"
				If cmd.argCount = 0 Then
					For i = 1 To myRobot(robotIndex-1).tpAxisCount
						cmdResponse.args(i-1) = Format(thePDBManager.getMotorMaxSpeedPersent(myRobot(robotIndex-1).tpToControlAxis(i)),"000")
					Next i
				ElseIf cmd.argCount = myRobot(robotIndex-1).tpAxisCount Then
					For i = 1 To myRobot(robotIndex-1).tpAxisCount
						thePDBManager.setMotorMaxSpeedPersent(myRobot(robotIndex-1).tpToControlAxis(i), cmd.ints(i-1))
					Next i
					thePDBManager.save()
					If cmd.sourceDevice = COM_TP Then
						DataFile.SaveReservationThreadStart()
					End If
				Else
					CheckArgumentNo(cmd, -1)
				End If
			
			Case "MST","MSS"
				If cmd.argCount = 0 Then
					For i = 1 To myRobot(robotIndex-1).tpAxisCount
						cmdResponse.args(i-1) = Format(thePDBManager.getMotorAccelTime(myRobot(robotIndex-1).tpToControlAxis(i)),"0.00")
					Next i
				ElseIf cmd.argCount = myRobot(robotIndex-1).tpAxisCount Then
					For i = 1 To myRobot(robotIndex-1).tpAxisCount
						thePDBManager.setMotorAccelTime(myRobot(robotIndex-1).tpToControlAxis(i), cmd.dbls(i-1))
					Next i
					thePDBManager.save()
					If cmd.sourceDevice = COM_TP Then
						DataFile.SaveReservationThreadStart()
					End If
				Else
					CheckArgumentNo(cmd, -1)
				End If
				
			Case "MOD" ' for dynax
				
			Case "SPMODE" ' it need v01, because only one arg response.
				If cmd.argCount = 1 Then
					Select cmd.ints(0)
					Case 1
						If ContinuousMotionMode = True Then
							cmdResponse.args(0) = "V01=" + "1"
						Else
							cmdResponse.args(0) = "V01=" + "0"
						End If
					Case 2
						If ResponseEarlyReturnMode = True Then
							cmdResponse.args(0) = "V01=" + "1"
						Else
							cmdResponse.args(0) = "V01=" + "0"
						End If
					Case 3
						If ShowCommandLogToConsole = True Then
							cmdResponse.args(0) = "V01=" + "1"
						Else
							cmdResponse.args(0) = "V01=" + "0"
						End If
					Case 4
						If UseThreeCountErrorCode = True Then
							cmdResponse.args(0) = "V01=" + "1"
						Else
							cmdResponse.args(0) = "V01=" + "0"
						End If
					Case Else
						ThrowError(ERR_INVALID_ARGUMENT)
					End Select
				ElseIf cmd.argCount = 2 Then
					Select cmd.ints(0)
					Case 1
						ContinuousMotionMode = CBool(cmd.ints(1))
						theSystem.setValue("ContinuousMotionMode",CStr(cmd.ints(1)))
					Case 2
						ResponseEarlyReturnMode = CBool(cmd.ints(1))
						theSystem.setValue("ResponseEarlyReturnMode",CStr(cmd.ints(1)))
					Case 3
						ShowCommandLogToConsole = CBool(cmd.ints(1))
						theSystem.setValue("ShowCommandLogToConsole",CStr(cmd.ints(1)))
					Case 4
						UseThreeCountErrorCode = CBool(cmd.ints(1))
						theSystem.setValue("UseThreeCountErrorCode",CStr(cmd.ints(1)))
					Case Else
						ThrowError(ERR_INVALID_ARGUMENT)
					End Select
					theSystem.save()
					If cmd.sourceDevice = COM_TP Then
						DataFile.SaveReservationThreadStart()
					End If
				Else
					CheckArgumentNo(cmd, -1)
				End If
				
				
				
				
				
				
				
				
			''''''''''''''''''''''''''''''''''''''''''''''''''''''
			'''''''''''''''''' IO check command ''''''''''''''''''
			''''''''''''''''''''''''''''''''''''''''''''''''''''''
			
			' virtual IO for dynax IO Map
			Case "IDI"
				Select cmd.argCount
				Case 1
					cmdResponse.args(0) = intToHex(dynaxIO.getDI_Chanel(cmd.ints(0)))
				Case 2
					For i = 0 To cmd.ints(1)-1
						cmdResponse.args(i) = intToHex(dynaxIO.getDI_Chanel(cmd.ints(0)+i))
					Next i
				Case Else
					ThrowError(ERR_INVALID_FORMAT)
				End Select
				
			Case "IDO"
				Select cmd.argCount
				Case 1
					cmdResponse.args(0) = intToHex(dynaxIO.getDO_Chanel(cmd.ints(0)))
				Case 2
					For i = 0 To cmd.ints(1)-1
						cmdResponse.args(i) = intToHex(dynaxIO.getDO_Chanel(cmd.ints(0)+i))
					Next i
				Case Else
					ThrowError(ERR_INVALID_FORMAT)
				End Select
				
			Case "IOS"
				CheckArgumentNo(cmd, 4)
				For i = 0 To cmd.ints(1)-1
					cmdResponse.args(i) = intToHex(dynaxIO.getDI_Chanel(cmd.ints(0)+i))
				Next i
				For i = 0 To cmd.ints(3)-1
					cmdResponse.args(cmd.ints(1)+i) = intToHex(dynaxIO.getDO_Chanel(cmd.ints(2)+i))
				Next i
				
			Case "IOT"
				If m_useDynaxIOT = True Then
					For i = 0 To cmd.argCount - 1
						dynaxIO.setDORaw(cmd.args(i))
					Next i
				Else
					For i = 0 To cmd.argCount - 1
						robotIO.setDORaw(cmd.args(i))
					Next i
				End If
				
			Case "IDOT"
				For i = 0 To cmd.argCount - 1
					dynaxIO.setDORaw(cmd.args(i))
				Next i
			
			' robot IO				
			Case "NIDI"
				Select cmd.argCount
				Case 1
					cmdResponse.args(0) = intToHex(robotIO.getDI_Chanel(cmd.ints(0)))
				Case 2
					For i = 0 To cmd.ints(1)-1
						cmdResponse.args(i) = intToHex(robotIO.getDI_Chanel(cmd.ints(0)+i))
					Next i
				Case Else
					ThrowError(ERR_INVALID_FORMAT)
				End Select
				
			Case "NIDO"
				Select cmd.argCount
				Case 1
					cmdResponse.args(0) = intToHex(robotIO.getDO_Chanel(cmd.ints(0)))
				Case 2
					For i = 0 To cmd.ints(1)-1
						cmdResponse.args(i) = intToHex(robotIO.getDO_Chanel(cmd.ints(0)+i))
					Next i
				Case Else
					ThrowError(ERR_INVALID_FORMAT)
				End Select
				
			Case "NIOS"
				CheckArgumentNo(cmd, 4)
				For i = 0 To cmd.ints(1)-1
					cmdResponse.args(i) = intToHex(robotIO.getDI_Chanel(cmd.ints(0)+i))
				Next i
				For i = 0 To cmd.ints(3)-1
					cmdResponse.args(cmd.ints(1)+i) = intToHex(robotIO.getDO_Chanel(cmd.ints(2)+i))
				Next i
				
			Case "NIOT"
				For i = 0 To cmd.argCount - 1
					robotIO.setDORaw(cmd.args(i))
				Next i
				
			' robot additional IO
			Case "RIDI"
				Select cmd.argCount
				Case 1
					cmdResponse.args(0) = intToHex(robotIO.getRemoteDI_Chanel(cmd.ints(0)))
				Case 2
					For i = 0 To cmd.ints(1)-1
						cmdResponse.args(i) = intToHex(robotIO.getRemoteDI_Chanel(cmd.ints(0)+i))
					Next i
				Case Else
					ThrowError(ERR_INVALID_FORMAT)
				End Select
				
			Case "RIDO"
				Select cmd.argCount
				Case 1
					cmdResponse.args(0) = intToHex(robotIO.getRemoteDO_Chanel(cmd.ints(0)))
				Case 2
					For i = 0 To cmd.ints(1)-1
						cmdResponse.args(i) = intToHex(robotIO.getRemoteDO_Chanel(cmd.ints(0)+i))
					Next i
				Case Else
					ThrowError(ERR_INVALID_FORMAT)
				End Select
				
			Case "RIOS"
				CheckArgumentNo(cmd, 4)
				For i = 0 To cmd.ints(1)-1
					cmdResponse.args(i) = intToHex(robotIO.getRemoteDI_Chanel(cmd.ints(0)+i))
				Next i
				For i = 0 To cmd.ints(3)-1
					cmdResponse.args(cmd.ints(1)+i) = intToHex(robotIO.getRemoteDO_Chanel(cmd.ints(2)+i))
				Next i
			
			Case "RIOT"
				For i = 0 To cmd.argCount - 1
					robotIO.setRemoteDORaw(cmd.args(i))
				Next i
				
			' TP IO				
			Case "TPIDI"
				Select cmd.argCount
				Case 1
					cmdResponse.args(0) = intToHex(tpIO.getDI_Chanel(cmd.ints(0)))
				Case 2
					For i = 0 To cmd.ints(1)-1
						cmdResponse.args(i) = intToHex(tpIO.getDI_Chanel(cmd.ints(0)+i))
					Next i
				Case Else
					ThrowError(ERR_INVALID_FORMAT)
				End Select
				
			Case "TPIDO"
				Select cmd.argCount
				Case 1
					cmdResponse.args(0) = intToHex(tpIO.getDO_Chanel(cmd.ints(0)))
				Case 2
					For i = 0 To cmd.ints(1)-1
						cmdResponse.args(i) = intToHex(tpIO.getDO_Chanel(cmd.ints(0)+i))
					Next i
				Case Else
					ThrowError(ERR_INVALID_FORMAT)
				End Select
				
			Case "TPIOS"
				CheckArgumentNo(cmd, 4)
				For i = 0 To cmd.ints(1)-1
					cmdResponse.args(i) = intToHex(tpIO.getDI_Chanel(cmd.ints(0)+i))
				Next i
				For i = 0 To cmd.ints(3)-1
					cmdResponse.args(cmd.ints(1)+i) = intToHex(tpIO.getDO_Chanel(cmd.ints(2)+i))
				Next i
			
			Case "TPIOT"
				For i = 0 To cmd.argCount - 1
					tpIO.setDORaw(cmd.args(i))
				Next i
				
			Case "TRIGGER1"
				CheckArgumentNo(cmd, 2)
				Move.Trigger(100, cmd.ints(0), cmd.ints(1)) 'set to current motion
				
			Case "TRIGGER2"
				CheckArgumentNo(cmd, 2)
				Move.Trigger(1100, cmd.ints(0), cmd.ints(1)) 'set to current motion
			


			
			
			
			
			
			
			
			
			
			
			
			
			
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			'''''''''''''''''' System Setting command ''''''''''''''''''
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			
			Case "VBU"
				If cmd.argCount = 0 Then
					cmdResponse.args(0) = "V01=" + CStr(theSystem.crashDetectUse)
				ElseIf cmd.argCount = 1 Then
					theSystem.crashDetectUse = cmd.ints(0)
					theSystem.save()
					If cmd.sourceDevice = COM_TP Then
						DataFile.SaveReservationThreadStart()
					End If
				Else
					CheckArgumentNo(cmd, -1)
				End If
			
			Case "RADR"
				cmdResponse.args(0) = "V01=" + thePDBManager.getPDB(PDB_IPADDRESS)
			
			Case "WADR"
				CheckArgumentNo(cmd, 1)
				thePDBManager.setPDB_str(PDB_IPADDRESS,cmd.args(0))
				thePDBManager.save()
				If autoChangeRIOAddress = True Then
					tempStrSplitBuf = cmd.args(0).Split(".")
					For i = 1 To cantapsIOCount
						theSystem.rioAddress(i-1) = tempStrSplitBuf(0) + "." + tempStrSplitBuf(1) + "." + tempStrSplitBuf(2) + "." + CStr(CInt(tempStrSplitBuf(3)) + autoChangeRIOAddressInterval*i)
						cantapsIO(i-1).cIPADDRESS = tempStrSplitBuf(0) + "." + tempStrSplitBuf(1) + "." + tempStrSplitBuf(2) + "." + CStr(CInt(tempStrSplitBuf(3)) + autoChangeRIOAddressInterval*i)
						cantapsIO(i-1).utillStop = False
					    cantapsIO(i-1).SpecialOrder = 1
						theSystem.save()
					Next i
				End If
				DataFile.SaveReservationThreadStart() ' change IP always save
				
			Case "RTIP"
				cmdResponse.args(0) = "V01=" + CStr(theSystem.tcpipPortNum)
			
			Case "WTIP"
				CheckArgumentNo(cmd, 1)
				theSystem.tcpipPortNum = cmd.ints(0)
				theSystem.save()
				DataFile.SaveReservationThreadStart() ' change IP always save
				
			Case "RIOCOUNT"
				cmdResponse.args(0) = "V01=" + Format(cantapsIOCount,"0")
				
			Case "RIOADR"
				If cmd.argCount = 1 Then
					cmdResponse.args(0) = "V01=" + theSystem.rioAddress(cmd.ints(0)-1)
				ElseIf cmd.argCount = 2 Then
					theSystem.rioAddress(cmd.ints(0)-1) = cmd.args(1)
					cantapsIO(cmd.ints(0)-1).cIPADDRESS = cmd.args(1)
					cantapsIO(cmd.ints(0)-1).utillStop = False
				    cantapsIO(cmd.ints(0)-1).SpecialOrder = 1
					theSystem.save()
					DataFile.SaveReservationThreadStart() ' change IP always save
				Else
					CheckArgumentNo(cmd, -1)
				End If
				
			Case "RDEM"
				cmdResponse.args(0) = "V01=" + CStr(theSystem.demoMode)
			
			Case "WDEM"
				CheckArgumentNo(cmd, 1)
				theSystem.demoMode = cmd.ints(0)
				theSystem.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			
			Case "RFEF"
				cmdResponse.args(0) = CStr(theSystem.FanErrorFlg)
				
			Case "WFEF"
				CheckArgumentNo(cmd, 1)
				theSystem.FanErrorFlg = cmd.ints(0)
				theSystem.save()	
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If

			
			Case "RSNM"
				cmdResponse.args(0) = "V01=" + CStr(theSystem.retryCount)
			
			Case "WSNM"
				CheckArgumentNo(cmd, 1)
				theSystem.retryCount = cmd.ints(0)
				theSystem.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
				
			Case "RLDM"
				cmdResponse.args(0) = "V01=" + CStr(theSystem.interlockMode)

			Case "WLDM"
				CheckArgumentNo(cmd, 1)
				theSystem.interlockMode = cmd.ints(0)
				theSystem.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
				
			Case "RSKD"
				cmdResponse.args(0) = "V01=" + Format(theSystem.suctionOnTime,"0000")
				cmdResponse.args(1) = "V02=" + Format(theSystem.suctionOffTime,"0000")

			Case "WSKD"
				CheckArgumentNo(cmd, 2)
				theSystem.suctionOnTime = cmd.ints(0)
				theSystem.suctionOffTime = cmd.ints(1)
				theSystem.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
				
			Case "RHMS"
				For i = 0 To myRobot(robotIndex-1).tpAxisCount - 1
					cmdResponse.args(i) = "V" + Format(i+1, "00") + "=" + Format(myRobot(robotIndex-1).theProfileManager.homeSpeed,"000")
				Next i
			
			Case "WHMS"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				End If
				For i = 0 To cmd.argCount - 1
					If i = 0 Or tempValue_int > cmd.ints(i) Then 'min value
						tempValue_int = cmd.ints(i)
					End If
				Next i
				myRobot(robotIndex-1).theProfileManager.homeSpeed = tempValue_int
				myRobot(robotIndex-1).theProfileManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
				
			Case "RHIS"
				For i = 0 To myRobot(robotIndex-1).tpAxisCount - 1
					cmdResponse.args(i) = "V" + Format(i+1, "00") + "=" + Format(myRobot(robotIndex-1).theProfileManager.waferOnSpeed,"000")
				Next i
				
			Case "WHIS"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				End If
				For i = 0 To cmd.argCount - 1
					If i = 0 Or tempValue_int > cmd.ints(i) Then 'min value
						tempValue_int = cmd.ints(i)
					End If
				Next i
				myRobot(robotIndex-1).theProfileManager.waferOnSpeed = tempValue_int
				myRobot(robotIndex-1).theProfileManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
				
			Case "RLOS"
				For i = 0 To myRobot(robotIndex-1).tpAxisCount - 1
					cmdResponse.args(i) = "V" + Format(i+1, "00") + "=" + Format(myRobot(robotIndex-1).theProfileManager.waferOffSpeed,"000")
				Next i
				
			Case "WLOS"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				End If
				For i = 0 To cmd.argCount - 1
					If i = 0 Or tempValue_int > cmd.ints(i) Then 'min value
						tempValue_int = cmd.ints(i)
					End If
				Next i
				myRobot(robotIndex-1).theProfileManager.waferOffSpeed = tempValue_int
				myRobot(robotIndex-1).theProfileManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
				
			Case "RGETS"
				cmdResponse.args(i) = "V01=" + Format(myRobot(robotIndex-1).theProfileManager.waferOnSpeed,"000")
			
			Case "WGETS"
				CheckArgumentNo(cmd, 1)
				myRobot(robotIndex-1).theProfileManager.waferOnSpeed = cmd.ints(0)
				myRobot(robotIndex-1).theProfileManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			
			Case "RPUTS"
				cmdResponse.args(i) = "V01=" + Format(myRobot(robotIndex-1).theProfileManager.waferOffSpeed,"000")
			
			Case "WPUTS"
				CheckArgumentNo(cmd, 1)
				myRobot(robotIndex-1).theProfileManager.waferOffSpeed = cmd.ints(0)
				myRobot(robotIndex-1).theProfileManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			
			Case "RZSP"
				cmdResponse.args(0) = "V01=" + Format(myRobot(robotIndex-1).theProfileManager.zUpSpeed,"000")
				cmdResponse.args(1) = "V02=" + Format(myRobot(robotIndex-1).theProfileManager.zDownSpeed,"000")
				
			Case "WZSP"
				CheckArgumentNo(cmd, 2)
				myRobot(robotIndex-1).theProfileManager.zUpSpeed = cmd.ints(0)
				myRobot(robotIndex-1).theProfileManager.zDownSpeed = cmd.ints(1)
				myRobot(robotIndex-1).theProfileManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			
			Case "MAO"
				If cmd.argCount = 0 Then
					For i = 0 To myRobot(robotIndex-1).tpAxisCount - 1
						If robotCount = 1 Then
							cmdResponse.args(i) = "V" + Format(i+1, "00") + "=" + Format(myRobot(robotIndex-1).theProfileManager.systemSpeed,"000")
						Else
							cmdResponse.args(i) = "V" + Format(i+1, "00") + "=" + Format(myRobot(robotIndex-1).theProfileManager.robotSpeed,"000")
						End If
					Next i
				Else
					For i = 0 To cmd.argCount - 1
						If i = 0 Or tempValue_int > cmd.ints(i) Then 'min value
							tempValue_int = cmd.ints(i)
						End If
					Next i
					If robotCount = 1 Then
						myRobot(robotIndex-1).theProfileManager.systemSpeed = tempValue_int
					Else
						myRobot(robotIndex-1).theProfileManager.robotSpeed = tempValue_int
					End If
					myRobot(robotIndex-1).theProfileManager.save()
					If cmd.sourceDevice = COM_TP Then
						DataFile.SaveReservationThreadStart()
					End If
				End If
			
			Case "RSPD"
				If robotCount = 1 Then
					cmdResponse.args(0) = "V01=" + Format(myRobot(robotIndex-1).theProfileManager.systemSpeed,"000")
				Else
					cmdResponse.args(0) = "V01=" + Format(myRobot(robotIndex-1).theProfileManager.robotSpeed,"000")
				End If
				
			Case "WSPD","TSPD"
				CheckArgumentNo(cmd, 1)
				If robotCount = 1 Then
					myRobot(robotIndex-1).theProfileManager.systemSpeed = cmd.ints(0)
				Else
					myRobot(robotIndex-1).theProfileManager.robotSpeed = cmd.ints(0)
				End If
				myRobot(robotIndex-1).theProfileManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
				
			Case "RSPDM"
				If robotCount = 1 Then
					cmdResponse.args(0) = "V01=" + Format(myRobot(robotIndex-1).theProfileManager.systemManualSpeed,"000")
				Else
					cmdResponse.args(0) = "V01=" + Format(myRobot(robotIndex-1).theProfileManager.robotSpeed,"000")
				End If
			
			Case "WSPDM","TSPDM"
				CheckArgumentNo(cmd, 1)
				If robotCount = 1 Then
					myRobot(robotIndex-1).theProfileManager.systemManualSpeed = cmd.ints(0)
				Else
					myRobot(robotIndex-1).theProfileManager.robotSpeed = cmd.ints(0)
				End If
				myRobot(robotIndex-1).theProfileManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
				
				
			Case "RSSP"
				cmdResponse.args(0) = "V01=" + Format(myRobot(robotIndex-1).theProfileManager.systemSpeed,"000")
				
			Case "WSSP"
				CheckArgumentNo(cmd, 1)
				myRobot(robotIndex-1).theProfileManager.systemSpeed = cmd.ints(0)
				myRobot(robotIndex-1).theProfileManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If

			Case "JSS","MJS","MJF","MJO"
				If cmd.argCount = 0 Then
					For i = 0 To myRobot(robotIndex-1).tpAxisCount - 1
						cmdResponse.args(i) = "V" + Format(i+1, "00") + "=" + Format(myRobot(robotIndex-1).theProfileManager.jogSpeed,"000")
					Next i
				Else
					For i = 0 To cmd.argCount - 1
						If i = 0 Or tempValue_int > cmd.ints(i) Then 'min value
							tempValue_int = cmd.ints(i)
						End If
					Next i
					myRobot(robotIndex-1).theProfileManager.jogSpeed = tempValue_int
					myRobot(robotIndex-1).theProfileManager.save()
					If cmd.sourceDevice = COM_TP Then
						DataFile.SaveReservationThreadStart()
					End If
				End If
				
			Case "RJSS"
				For i = 0 To myRobot(robotIndex-1).tpAxisCount - 1
					cmdResponse.args(i) = "V" + Format(i+1, "00") + "=" + Format(myRobot(robotIndex-1).theProfileManager.jogSpeed,"000")
				Next i
				
			Case "WJSS","TJSS"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				End If
				For i = 0 To cmd.argCount - 1
					If i = 0 Or tempValue_int > cmd.ints(i) Then 'min value
						tempValue_int = cmd.ints(i)
					End If
				Next i
				myRobot(robotIndex-1).theProfileManager.jogSpeed = tempValue_int
				myRobot(robotIndex-1).theProfileManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
				
			Case "RASPD" 
				If thesystem.useAutoManualSpeed = True Then
					If robotCount = 1 Then
							cmdResponse.args(0) = "V01=" + Format(myRobot(robotIndex-1).theProfileManager.systemSpeed,"000")
							cmdResponse.args(1) = "V02=" + Format(myRobot(robotIndex-1).theProfileManager.systemManualSpeed,"000")
						Else
							cmdResponse.args(0) = "V01=" + Format(myRobot(robotIndex-1).theProfileManager.robotSpeed,"000")
							cmdResponse.args(1) = "V02=" + Format(myRobot(robotIndex-1).theProfileManager.systemManualSpeed,"000")
					End If
					cmdResponse.args(2) = "V03=" + Format(myRobot(robotIndex-1).theProfileManager.jogSpeed,"000")
					cmdResponse.args(3) = "V04=" + Format(myRobot(robotIndex-1).theProfileManager.homeSpeed,"000")
					cmdResponse.args(4) = "V05=" + Format(myRobot(robotIndex-1).theProfileManager.waferOnSpeed,"000")
					cmdResponse.args(5) = "V06=" + Format(myRobot(robotIndex-1).theProfileManager.waferOffSpeed,"000")
					cmdResponse.args(6) = "V07=" + Format(myRobot(robotIndex-1).theProfileManager.zUpSpeed,"000")
					cmdResponse.args(7) = "V08=" + Format(myRobot(robotIndex-1).theProfileManager.zDownSpeed,"000")
				Else
					If robotCount = 1 Then
						cmdResponse.args(0) = "V01=" + Format(myRobot(robotIndex-1).theProfileManager.systemSpeed,"000")
					Else
						cmdResponse.args(0) = "V01=" + Format(myRobot(robotIndex-1).theProfileManager.robotSpeed,"000")
					End If
					cmdResponse.args(1) = "V02=" + Format(myRobot(robotIndex-1).theProfileManager.jogSpeed,"000")
					cmdResponse.args(2) = "V03=" + Format(myRobot(robotIndex-1).theProfileManager.homeSpeed,"000")
					cmdResponse.args(3) = "V04=" + Format(myRobot(robotIndex-1).theProfileManager.waferOnSpeed,"000")
					cmdResponse.args(4) = "V05=" + Format(myRobot(robotIndex-1).theProfileManager.waferOffSpeed,"000")
					cmdResponse.args(5) = "V06=" + Format(myRobot(robotIndex-1).theProfileManager.zUpSpeed,"000")
					cmdResponse.args(6) = "V07=" + Format(myRobot(robotIndex-1).theProfileManager.zDownSpeed,"000")
				End If					
	
				
				
				
				
				
				
				
				
				
				
				
				
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			''''''''''''''''''''' Data Save command ''''''''''''''''''''
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			
			Case "SAVEDATA"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				End If
				theUserSaveData.save(cmd.ints(0), cmd.rawArgFrom(1))
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
				
			Case "LOADDATA"
				CheckArgumentNo(cmd, 1)
				cmdResponse.args(0) = theUserSaveData.load(cmd.ints(0))
				
			Case "SAVEFLASH"
				CheckArgumentNo(cmd, 1)
				DataFile.SaveReservationThreadStart()
				If cmd.ints(0) = 1 Then 'wait complete
					DataFile.WaitForSaveReservationThreadComplete()
				ElseIf cmd.ints(0) = 0 Then 'don't wait complete
				Else
					ThrowError(ERR_INVALID_FORMAT)
				End If
			Case "SAVINGCK" 
				cmdResponse.args(0) = CStr(Controller.PDBnum(910))		
				
				
				
				
				
			
			
			
			
			
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			'''''''''''''''''' Station Setting command '''''''''''''''''
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
			Case "RSSL"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				End If
				cmdResponse.args(0) = "V01=" + Format(theStationManager.getStation(cmd.ints(0)).slotCount,"000")
			
			Case "WSSL"
				CheckArgumentNo(cmd, 2)
				theStationManager.getStation(cmd.ints(0)).slotCount = cmd.ints(1)
				theStationManager.getStation(cmd.ints(0)).save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			
			Case "RSHT"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				End If
				cmdResponse.args(0) = "V01=" + CStr(theStationManager.getStation(cmd.ints(0)).typeListIndex)
				
			Case "WSHT"
				CheckArgumentNo(cmd, 2)
				theStationManager.getStation(cmd.ints(0)).typeListIndex = cmd.ints(1)
				theStationManager.getStation(cmd.ints(0)).save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			
			Case "RSPI"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				End If
				cmdResponse.args(0) = "V01=" + Format(CInt(theStationManager.getStation(cmd.ints(0)).slotPitch * 100),"0000")
			
			Case "WSPI"
				CheckArgumentNo(cmd, 2)
				theStationManager.getStation(cmd.ints(0)).slotPitch = CDbl(cmd.ints(1)) / 100
				theStationManager.getStation(cmd.ints(0)).save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
				
			Case "ROFF"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				End If
				cmdResponse.args(0) = "V01=" + Format(CInt(theStationManager.getStation(cmd.ints(0)).getOffset * 100),"0000")
				cmdResponse.args(1) = "V02=" + Format(CInt(theStationManager.getStation(cmd.ints(0)).putOffset * 100),"0000")
			
			Case "WOFF"
				CheckArgumentNo(cmd, 3)
				theStationManager.getStation(cmd.ints(0)).getOffset = CDbl(cmd.ints(1)) / 100
				theStationManager.getStation(cmd.ints(0)).putOffset = CDbl(cmd.ints(2)) / 100
				theStationManager.getStation(cmd.ints(0)).save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			
			Case "RSUS"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				End If
				cmdResponse.args(0) = "V01=" + Format(CInt(theStationManager.getStation(cmd.ints(0)).getDownOffset * 100),"0000")
				cmdResponse.args(1) = "V02=" + Format(CInt(theStationManager.getStation(cmd.ints(0)).getUpOffset * 100),"0000")
			
			Case "RSDS"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				End If
				cmdResponse.args(0) = "V01=" + Format(CInt(theStationManager.getStation(cmd.ints(0)).putUpOffset * 100),"0000")
				cmdResponse.args(1) = "V02=" + Format(CInt(theStationManager.getStation(cmd.ints(0)).putDownOffset * 100),"0000")
				
			Case "WSUS"
				CheckArgumentNo(cmd, 3)
				theStationManager.getStation(cmd.ints(0)).getDownOffset = CDbl(cmd.ints(1)) / 100
				theStationManager.getStation(cmd.ints(0)).getUpOffset = CDbl(cmd.ints(2)) / 100
				theStationManager.getStation(cmd.ints(0)).save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			
			Case "WSDS"
				CheckArgumentNo(cmd, 3)
				theStationManager.getStation(cmd.ints(0)).putUpOffset = CDbl(cmd.ints(1)) / 100
				theStationManager.getStation(cmd.ints(0)).putDownOffset = CDbl(cmd.ints(2)) / 100
				theStationManager.getStation(cmd.ints(0)).save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			
			Case "RNSM"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				End If
				cmdResponse.args(0) = "V01=" + CStr(theStationManager.getStation(cmd.ints(0)).teachingPointCountPerArm - 1)
				
			Case "WNSM"
				CheckArgumentNo(cmd, 2)
				theStationManager.getStation(cmd.ints(0)).teachingPointCountPerArm = CInt(cmd.ints(1)) + 1
				theStationManager.getStation(cmd.ints(0)).save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			
			Case "RDTP"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				End If
				cmdResponse.args(0) = "V01=" + CStr(theStationManager.getStation(cmd.ints(0)).DoubleteachingPoint)
			
			Case "WDTP"
				CheckArgumentNo(cmd, 2)
				theStationManager.getStation(cmd.ints(0)).DoubleteachingPoint = cmd.ints(1)
				theStationManager.getStation(cmd.ints(0)).save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			
			
			
			
			
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			'''''''''''''''''' Basic Move command ''''''''''''''''''
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			Case "LMI"
				myRobot(robotIndex-1).moveInc(New LocationEx(COORD_CARTESIAN,cmd.rawArg,AXISORDER_CONTROL,DEFAULT_ZERO))
				
			Case "MMI"
				myRobot(robotIndex-1).moveInc(New LocationEx(COORD_JOINT,cmd.rawArg,AXISORDER_DYNAX,DEFAULT_ZERO))
				
			Case "NMMI"
				myRobot(robotIndex-1).moveInc(New LocationEx(COORD_JOINT,cmd.rawArg,AXISORDER_TP,DEFAULT_ZERO))
				
			Case "LMA"
				myRobot(robotIndex-1).moveAbs(New LocationEx(COORD_CARTESIAN,cmd.rawArg,AXISORDER_CONTROL,DEFAULT_CUR))
				
			Case "MMA"
				myRobot(robotIndex-1).moveAbs(New LocationEx(COORD_JOINT,cmd.rawArg,AXISORDER_DYNAX,DEFAULT_CUR))
			
			Case "NMMA"
				myRobot(robotIndex-1).moveAbs(New LocationEx(COORD_JOINT,cmd.rawArg,AXISORDER_TP,DEFAULT_CUR))
		
			Case "JOG"
				CheckArgumentNo(cmd, 1)
				theJogManager.jog(cmd.rawArg)
				
			Case "FMD"
				CheckArgumentNo(cmd, 2)
				If cmd.ints(0) = 0 Then 'freeMode clear
					theJogManager.jogStop()
				Else
					theJogManager.freeModeSet(myRobot(robotIndex-1).TPToControlAxis(cmd.ints(0)), cmd.ints(1))
				End If
			
			
			
			
			
			
			
			
			
			
			
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			''''''''''''''''' Robot Motion command '''''''''''''''''
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			
			Case "GRIP", "OUT"
				If cmd.argCount = 1 Then
					myRobot(robotIndex-1).getArmList(robotArmList,1)
					myRobot(robotIndex-1).armGrip(robotArmList,cmd.bools(0),True)
					myRobot(robotIndex-1).extraGuideGrip(robotArmList,cmd.bools(0))
				ElseIf cmd.argCount = 2 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(0))
					myRobot(robotIndex-1).armGrip(robotArmList,cmd.bools(1),True)
					myRobot(robotIndex-1).extraGuideGrip(robotArmList,cmd.bools(1))
				ElseIf cmd.argCount = 3 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(0))
					If cmd.ints(1) = 1 Then	
						myRobot(robotIndex-1).armGrip(robotArmList,cmd.bools(2),True)
					ElseIf cmd.ints(1) = 2 Then	
						myRobot(robotIndex-1).extraGuideGrip(robotArmList,cmd.bools(2))
					End If
				Else
					throwError(ERR_INVALID_HAND)
				End If
			
			Case "VAC"
				If cmd.argCount = 1 Then
					myRobot(robotIndex-1).getArmList(robotArmList,1)
					myRobot(robotIndex-1).extraGuideGrip(robotArmList,cmd.bools(0))
				ElseIf cmd.argCount = 2 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(0))
					myRobot(robotIndex-1).extraGuideGrip(robotArmList,cmd.bools(1))
				Else
					throwError(ERR_INVALID_HAND)
				End If
			
			Case "RETA"
				If cmd.argCount = 0 Then
					myRobot(robotIndex-1).getArmList(robotArmList,1)
				ElseIf cmd.argCount = 1 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(0))
				Else
					CheckArgumentNo(cmd, -1)
				End If
				If robotArmList Is Nothing Then
					throwError(ERR_INVALID_HAND)
				End If
				myRobot(robotIndex-1).armRetract(robotArmList,TARGET_MODE)
				
			Case "EXTA"
				If cmd.argCount = 1 Then
					myRobot(robotIndex-1).getArmList(robotArmList,1)
				ElseIf cmd.argCount = 2 Or cmd.argCount = 3 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(1))
				Else
					CheckArgumentNo(cmd, -1)
				End If
				If cmd.argCount = 3 Then
					myRobot(robotIndex-1).armExtend(cmd.ints(0),robotArmList,cmd.ints(2))
				Else
					myRobot(robotIndex-1).armExtend(cmd.ints(0),robotArmList,TARGET_MODE)
				End If
				
			Case "GET","PUT","UPUT"
				If cmd.argCount = 2 Then
					myRobot(robotIndex-1).getArmList(robotArmList,1)
					motionSelector = ALL_STEP
				ElseIf cmd.argCount = 3 Then
					If useGETPUTmotionArg = True And myRobot(robotIndex-1).armCount = 1 Then
						myRobot(robotIndex-1).getArmList(robotArmList,1)
						motionSelector = cmd.ints(2)
					Else
						myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(2))
						motionSelector = ALL_STEP
					End If
				ElseIf cmd.argCount = 4 Then
					If useGETPUTmotionArg = True Then
						myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(2))
						motionSelector = cmd.ints(3)
					ElseIf useOffsetDistance = True Then
						myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(2))
						motionSelector = ALL_STEP
					Else
						CheckArgumentNo(cmd, -1)
					End If
				Else
					CheckArgumentNo(cmd, -1)
				End If
				If robotArmList Is Nothing Then
					throwError(ERR_INVALID_HAND)
				End If
				If useOffsetDistance = True And cmd.argCount = 4 Then
					Select cmd.cmd.ToUpper
					Case "GET"
						myRobot(robotIndex-1).getWafer(cmd.ints(0), cmd.ints(1), robotArmList, cmd.dbls(3))
						MotionCountTimer.ElapsedTimeSet(MotionCountTimer.MotionSequence, cmdResponse)
					Case "PUT"
						myRobot(robotIndex-1).putWafer(cmd.ints(0), cmd.ints(1), robotArmList, False, cmd.dbls(3))
						MotionCountTimer.ElapsedTimeSet(MotionCountTimer.MotionSequence, cmdResponse)
					Case "UPUT"
						myRobot(robotIndex-1).putWafer(cmd.ints(0), cmd.ints(1), robotArmList, True, cmd.dbls(3))
					End Select
				Else
					If motionSelector = EXTA_STEP Then
						Select cmd.cmd.ToUpper
						Case "GET"						
							myRobot(robotIndex-1).getExtendWafer(cmd.ints(0), cmd.ints(1), robotArmList, False)						
						Case "PUT"
							myRobot(robotIndex-1).putExtendWafer(cmd.ints(0), cmd.ints(1), robotArmList, False)
						Case "UPUT"
							myRobot(robotIndex-1).putExtendWafer(cmd.ints(0), cmd.ints(1), robotArmList, True)
						End Select
					ElseIf motionSelector = RETA_STEP Then
						Select cmd.cmd.ToUpper
						Case "GET"
							myRobot(robotIndex-1).getRetractWafer(cmd.ints(0), cmd.ints(1), robotArmList)
						Case "PUT"
							myRobot(robotIndex-1).putRetractWafer(cmd.ints(0), cmd.ints(1), robotArmList, False)
						Case "UPUT"
							myRobot(robotIndex-1).putRetractWafer(cmd.ints(0), cmd.ints(1), robotArmList, True)
						End Select
					ElseIf motionSelector = ALL_STEP Then
						Select cmd.cmd.ToUpper
						Case "GET"
							myRobot(robotIndex-1).getWafer(cmd.ints(0), cmd.ints(1), robotArmList)
							MotionCountTimer.ElapsedTimeSet(MotionCountTimer.MotionSequence, cmdResponse)'

						Case "PUT"
							myRobot(robotIndex-1).putWafer(cmd.ints(0), cmd.ints(1), robotArmList, False)
							MotionCountTimer.ElapsedTimeSet(MotionCountTimer.MotionSequence, cmdResponse)
						Case "UPUT"
							myRobot(robotIndex-1).putWafer(cmd.ints(0), cmd.ints(1), robotArmList, True)
						End Select
					Else
						ThrowError(ERR_INVALID_FORMAT)
					End If
				End If
				
			Case "GRDY","PRDY","TRDY","GAEXTA","GAEXTA2","GARETA","UPAEXTA","UPARETA","PAEXTA","PARETA"
				If cmd.argCount = 2 Then
					myRobot(robotIndex-1).getArmList(robotArmList,1)
				ElseIf cmd.argCount = 3 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(2))
				ElseIf useoffsetdistance = True And cmd.argcount = 4 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(2))
				Else
					CheckArgumentNo(cmd, -1)
				End If
				If robotArmList Is Nothing Then
					throwError(ERR_INVALID_HAND)
				End If
				If useOffsetDistance = True And cmd.argCount = 4 Then
					Select cmd.cmd.ToUpper
					Case "GAEXTA"
						myRobot(robotIndex-1).getExtendWafer(cmd.ints(0), cmd.ints(1), robotArmList, False, cmd.dbls(3))
					Case "GAEXTA2"
						myRobot(robotIndex-1).getExtendWafer(cmd.ints(0), cmd.ints(1), robotArmList, True, cmd.dbls(3))
					Case "PAEXTA"
						myRobot(robotIndex-1).putExtendWafer(cmd.ints(0), cmd.ints(1), robotArmList, False, cmd.dbls(3))
					Case "UPAEXTA"
						myRobot(robotIndex-1).putExtendWafer(cmd.ints(0), cmd.ints(1), robotArmList, True, cmd.dbls(3))
					End Select
				Else
					Select cmd.cmd.ToUpper
					Case "GRDY"
						myRobot(robotIndex-1).moveToReady(cmd.ints(0), cmd.ints(1), robotArmList, GET_MODE)
					Case "PRDY"
						myRobot(robotIndex-1).moveToReady(cmd.ints(0), cmd.ints(1), robotArmList, PUT_MODE)
					Case "TRDY"
						myRobot(robotIndex-1).moveToReady(cmd.ints(0), cmd.ints(1), robotArmList, TARGET_MODE)				
					Case "GAEXTA"
						myRobot(robotIndex-1).getExtendWafer(cmd.ints(0), cmd.ints(1), robotArmList, False)
					Case "GAEXTA2"
						myRobot(robotIndex-1).getExtendWafer(cmd.ints(0), cmd.ints(1), robotArmList, True)
					Case "GARETA"
						myRobot(robotIndex-1).getRetractWafer(cmd.ints(0), cmd.ints(1), robotArmList)
					Case "PAEXTA"
						myRobot(robotIndex-1).putExtendWafer(cmd.ints(0), cmd.ints(1), robotArmList, False)
					Case "PARETA"
						myRobot(robotIndex-1).putRetractWafer(cmd.ints(0), cmd.ints(1), robotArmList, False)
					Case "UPAEXTA"
						myRobot(robotIndex-1).putExtendWafer(cmd.ints(0), cmd.ints(1), robotArmList, True)
					Case "UPARETA"
						myRobot(robotIndex-1).putRetractWafer(cmd.ints(0), cmd.ints(1), robotArmList, True)
					End Select
				End If
			
			Case "PAEXTA2"
				If cmd.argCount = 2 Then
					myRobot(robotIndex-1).getArmList(robotArmList,1)
				ElseIf cmd.argCount = 3 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(2))
				ElseIf useoffsetdistance = True And cmd.argcount = 4 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(2))
				Else
					CheckArgumentNo(cmd, -1)
				End If
				If robotArmList Is Nothing Then
					throwError(ERR_INVALID_HAND)
				End If
				If useOffsetDistance = True And cmd.argCount = 4 Then
					Select cmd.cmd.ToUpper
					Case "PAEXTA2"
						myRobot(robotIndex-1).putExtendWafer(cmd.ints(0), cmd.ints(1), robotArmList, False, cmd.dbls(3), True)
					End Select
				Else
					Select cmd.cmd.ToUpper
					Case "PAEXTA2"
						myRobot(robotIndex-1).putExtendWafer(cmd.ints(0), cmd.ints(1), robotArmList, False, 0, True)
					End Select
				End If
			
			Case "GARETAF","PARETAF"
				If cmd.argCount = 0 Then
					throwError(ERR_INVALID_ARGUMENT)
				ElseIf cmd.argCount = 1 Then
					myRobot(robotIndex-1).getArmList(robotArmList,1)
				ElseIf cmd.argCount = 2 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(1))
				Else
					CheckArgumentNo(cmd, -1)
				End If
				
				If robotArmList Is Nothing Then
					throwError(ERR_INVALID_HAND)
				End If
				
				Select cmd.cmd.ToUpper
					Case "GARETAF"
						myRobot(robotIndex-1).getRetractWafer(cmd.ints(0), 1, robotArmList, RECO_STEP)
					Case "PARETAF"
						myRobot(robotIndex-1).putRetractWafer(cmd.ints(0), 1, robotArmList,False, RECO_STEP)
				End Select
				
				
			Case "TRANS"
				If cmd.argcount = 6 Then 		
					motionSelector = ALL_STEP
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(2))
					myRobot(robotIndex-1).getWafer(cmd.ints(0), cmd.ints(1), robotArmList)
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(5))
					myRobot(robotIndex-1).putWafer(cmd.ints(3), cmd.ints(4), robotArmList, False)
				Else 
					CheckArgumentNo(cmd, -1)
				End If	
			
			Case "CRO"
				If cmd.argCount = 2 Then
					myRobot(robotIndex-1).getArmList(robotArmList,1)
					If robotArmList Is Nothing Or robotArmList.GetUpperBound(0) >= 2 Then
						throwError(ERR_INVALID_HAND)
					End If
					myRobot(robotIndex-1).crossWafer(cmd.ints(0), cmd.ints(1), robotArmList(0))
					MotionCountTimer.ElapsedTimeSet(MotionCountTimer.MotionSequence, cmdResponse)
				ElseIf cmd.argCount = 3 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(2))
					If robotArmList Is Nothing Or robotArmList.GetUpperBound(0) >= 2 Then
						throwError(ERR_INVALID_HAND)
					End If
					myRobot(robotIndex-1).crossWafer(cmd.ints(0), cmd.ints(1), robotArmList(0))
					MotionCountTimer.ElapsedTimeSet(MotionCountTimer.MotionSequence, cmdResponse)
				ElseIf cmd.argCount = 4 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(2))
					If robotArmList Is Nothing Or robotArmList.GetUpperBound(0) >= 2 Then
						throwError(ERR_INVALID_HAND)
					End If
					myRobot(robotIndex-1).getArmList(robotArmList2,cmd.ints(3))
					If robotArmList2 Is Nothing Or robotArmList2.GetUpperBound(0) >= 2 Then
						throwError(ERR_INVALID_HAND)
					End If
					myRobot(robotIndex-1).crossWafer(cmd.ints(0), cmd.ints(1), robotArmList(0), robotArmList2(0))
					MotionCountTimer.ElapsedTimeSet(MotionCountTimer.MotionSequence, cmdResponse)
				Else
					CheckArgumentNo(cmd, -1)
				End If
				
			
			Case "ROTATE"
				If cmd.argCount = 0 Then
					myRobot(robotIndex-1).getArmList(robotArmList,1)
					If robotArmList Is Nothing Or robotArmList.GetUpperBound(0) >= 2 Then
						throwError(ERR_INVALID_HAND)
					End If
					myRobot(robotIndex-1).armFlip(robotArmList(0),True)
				ElseIf cmd.argCount = 1 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(0))
					If robotArmList Is Nothing Or robotArmList.GetUpperBound(0) >= 2 Then
						throwError(ERR_INVALID_HAND)
					End If
					myRobot(robotIndex-1).armFlip(robotArmList(0),True)
				ElseIf cmd.argCount = 2 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(0))
					If robotArmList Is Nothing Or robotArmList.GetUpperBound(0) >= 2 Then
						throwError(ERR_INVALID_HAND)
					End If
					If cmd.ints(1) = 1 Then
						myRobot(robotIndex-1).armFlip_state(robotArmList(0),FlipDirection_FRONT,True)
					ElseIf cmd.ints(1) = 2 Then
						myRobot(robotIndex-1).armFlip_state(robotArmList(0),FlipDirection_BACK,True)
					Else
						ThrowError(ERR_INVALID_FORMAT)
					End If
				Else
					CheckArgumentNo(cmd, -1)
				End If
				
			Case "FLIP"
				If cmd.argCount = 1 Then
					myRobot(robotIndex-1).getArmList(robotArmList,1)
					If robotArmList Is Nothing Or robotArmList.GetUpperBound(0) >= 2 Then
						throwError(ERR_INVALID_HAND)
					End If
					If cmd.ints(0) = 1 Then
						myRobot(robotIndex-1).armFlip_state(robotArmList(0),FlipDirection_FRONT,True)
					ElseIf cmd.ints(0) = 2 Then
						myRobot(robotIndex-1).armFlip_state(robotArmList(0),FlipDirection_BACK,True)
					Else
						ThrowError(ERR_INVALID_FORMAT)
					End If
				Else
					CheckArgumentNo(cmd, -1)
				End If
				
			Case "P2P"
				If cmd.argCount = 1 Then
					myRobot(robotIndex-1).moveToLocation(myRobot(robotIndex-1).thePointDataManager.getLocation(cmd.ints(0)),False)
				ElseIf cmd.argCount = 2 Then
					For i = 0 To cmd.ints(1) - 1
						myRobot(robotIndex-1).moveToLocation(myRobot(robotIndex-1).thePointDataManager.getLocation(cmd.ints(0)+i),False)
					Next i
				Else
					CheckArgumentNo(cmd, -1)
				End If
			
			Case "POM"
				CheckArgumentNo(cmd, 1)
				myRobot(robotIndex-1).moveToLocation(myRobot(robotIndex-1).thePointDataManager.getLocation(cmd.ints(0)),True)
			
			Case "ZSCAN"
				If cmd.argCount = 1 Then
					myRobot(robotIndex-1).getArmList(robotArmList,1)
				ElseIf cmd.argCount = 2 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(1))
				Else
					CheckArgumentNo(cmd, -1)
				End If
				If robotArmList Is Nothing Or robotArmList.getUpperBound(0) >= 2 Then
					throwError(ERR_INVALID_HAND)
				End If
				
				myRobot(robotIndex-1).autoZTeachingPointScan(cmd.ints(0), robotArmList(0))
			
			
				Case "RETAD"
				If cmd.argCount = 0 Then
					myRobot(robotIndex-1).getArmList(robotArmList,1)
				ElseIf cmd.argCount = 1 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(0))
				Else
					CheckArgumentNo(cmd, -1)
				End If
				If robotArmList Is Nothing Then
					throwError(ERR_INVALID_HAND)
				End If
				myRobot(robotIndex-1).armRetract(robotArmList,TARGET_MODE,GET_MODE)
				
				Case "RETAU"
				If cmd.argCount = 0 Then
					myRobot(robotIndex-1).getArmList(robotArmList,1)
				ElseIf cmd.argCount = 1 Then
					myRobot(robotIndex-1).getArmList(robotArmList,cmd.ints(0))
				Else
					CheckArgumentNo(cmd, -1)
				End If
				If robotArmList Is Nothing Then
					throwError(ERR_INVALID_HAND)
				End If
				myRobot(robotIndex-1).armRetract(robotArmList,TARGET_MODE,PUT_MODE)
				
			
			
			
			
			'''''''''''''''''''''''''''''''''''''''''''''''''''''
			'''''''''''''''''' Mapping command ''''''''''''''''''
			'''''''''''''''''''''''''''''''''''''''''''''''''''''

			Case "MAP"
				CheckArgumentNo(cmd, 1)
				If myRobot(robotIndex-1).theMappingManager.useDoubleMapping = True Then
					myRobot(robotIndex-1).theMappingManager.doDoubleMapping(cmd.ints(0)+10)
					myRobot(robotIndex-1).theMappingManager.DoublemapDataGetResult()
				End If 
				
				myRobot(robotIndex-1).theMappingManager.doMapping(cmd.ints(0))
				
			Case "MLD"
				If m_useEOD = True Then
					If cmd.argCount > 0 Then
						If cmd.ints(0) = 99 Then
							myRobot(robotIndex-1).theMappingManager.mapDataCallibration()
							myRobot(robotIndex-1).theMappingManager.save()
							If cmd.sourceDevice = COM_TP Then
								DataFile.SaveReservationThreadStart()
							End If
						Else
							tempResponse = New Response("MLD")
							tempResponse.args(0) = myRobot(robotIndex-1).theMappingManager.mapDataGetResult()
							respList.addResponseList(tempResponse)
						End If
					Else
						tempResponse = New Response("MLD")
						tempResponse.args(0) = myRobot(robotIndex-1).theMappingManager.mapDataGetResult()
						respList.addResponseList(tempResponse)
					End If
					cmdResponse.args(0) = "EOD"
				Else
					If cmd.argCount > 0 Then
						If cmd.ints(0) = 99 Then
							myRobot(robotIndex-1).theMappingManager.mapDataCallibration()
							myRobot(robotIndex-1).theMappingManager.save()
							If cmd.sourceDevice = COM_TP Then
								DataFile.SaveReservationThreadStart()
							End If
						Else
							cmdResponse.args(0) = myRobot(robotIndex-1).theMappingManager.mapDataGetResult()
						End If
					Else
						cmdResponse.args(0) = myRobot(robotIndex-1).theMappingManager.mapDataGetResult()
					End If
				End If

			Case "RMAP"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				End If
				cmdResponse.args(0) = "V01=" + Format(CInt(theStationManager.getStation(cmd.ints(0)).mappingParam.waferThickness * 100),"0000")
				cmdResponse.args(1) = "V02=" + Format(theStationManager.getStation(cmd.ints(0)).mappingParam.crossCriteria,"000")
				cmdResponse.args(2) = "V03=" + Format(theStationManager.getStation(cmd.ints(0)).mappingParam.doubleCriteria,"000")
			
			Case "RMPS"
				cmdResponse.args(0) = "V01=" + Format(myRobot(robotIndex-1).theProfileManager.mappingSpeed,"000")
				
			Case "WMPS"
				CheckArgumentNo(cmd, 1)
				myRobot(robotIndex-1).theProfileManager.mappingSpeed = cmd.ints(0)
				myRobot(robotIndex-1).theProfileManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			
			Case "WWTH"
				CheckArgumentNo(cmd, 2)
				theStationManager.getStation(cmd.ints(0)).mappingParam.waferThickness = CDbl(cmd.ints(1)) / 100
				theStationManager.getStation(cmd.ints(0)).save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
				
			Case "WBZP"
				' change map base position
				' (not used protocol)
			
			Case "WSCT"
				CheckArgumentNo(cmd, 2)
				theStationManager.getStation(cmd.ints(0)).mappingParam.crossCriteria = cmd.ints(1)
				theStationManager.getStation(cmd.ints(0)).save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			
			Case "WSDT"
				CheckArgumentNo(cmd, 2)
				theStationManager.getStation(cmd.ints(0)).mappingParam.doubleCriteria = cmd.ints(1)
				theStationManager.getStation(cmd.ints(0)).save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			
			Case "MSET"
				' map calb data save
				' (not used protocol)
			
			Case "RMSD"
				cmdResponse.args(0) = "V01=" + Format(theSystem.mappingOnDelay,"0000")
				
			Case "WMSD"
				CheckArgumentNo(cmd, 1)
				theSystem.mappingOnDelay = cmd.ints(0)
				theSystem.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
				
			Case "MRDY"
				CheckArgumentNo(cmd, 1)
				myRobot(robotIndex-1).theMappingManager.moveToMapReady(cmd.ints(0))
			
			Case "MEXT"
				CheckArgumentNo(cmd, 1)
				myRobot(robotIndex-1).theMappingManager.extendArm(cmd.ints(0))
				myRobot(robotIndex-1).theMotionLoger.lastStage = cmd.ints(0)
			Case "MRET"
				CheckArgumentNo(cmd, 0)
				myRobot(robotIndex-1).theMappingManager.retractArm(myRobot(robotIndex-1).theMotionLoger.lastStage)
				
			Case "MZUP"
				CheckArgumentNo(cmd, 1)
				myRobot(robotIndex-1).theMappingManager.zUp(cmd.ints(0))
				
			Case "MOUT"
				CheckArgumentNo(cmd, 1)
				If cmd.bools(0) = True Then
					myRobot(robotIndex-1).theMappingManager.sensorON()
				Else
					myRobot(robotIndex-1).theMappingManager.sensorOFF()
				End If
				
			Case "MP1"
				cmdResponse.args(0) = CStr(myRobot(robotIndex-1).theMappingManager.latchDataCount)
				
			Case "MP2"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				ElseIf cmd.argCount = 1 Then
					cmdResponse.args(0) = myRobot(robotIndex-1).theMappingManager.getLatchDataInfo(cmd.ints(0))
				ElseIf cmd.argCount = 2 Then
					cmdResponse.args(0) = myRobot(robotIndex-1).theMappingManager.getLatchDataInfo(cmd.ints(1))
				End If
			
			
			Case "MSP2"
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				ElseIf cmd.argCount = 1 Then
					cmdResponse.args(0) = myRobot(robotIndex-1).theMappingManager.GetSlotLatchDataInfo(cmd.ints(0))
				ElseIf cmd.argCount = 2 Then
					cmdResponse.args(0) = myRobot(robotIndex-1).theMappingManager.GetSlotLatchDataInfo(cmd.ints(1))
				End If
				
					
			Case "MDBG"
				cmdResponse.args(0) = myRobot(robotIndex-1).theMappingManager.getLatchDataLog()
				
				
				


			
			
			'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			'''''''''''''''''' Z Position Error Detecter ''''''''''''''''''
			'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			
			Case "WZPC"
				myRobot(robotIndex-1).theZPosErrDetector.callibration(5)
				myRobot(robotIndex-1).theZPosErrDetector.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
				
			Case "ZEM"
				Select cmd.argCount
				Case 0
					cmdResponse.args(0) = "V01=" + CStr(theSystem.useZPosErrorCheck)
				Case 1
					theSystem.useZPosErrorCheck = cmd.ints(0)
					theSystem.save()
					If cmd.sourceDevice = COM_TP Then
						DataFile.SaveReservationThreadStart()
					End If
					
					If theSystem.useZPosErrorCheck = 0 Then
						myRobot(robotIndex-1).theZPosErrDetector.checkStop()
					Else
						myRobot(robotIndex-1).theZPosErrDetector.checkStart()
					End If
				Case Else
					CheckArgumentNo(cmd, -1)
				End Select
				
			Case "ZES"
				Select cmd.argCount
				Case 0
					cmdResponse.args(0) = "V01=" + Format(theSystem.zPositionErrorSize,"0.00")
				Case 1
					theSystem.zPositionErrorSize = cmd.dbls(0)
					theSystem.save()
					If cmd.sourceDevice = COM_TP Then
						DataFile.SaveReservationThreadStart()
					End If
				End Select
			
			
			
			
			
			'''''''''''''''''''''''''''''''''''''''''''''''''''
			'''''''''''''''''' Blade Mapping ''''''''''''''''''
			'''''''''''''''''''''''''''''''''''''''''''''''''''
			
			Case "WMZI"
				CheckArgumentNo(cmd, 1)
				theSystem.bladeGapError = CDbl(cmd.ints(0)) / 100
				theSystem.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			
			Case "RMZI"
				cmdResponse.args(0) = "V01=" + Format(CInt(theSystem.bladeGapError * 100),"000")
			
			Case "MZR" 'return Error Pos
				CheckArgumentNo(cmd, 1)
				For i = 1 To myRobot(robotIndex-1).arm(cmd.ints(0)-1).fingerCount
					cmdResponse.args(i-1) = Format(CInt( _
						myRobot(robotIndex-1).theBladeDeflectionDetector.getBladePosError( _
							myRobot(robotIndex-1).arm(cmd.ints(0)-1), _
							i _
						) * 100 _
					),"000")
				Next i
				
			Case "MZI"
				If cmd.argCount = 0 Then ' for kc-tech
					myRobot(robotIndex-1).getAllArmList(robotArmList)
					myRobot(robotIndex-1).theBladeDeflectionDetector.checkBladeMapping(robotArmList)
					
					tempResponse = New Response("MZR")
					tempResponse.args(0) = ""
					For i = 0 To robotArmList.GetUpperBound(0) - 1
						For j = 1 To robotArmList(i).fingerCount
							If tempResponse.args(0) <> "" Then
								tempResponse.args(0) = tempResponse.args(0) + ":"
							End If
							If myRobot(robotIndex-1).theBladeDeflectionDetector.getBladePosError(robotArmList(i),j) > theSystem.bladeGapError Then
								tempResponse.args(0) = tempResponse.args(0) + "0"
							Else
								tempResponse.args(0) = tempResponse.args(0) + "1"
							End If
						Next j
					Next i
					tempResponse.args(1) = ""
					For i = 0 To robotArmList.GetUpperBound(0) - 1
						For j = 1 To robotArmList(i).fingerCount
							If tempResponse.args(1) <> "" Then
								tempResponse.args(1) = tempResponse.args(1) + ":"
							End If
							tempResponse.args(1) = tempResponse.args(1) + "+" + Format(CInt( _
								myRobot(robotIndex-1).theBladeDeflectionDetector.getBladePosError(robotArmList(i),j) * 100 _
							),"000000")
						Next j
					Next i
					respList.addResponseList(tempResponse)
					
				ElseIf cmd.argCount = 2 Then
					If cmd.ints(0) < 1 Or cmd.ints(0) > myRobot(robotIndex-1).armCount Then 'arm Index (not select arm Index)
						ThrowError(ERR_INVALID_HAND)
					End If
					Select cmd.ints(1)
					Case 1 			'check
						myRobot(robotIndex-1).theBladeDeflectionDetector.checkBladeMapping(myRobot(robotIndex-1).arm(cmd.ints(0)-1), ERR_NOT_CORRECT_BLADE_POS)
						
					Case 2			'return Error Pos
						For i = 1 To myRobot(robotIndex-1).arm(cmd.ints(0)-1).fingerCount
							cmdResponse.args(i-1) = Format(CInt( _
								myRobot(robotIndex-1).theBladeDeflectionDetector.getBladePosError( _
									myRobot(robotIndex-1).arm(cmd.ints(0)-1), _
									i _
								) * 100 _
							),"000")
						Next i
					
					Case 99			'calibration
						myRobot(robotIndex-1).theBladeDeflectionDetector.bladeMappingCalibration(myRobot(robotIndex-1).arm(cmd.ints(0)-1),5)
						myRobot(robotIndex-1).theBladeDeflectionDetector.save()
						If cmd.sourceDevice = COM_TP Then
							DataFile.SaveReservationThreadStart()
						End If
						
					Case Else
						ThrowError(ERR_INVALID_FORMAT)
					End Select
				Else
					CheckArgumentNo(cmd, -1)
				End If
			
			Case "MZC" 'calibration
				myRobot(robotIndex-1).getAllArmList(robotArmList)
				myRobot(robotIndex-1).theBladeDeflectionDetector.bladeMappingCalibration(robotArmList,5)
				myRobot(robotIndex-1).theBladeDeflectionDetector.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If







			''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			''''''''''''''''''''''' Grip Time Check ''''''''''''''''''''''
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			
			Case "HALFGRIPCHECK", "HGCK"
				'// HALF STROKE CHECK //
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				Else
					If cmd.ints(0) < 1 Or cmd.ints(0) > myRobot(robotIndex-1).armCount Then 'arm Index (not select arm Index)
						ThrowError(ERR_INVALID_HAND)
					End If
					For i = 1 To 2 'ignore first 2 times grip/ungrip
						If Controller.SoftEStop = True Then
							Exit Sub
						End If
						If cmd.argCount = 2 Then
							tempValue_dbl = myRobot(robotIndex-1).arm(cmd.ints(0)-1).pusherGripTimeTest(cmd.ints(1),True,False)
						Else
							tempValue_dbl = myRobot(robotIndex-1).arm(cmd.ints(0)-1).pusherGripTimeTest(True,False)
						End If
						Thread.Sleep(500)
						If cmd.argCount = 2 Then
							tempValue_dbl = myRobot(robotIndex-1).arm(cmd.ints(0)-1).pusherGripTimeTest(cmd.ints(1),False,False)
						Else
							tempValue_dbl = myRobot(robotIndex-1).arm(cmd.ints(0)-1).pusherGripTimeTest(False,False)
						End If
						Thread.Sleep(500)
					Next i
					tempValue_dbl1 = -1 'on min
					tempValue_dbl2 = -1 'off min
					tempValue_dbl3 = 0 'on max
					tempValue_dbl4 = 0 'off max
					For i = 1 To 10
						If Controller.SoftEStop = True Then
							Exit Sub
						End If
						If cmd.argCount = 2 Then
							tempValue_dbl = myRobot(robotIndex-1).arm(cmd.ints(0)-1).pusherGripTimeTest(cmd.ints(1),True,False)
						Else
							tempValue_dbl = myRobot(robotIndex-1).arm(cmd.ints(0)-1).pusherGripTimeTest(True,False)
						End If
						If tempValue_dbl > theSystem.gripperMaximumTime Then
							ThrowError(ERR_WAIT_TIMEOUT)
						End If
						If tempValue_dbl1 = -1 Or tempValue_dbl < tempValue_dbl1 Then
							tempValue_dbl1 = tempValue_dbl 'min
						End If
						If tempValue_dbl > tempValue_dbl3 Then
							tempValue_dbl3 = tempValue_dbl 'max
						End If
						Thread.Sleep(500)
						If cmd.argCount = 2 Then
							tempValue_dbl = myRobot(robotIndex-1).arm(cmd.ints(0)-1).pusherGripTimeTest(cmd.ints(1),False,False)
						Else
							tempValue_dbl = myRobot(robotIndex-1).arm(cmd.ints(0)-1).pusherGripTimeTest(False,False)
						End If
						If tempValue_dbl > theSystem.gripperMaximumTime Then
							ThrowError(ERR_WAIT_TIMEOUT)
						End If
						If tempValue_dbl2 = -1 Or tempValue_dbl < tempValue_dbl2 Then
							tempValue_dbl2 = tempValue_dbl 'min
						End If
						If tempValue_dbl > tempValue_dbl4 Then
							tempValue_dbl4 = tempValue_dbl 'max
						End If
						Thread.Sleep(500)
					Next i
					cmdResponse.args(0) = "V01=+" + Format(CInt(tempValue_dbl1),"000")
					cmdResponse.args(1) = "V02=+" + Format(CInt(tempValue_dbl2),"000")
					cmdResponse.args(2) = "V03=+" + Format(CInt(tempValue_dbl3),"000")
					cmdResponse.args(3) = "V04=+" + Format(CInt(tempValue_dbl4),"000")
				End If
				
			Case "GRIPCHECK", "GCK"
				'// FULL STROKE CHECK //
				If cmd.argCount < 1 Then
					CheckArgumentNo(cmd, -1)
				Else
	
					If cmd.ints(0) < 1 Or cmd.ints(0) > myRobot(robotIndex-1).armCount Then 'arm Index (not select arm Index)
						ThrowError(ERR_INVALID_HAND)
					End If
					For i = 1 To 2 'ignore first 2 times grip/ungrip
						If Controller.SoftEStop = True Then
							Exit Sub
						End If
						If cmd.argCount = 2 Then
							tempValue_dbl = myRobot(robotIndex-1).arm(cmd.ints(0)-1).pusherGripTimeTest(cmd.ints(1),True,True)
						Else
							tempValue_dbl = myRobot(robotIndex-1).arm(cmd.ints(0)-1).pusherGripTimeTest(True,True)
						End If
						Thread.Sleep(500)
						If cmd.argCount = 2 Then
							tempValue_dbl = myRobot(robotIndex-1).arm(cmd.ints(0)-1).pusherGripTimeTest(cmd.ints(1),False,True)
						Else
							tempValue_dbl = myRobot(robotIndex-1).arm(cmd.ints(0)-1).pusherGripTimeTest(False,True)
						End If
						Thread.Sleep(500)
					Next i
					tempValue_dbl1 = -1 'on min
					tempValue_dbl2 = -1 'off min
					tempValue_dbl3 = 0 'on max
					tempValue_dbl4 = 0 'off max
					For i = 1 To 10
						If Controller.SoftEStop = True Then
							Exit Sub
						End If
						If cmd.argCount = 2 Then
							tempValue_dbl = myRobot(robotIndex-1).arm(cmd.ints(0)-1).pusherGripTimeTest(cmd.ints(1),True,True)
						Else
							tempValue_dbl = myRobot(robotIndex-1).arm(cmd.ints(0)-1).pusherGripTimeTest(True,True)
						End If
						If tempValue_dbl > theSystem.gripperMaximumTime Then
							ThrowError(ERR_WAIT_TIMEOUT)
						End If
						If tempValue_dbl1 = -1 Or tempValue_dbl < tempValue_dbl1 Then
							tempValue_dbl1 = tempValue_dbl 'min
						End If
						If tempValue_dbl > tempValue_dbl3 Then
							tempValue_dbl3 = tempValue_dbl 'max
						End If
						Thread.Sleep(500)
						If cmd.argCount = 2 Then
							tempValue_dbl = myRobot(robotIndex-1).arm(cmd.ints(0)-1).pusherGripTimeTest(cmd.ints(1),False,True)
						Else
							tempValue_dbl = myRobot(robotIndex-1).arm(cmd.ints(0)-1).pusherGripTimeTest(False,True)
						End If
						If tempValue_dbl > theSystem.gripperMaximumTime Then
							ThrowError(ERR_WAIT_TIMEOUT)
						End If
						If tempValue_dbl2 = -1 Or tempValue_dbl < tempValue_dbl2 Then
							tempValue_dbl2 = tempValue_dbl 'min
						End If
						If tempValue_dbl > tempValue_dbl4 Then
							tempValue_dbl4 = tempValue_dbl 'max
						End If
						Thread.Sleep(500)
					Next i
					cmdResponse.args(0) = "V01=+" + Format(CInt(tempValue_dbl1),"000")
					cmdResponse.args(1) = "V02=+" + Format(CInt(tempValue_dbl2),"000")
					cmdResponse.args(2) = "V03=+" + Format(CInt(tempValue_dbl3),"000")
					cmdResponse.args(3) = "V04=+" + Format(CInt(tempValue_dbl4),"000")
				End If
				
			Case "PST"
				For i = 0 To myRobot(robotIndex-1).armCount - 1
					cmdResponse.args(i*2) = "V" + Format(i*2+1,"00") + "=+" + Format(CInt(myRobot(robotIndex-1).arm(i).gripHalfStrokeTime_ms),"000")
					cmdResponse.args(i*2+1) = "V" + Format(i*2+2,"00") + "=+" + Format(CInt(myRobot(robotIndex-1).arm(i).ungripHalfStrokeTime_ms),"000")
				Next i
				
			Case "RPSTL"
				cmdResponse.args(0) = "V01=+" + Format(theSystem.gripperMinimumTime,"0000")
				cmdResponse.args(1) = "V02=+" + Format(theSystem.gripperMaximumTime,"0000")
					
			Case "WPSTL"
				CheckArgumentNo(cmd, 2)
				theSystem.gripperMinimumTime = cmd.ints(0)
				theSystem.gripperMaximumTime = cmd.ints(1)
				theSystem.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			'''''''''''''''' AUTO TUNING and friction Check ''''''''''''''
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			Case "AGT"
				If cmd.argCount = 2 Then
					myRobot(robotIndex-1).AutoGainTuning(cmd.args(0),cmd.dbls(1))
				ElseIf cmd.argCount = 3 Then
					myRobot(robotIndex-1).AutoGainTuning(cmd.args(0),cmd.dbls(1),cmd.ints(1))
				ElseIf cmd.argCount = 4 Then
					myRobot(robotIndex-1).AutoGainTuning(cmd.args(0),cmd.dbls(1),cmd.ints(2),cmd.ints(3))
				ElseIf cmd.argCount = 5 Then
					myRobot(robotIndex-1).AutoGainTuning(cmd.args(0),cmd.dbls(1),cmd.ints(2),cmd.ints(3),cmd.ints(4))
				ElseIf cmd.argCount = 6 Then
					myRobot(robotIndex-1).AutoGainTuning(cmd.args(0),cmd.dbls(1),cmd.bools(2),cmd.ints(3),cmd.ints(4),cmd.ints(5))
				Else
					ThrowError(ERR_INVALID_FORMAT)
				End If
				thePDBManager.save()
				If cmd.sourceDevice = COM_TP Then
					DataFile.SaveReservationThreadStart()
				End If
			Case "CFVF"
				tempValue_dbl1 = 0
				tempValue_dbl2 = 0
				tempValue_dbl3 = 0
				myRobot(robotIndex-1).SerchFunction(cmd.args(0),cmd.dbls(1),tempValue_dbl1,tempValue_dbl2,tempValue_dbl3)
				cmdResponse.args(0) = formatdouble(tempValue_dbl1)
				cmdResponse.args(1) = formatdouble(tempValue_dbl2)
				cmdResponse.args(2) = formatdouble(tempValue_dbl3)
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			'''''''''''''''''''''' MotorState Check ''''''''''''''''''''''
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			Case "CCMS"
				If cmd.argCount < 1 Then
					myRobot(robotIndex-1).ClearMotorState(0)
				Else
					CheckArgumentNo(cmd, 1)
					myRobot(robotIndex-1).ClearMotorState(cmd.ints(0))
				End If
				
			Case "RCMS"
				For i = 1 To myRobot(robotIndex-1).axiscount
					cmdResponse.args(i-1) = Format(myRobot(robotIndex-1).readMotorState(cmd.ints(0),myRobot(robotIndex-1).tpToControlAxis(i)),".00")
				Next i
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			'''''''''''''''''''' Monitoring Function '''''''''''''''''''''
			''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
			Case "MTTE"
				If cmd.argCount = 0 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringTrackingError()
				ElseIf cmd.argCount = 1 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringTrackingError(cmd.ints(0))
				ElseIf cmd.argCount = 2 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringTrackingError(cmd.ints(0),cmd.ints(1))
				Else
					ThrowError(ERR_INVALID_FORMAT)
				End If
			Case "MMTTE"
				If cmd.argCount = 0 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringMontlyTrackingError()
				ElseIf cmd.argCount = 1 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringMontlyTrackingError(cmd.ints(0))
				Else
					ThrowError(ERR_INVALID_FORMAT)
				End If
			Case "MTLTE"
				CheckArgumentNo(cmd, 1)
				cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringLastdayTrackingError(cmd.ints(0))
				
			Case "MTTEL"
				If cmd.argCount = 0 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringTrackingErrorLoc()
				ElseIf cmd.argCount = 1 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringTrackingErrorLoc(cmd.ints(0))
				ElseIf cmd.argCount = 2 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringTrackingErrorLoc(cmd.ints(0),cmd.ints(1))
				Else
					ThrowError(ERR_INVALID_FORMAT)
				End If
			Case "MMTTEL"
				If cmd.argCount = 0 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringMontlyTrackingErrorLoc()
				ElseIf cmd.argCount = 1 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringMontlyTrackingErrorLoc(cmd.ints(0))
				Else
					ThrowError(ERR_INVALID_FORMAT)
				End If
			Case "MTLTEL"
				CheckArgumentNo(cmd, 1)
				cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringLastdayTrackingErrorLoc(cmd.ints(0))

			Case "MTDU"
				If cmd.argCount = 0 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringDuty()
				ElseIf cmd.argCount = 1 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringDuty(cmd.ints(0))
				ElseIf cmd.argCount = 2 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringDuty(cmd.ints(0),cmd.ints(1))
				Else
					ThrowError(ERR_INVALID_FORMAT)
				End If
			Case "MMTDU"
				If cmd.argCount = 0 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringMontlyDuty()
				ElseIf cmd.argCount = 1 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringMontlyDuty(cmd.ints(0))
				Else
					ThrowError(ERR_INVALID_FORMAT)
				End If
			Case "MTLDU"
				CheckArgumentNo(cmd, 1)
				cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringLastdayDuty(cmd.ints(0))
				
			Case "MTDUL"
				If cmd.argCount = 0 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringDutyLoc()
				ElseIf cmd.argCount = 1 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringDutyLoc(cmd.ints(0))
				ElseIf cmd.argCount = 2 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringDutyLoc(cmd.ints(0),cmd.ints(1))
				Else
					ThrowError(ERR_INVALID_FORMAT)
				End If
			Case "MMTDUL"
				If cmd.argCount = 0 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringMontlyDutyLoc()
				ElseIf cmd.argCount = 1 Then
					cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringMontlyDutyLoc(cmd.ints(0))
				Else
					ThrowError(ERR_INVALID_FORMAT)
				End If
			Case "MTLDUL"
				CheckArgumentNo(cmd, 1)
				cmdResponse.args(0) = TheStateMonitorManager.GetMoniteringLastdayDutyLoc(cmd.ints(0))
							
				
			Case "RMPT"
				CheckArgumentNo(cmd, 0)
				Const PDB_COMPENSATOR_OUTPUT_TORQUE As Integer = 12304
				For i = 1 To Controller.PDbNum(2000)
					cmdResponse.args(i-1) = Format(TheStateMonitorManager.theStateMonitor.realTimeReadMotorState(PDB_COMPENSATOR_OUTPUT_TORQUE,i),"##0.0#")
				Next

			Case "RMDT"
				CheckArgumentNo(cmd, 0)
				Const PDB_DUTY_PER_LIMIT As Integer = 12608
				For i = 1 To Controller.PDbNum(2000)
					cmdResponse.args(i-1) = Format(TheStateMonitorManager.theStateMonitor.realTimeReadMotorState(PDB_DUTY_PER_LIMIT,i),"#0.0#")
				Next
				
			Case "RMTE"
				CheckArgumentNo(cmd, 0)
				Const PDB_POSITION_TRACKING_ERROR As Integer = 12320
				For i = 1 To Controller.PDbNum(2000)
					cmdResponse.args(i-1) = Format(TheStateMonitorManager.theStateMonitor.realTimeReadMotorState(PDB_POSITION_TRACKING_ERROR,i),"#####0")
				Next
			Case "RCLOG"
				tempValue_int = cmd.ints(0)
				If cmd.ints(0)<1 Then
					tempValue_int = 1
				ElseIf cmd.ints(0)>MyConsole.BEFORE_LOG_MAX_COUNT Then
					tempValue_int = 5000
				Else
					tempValue_int = cmd.ints(0)
				End If
				ReDim tempStrSplitBuf(tempValue_int)
				MyConsole.GetLogBuffer(cmd.ints(0),tempStrSplitBuf)
				cmdResponse.args(0) = Chr(GPL_CR)+Chr(GPL_LF)
				For i=0 To tempValue_int-1
'					cmdResponse.args(0) = Chr(GPL_CR)+Chr(GPL_LF)+cmdResponse.args(0)+tempStrSplitBuf(i)
					cmdResponse.args(0) = cmdResponse.args(0)+tempStrSplitBuf(i)
				Next
				cmdResponse.args(0) = cmdResponse.args(0)+Chr(GPL_CR)+Chr(GPL_LF)+"RCLOG"
			Case Else
				ThrowError(ERR_INVALID_COMMAND)
			End Select
		End Sub
		
		Public Sub commMain(cmd As Command, ByRef respList As ResponseList)
			Dim cmdResponse As New Response(cmd)
			Dim ex As Exception
			Dim robotIndex As Integer
			
			If cmd.robotIndex = 0 Then
				robotIndex = 1
			Else
				robotIndex = cmd.robotIndex
			End If

			Try
				If robotIndex > robotCount Then
					ThrowError(ERR_INVALID_ARGUMENT)
				End If
				
				checkCommandAvailable(robotIndex,cmd.cmd.ToUpper)
				
				If isOpCommand(cmd) Then	
				
					MotionCountTimer.MotionResetTimer()
					GripTimer.MotionResetTimer()
					MotionCountTimer.MtionSequence(cmd.cmd.ToUpper)
					
					If errorHandler.getCurrentErrorCode() <> 0 Then
						cmdResponse.err = ERR_RECEIVE_COMMAND_IN_ERROR
						Exit Try
					End If
					
					If isOpCommandButNotMotion(cmd.cmd.ToUpper) = False Then
						If myRobot(robotIndex-1).isOrgCompleted = False Then
							throwError(ERR_NOT_HOME)
						End If
					End If
					
					myRobot(robotIndex-1).opCommandRun(cmd,cmdResponse,respList)
				Else
					commRoutine(robotIndex,cmd,cmdResponse,respList)
				End If
				myRobot(robotIndex-1).servoEnableMutex.unlock()
			Catch ex
				myRobot(robotIndex-1).servoEnableMutex.unlock()
				errorHandler.handleError(ex)
				cmdResponse.err = GetErrorCode(ex)
				ex = Nothing
			End Try

			respList.addResponseList(cmdResponse)
		End Sub
	
	End Class
End Module
'Created: 7/10/2013 9:51:29 AM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module SendResponseModule

	Public Class ResponseList
		Private Dim m_listCount As Integer = 0
		Private Dim m_respList(20) As Response
		Public ReadOnly Property respCount As Integer
			Get
				Return m_listCount
			End Get
		End Property
		Public ReadOnly Property resp(index As Integer) As Response
			Get
				If index >= respCount Then
					Return Nothing
				Else
					Return m_respList(index)
				End If
			End Get
		End Property
		Public Sub New()
		End Sub
		Public Sub New(src As ResponseList)
			Dim i As Integer
			m_listCount = src.respCount
			For i = 0 To m_listCount-1
				m_respList(i) = src.resp(i)
			Next i
		End Sub
		Public Sub addResponseList(resp As Response)
			m_respList(m_listCount) = resp
			m_listCount = m_listCount + 1
		End Sub
	End Class

    Public Class Response
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	
		Private Const MAX_ARGS As Integer = 30
		Private Dim m_changedResponseProtocol As String = Nothing
		Private Dim m_responseRobotIndex As Integer = 0
		
		Private Dim m_cmd As Command
		Public ReadOnly Property cmd As Command
	        Get
				Return m_cmd
	        End Get
	    End Property
		
		Public Property responseRobotIndex As Integer
	        Set (value As Integer)
				m_responseRobotIndex = value
	        End Set
			Get
				Return m_responseRobotIndex
	        End Get
	    End Property
		
		Public Property responseProtocol As String
	        Set (protocol As String)
				m_changedResponseProtocol = protocol
	        End Set
			Get
				If m_changedResponseProtocol Is Nothing Then
					Return m_cmd.cmd
				Else
					Return m_changedResponseProtocol
				End If
	        End Get
	    End Property
		
		Private Dim m_args(MAX_ARGS) As String
		Public Property args(index As Integer) As String
			Set (value As String)
				If 0 <= index And index < MAX_ARGS Then
					m_args(index) = value
					If m_argNo < index + 1 Then
						m_argNo = index + 1
					End If
				End If
			End Set
	        Get
				If index < 0 Or m_argNo <= index Then
					Return ""
				Else
					Return m_args(index)
				End If
	        End Get
	    End Property
		
		Private Dim m_argNo As Integer
		Public ReadOnly Property argNo As Integer
	        Get
				Return m_argNo
	        End Get
	    End Property
		
		Private Dim m_err As Integer
		Public Property err As Integer
			Set (value As Integer)
				m_err = value
	        End Set
	        Get
				Return m_err
	        End Get
	    End Property
		
		
		
		
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(cmd As Command)
			m_cmd = cmd
			m_err = 0
			If cmd.responseRobotIndex = True Then
				m_responseRobotIndex = cmd.robotIndex
			Else
				m_responseRobotIndex = 0
			End If
		End Sub
		
		Public Sub New(protocol As String)
			m_cmd = New Command(protocol)
			responseProtocol = protocol
			m_err = 0
		End Sub
		
		
		
		Public Function toString() As String
			Dim result As String = ""
			Dim i As Integer
			
			If Me.responseRobotIndex <> 0 Then
				result = result & CStr(Me.responseRobotIndex) & "|"
			End If
			
			If m_err <> 0 Then
				result = result & errorHandler.changeResponseErrorCodeString(m_err)
				If responseProtocol = "GET" And thesystem.CurrentRetryCount > 1 And TheSystem.IsUseRetryCountLog = True Then
					result = responseProtocol + " " + CStr(thesystem.CurrentRetryCount - 1) + "/" + CStr(TheSystem.RetryCount) + " " + result
					thesystem.CurrentRetryCount = 0
					Return result
				Else	
					Return responseProtocol + " " + result
				End If
			End If
			
			If m_argNo > 0 Then
				For i = 0 To m_argNo-1
					If i >= 1 Then
						result = result & ","
					End If
					result = result & args(i)
				Next
			End If
			
			If result <> "" Then
				Return responseProtocol + " " + result
			Else
				If responseProtocol = "GET" And thesystem.CurrentRetryCount > 0 And TheSystem.IsUseRetryCountLog = True Then
					result = responseProtocol + " " + CStr(thesystem.CurrentRetryCount) + "/" + CStr(TheSystem.RetryCount) + result
					thesystem.CurrentRetryCount = 0
					Return result
				Else
					Return responseProtocol
				End If
			End If
		End Function
		
	End Class
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module RobotArmModule
	
	Public Const FlipDirection_FRONT As Integer = 1
	Public Const FlipDirection_BACK As Integer = 2
	Public Const FlipDirection_INVALID As Integer = 3
	
	Public Const EXTA_STEP As Integer = 1
	Public Const RETA_STEP As Integer = 2
	Public Const CROSS_STEP As Integer = 3
	Public Const ALL_STEP As Integer = 4
	Public Const RECO_STEP As Integer = 5
	
	Public Const SENSOR_CHECK_RESULT_OK As Integer = 0
	Public Const SENSOR_CHECK_RESULT_NOWAFER As Integer = 1
	Public Const SENSOR_CHECK_RESULT_OVERWAFER As Integer = 2
	
	'pow of 2
	Public Const GRIPTYPE_EDGE As Integer = 1
	Public Const GRIPTYPE_SEMIEDGE As Integer = 2
	Public Const GRIPTYPE_TONGS As Integer = 3
	Public Const GRIPTYPE_POCKET As Integer = 4
	Public Const GRIPTYPE_VACCUM As Integer = 5
	Public Const GRIPTYPE_VACCUMEDGEGUIDE As Integer = 6
	Public Const GRIPTYPE_TWOSTEPCLAMP As Integer = 7 '9->7 bowon 150721
	Public Const GRIPTYPE_BACKEDGE As Integer = 8
	Public Const GRIPTYPE_BACKTONGS As Integer = 9
	Public Const GRIPTYPE_BACKVACCUM As Integer = 10
	Public Const GRIPTYPE_BACKVACCUMEDGEGUIDE As Integer = 11
	
	Public Const MAX_ARM_EVENT_COUNT As Integer = 10
	
	Public Delegate Sub GripTypeFunction()
	
	Public Class RobotArm
	
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SETTING '''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		
		Public Sub setCrashDetectSensor(outputIO As Integer, inputIO As Integer, onDelay_ms As Integer)
			m_crashDetectSensorIO = outputIO
			m_crashDetectSensorInput = inputIO
			m_crashDetectSensorOnDelay = onDelay_ms
		End Sub

		Public Sub setFlipAxis(flipControlAxis As Integer, needToUseSafeRotatePosition As Boolean)
			m_flipControlAxis = flipControlAxis
			m_needToUseSafeRotatePosition = needToUseSafeRotatePosition
		End Sub
		
		Public Sub setFlipAxis(flipControlAxis As Integer)
			m_flipControlAxis = flipControlAxis
			m_needToUseSafeRotatePosition = False
		End Sub

		Public Sub setGripSequenceCheckFunction(index As Integer, runFunction As GripTypeFunction, back As Boolean)
			If index > m_totalGripTypeCount Then
				ThrowError(ERR_INVALID_HAND_TYPE)
			End If
			
			ReDim Preserve m_gripTypeCheckFunctionList(m_totalGripTypeCount)
			ReDim Preserve m_flipGripTypeCheckFunctionList(m_totalGripTypeCount)
			
			If back = True Then
				m_flipGripTypeCheckFunctionList(index - 1) = runFunction
			Else
				m_gripTypeCheckFunctionList(index - 1) = runFunction
			End If
		End Sub
		
		Public Sub setGripSequence(index As Integer, sequence As EdgeGripSequence, back As Boolean)
			If index > m_totalGripTypeCount Then
				m_totalGripTypeCount = index
				ReDim Preserve m_totalGripTypeList(m_totalGripTypeCount)
				ReDim Preserve m_totalFlipGripTypeList(m_totalGripTypeCount)
			End If
			
			Dim i As Integer = edgeGrip.getUpperBound(0)
			ReDim Preserve edgeGrip(i+1)
			edgeGrip(i) = sequence
			
			If back = True Then
				m_totalFlipGripTypeList(index-1) = "G" + CStr(i)
			Else
				m_totalGripTypeList(index-1) = "G" + CStr(i)
			End If
			
			m_gripType = GRIPTYPE_EDGE
			m_gripTypeIndex = i
			m_typeListIndex = index
		End Sub
		
		Public Sub setGripSequence(index As Integer, sequence As SemiEdgeGripSequence, back As Boolean)
			If index > m_totalGripTypeCount Then
				m_totalGripTypeCount = index
				ReDim Preserve m_totalGripTypeList(m_totalGripTypeCount)
				ReDim Preserve m_totalFlipGripTypeList(m_totalGripTypeCount)
			End If
			
			Dim i As Integer = semiEdgeGrip.getUpperBound(0)
			ReDim Preserve semiEdgeGrip(i+1)
			semiEdgeGrip(i) = sequence
			
			If back = True Then
				m_totalFlipGripTypeList(index-1) = "S" + CStr(i)
			Else
				m_totalGripTypeList(index-1) = "S" + CStr(i)
			End If
			
			m_gripType = GRIPTYPE_SEMIEDGE
			m_gripTypeIndex = i
			m_typeListIndex = index
		End Sub
		
		Public Sub setGripSequence(index As Integer, sequence As TongsGripSequence, back As Boolean)
			If index > m_totalGripTypeCount Then
				m_totalGripTypeCount = index
				ReDim Preserve m_totalGripTypeList(m_totalGripTypeCount)
				ReDim Preserve m_totalFlipGripTypeList(m_totalGripTypeCount)
			End If
			
			Dim i As Integer = tongsGrip.getUpperBound(0)
			ReDim Preserve tongsGrip(i+1)
			tongsGrip(i) = sequence
			
			If back = True Then
				m_totalFlipGripTypeList(index-1) = "T" + CStr(i)
			Else
				m_totalGripTypeList(index-1) = "T" + CStr(i)
			End If
			
			m_gripType = GRIPTYPE_TONGS
			m_gripTypeIndex = i
			m_typeListIndex = index
		End Sub
		
		Public Sub setGripSequence(index As Integer, sequence As VaccumGripSequence, back As Boolean)
			If index > m_totalGripTypeCount Then
				m_totalGripTypeCount = index
				ReDim Preserve m_totalGripTypeList(m_totalGripTypeCount)
				ReDim Preserve m_totalFlipGripTypeList(m_totalGripTypeCount)
			End If
			
			Dim i As Integer = vaccumGrip.getUpperBound(0)
			ReDim Preserve vaccumGrip(i+1)
			vaccumGrip(i) = sequence
			
			If back = True Then
				m_totalFlipGripTypeList(index-1) = "V" + CStr(i)
			Else
				m_totalGripTypeList(index-1) = "V" + CStr(i)
			End If
			
			m_gripType = GRIPTYPE_VACCUM
			m_gripTypeIndex = i
			m_typeListIndex = index
		End Sub
		
		Public Sub setGripSequence(index As Integer, sequence As VaccumEdgeGuideGripSequence, back As Boolean)
			If index > m_totalGripTypeCount Then
				m_totalGripTypeCount = index
				ReDim Preserve m_totalGripTypeList(m_totalGripTypeCount)
				ReDim Preserve m_totalFlipGripTypeList(m_totalGripTypeCount)
			End If
			
			Dim i As Integer = vaccumEdgeGuideGrip.getUpperBound(0)
			ReDim Preserve vaccumEdgeGuideGrip(i+1)
			vaccumEdgeGuideGrip(i) = sequence
			
			If back = True Then
				m_totalFlipGripTypeList(index-1) = "D" + CStr(i)
			Else
				m_totalGripTypeList(index-1) = "D" + CStr(i)
			End If
			
			m_gripType = GRIPTYPE_VACCUMEDGEGUIDE
			m_gripTypeIndex = i
			m_typeListIndex = index
		End Sub
		
		Public Sub setGripSequence(index As Integer, sequence As TwoStepClampGripSequence, back As Boolean)
			If index > m_totalGripTypeCount Then
				m_totalGripTypeCount = index
				ReDim Preserve m_totalGripTypeList(m_totalGripTypeCount)
				ReDim Preserve m_totalFlipGripTypeList(m_totalGripTypeCount)
			End If
			
			Dim i As Integer = twoStepClampGrip.getUpperBound(0)
			ReDim Preserve twoStepClampGrip(i+1)
			twoStepClampGrip(i) = sequence
			
			If back = True Then
				m_totalFlipGripTypeList(index-1) = "C" + CStr(i)
			Else
				m_totalGripTypeList(index-1) = "C" + CStr(i)
			End If
			
			m_gripType = GRIPTYPE_TWOSTEPCLAMP
			m_gripTypeIndex = i
			m_typeListIndex = index
		End Sub
		
		Public Sub setGripSequence(index As Integer, sequence As PocketGripSequence, back As Boolean)
			If index > m_totalGripTypeCount Then
				m_totalGripTypeCount = index
				ReDim Preserve m_totalGripTypeList(m_totalGripTypeCount)
				ReDim Preserve m_totalFlipGripTypeList(m_totalGripTypeCount)
			End If
			
			Dim i As Integer = pocketGrip.getUpperBound(0)
			ReDim Preserve pocketGrip(i+1)
			pocketGrip(i) = sequence
			
			If back = True Then
				m_totalFlipGripTypeList(index-1) = "P" + CStr(i)
			Else
				m_totalGripTypeList(index-1) = "P" + CStr(i)
			End If
			
			m_gripType = GRIPTYPE_POCKET
			m_gripTypeIndex = i
			m_typeListIndex = index
		End Sub
		
		Public Sub setGripSequence(index As Integer, sequence As BackEdgeGripSequence, back As Boolean)
			If index > m_totalGripTypeCount Then
				m_totalGripTypeCount = index
				ReDim Preserve m_totalGripTypeList(m_totalGripTypeCount)
				ReDim Preserve m_totalFlipGripTypeList(m_totalGripTypeCount)
			End If
			
			Dim i As Integer = backEdgeGrip.getUpperBound(0)
			ReDim Preserve backEdgeGrip(i+1)
			backEdgeGrip(i) = sequence
			
			If back = True Then
				m_totalFlipGripTypeList(index-1) = "BG" + CStr(i)
			Else
				m_totalGripTypeList(index-1) = "BG" + CStr(i)
			End If
			
			m_gripType = GRIPTYPE_BACKEDGE
			m_gripTypeIndex = i
			m_typeListIndex = index
		End Sub
		
		Public Sub setGripSequence(index As Integer, sequence As BackTongsGripSequence, back As Boolean)
			If index > m_totalGripTypeCount Then
				m_totalGripTypeCount = index
				ReDim Preserve m_totalGripTypeList(m_totalGripTypeCount)
				ReDim Preserve m_totalFlipGripTypeList(m_totalGripTypeCount)
			End If
			
			Dim i As Integer = backTongsGrip.getUpperBound(0)
			ReDim Preserve backTongsGrip(i+1)
			backTongsGrip(i) = sequence
			
			If back = True Then
				m_totalFlipGripTypeList(index-1) = "BT" + CStr(i)
			Else
				m_totalGripTypeList(index-1) = "BT" + CStr(i)
			End If
			
			m_gripType = GRIPTYPE_BACKTONGS
			m_gripTypeIndex = i
			m_typeListIndex = index
		End Sub
		
		Public Sub setGripSequence(index As Integer, sequence As BackVaccumGripSequence, back As Boolean)
			If index > m_totalGripTypeCount Then
				m_totalGripTypeCount = index
				ReDim Preserve m_totalGripTypeList(m_totalGripTypeCount)
				ReDim Preserve m_totalFlipGripTypeList(m_totalGripTypeCount)
			End If
			
			Dim i As Integer = backVaccumGrip.getUpperBound(0)
			ReDim Preserve backVaccumGrip(i+1)
			backVaccumGrip(i) = sequence
			
			If back = True Then
				m_totalFlipGripTypeList(index-1) = "BV" + CStr(i)
			Else
				m_totalGripTypeList(index-1) = "BV" + CStr(i)
			End If
			
			m_gripType = GRIPTYPE_BACKVACCUM
			m_gripTypeIndex = i
			m_typeListIndex = index
		End Sub
		
		Public Sub setGripSequence(index As Integer, sequence As BackVaccumEdgeGuideGripSequence, back As Boolean)
			If index > m_totalGripTypeCount Then
				m_totalGripTypeCount = index
				ReDim Preserve m_totalGripTypeList(m_totalGripTypeCount)
				ReDim Preserve m_totalFlipGripTypeList(m_totalGripTypeCount)
			End If
			
			Dim i As Integer = backVaccumEdgeGuideGrip.getUpperBound(0)
			ReDim Preserve backVaccumEdgeGuideGrip(i+1)
			backVaccumEdgeGuideGrip(i) = sequence
			
			If back = True Then
				m_totalFlipGripTypeList(index-1) = "BD" + CStr(i)
			Else
				m_totalGripTypeList(index-1) = "BD" + CStr(i)
			End If
			
			m_gripType = GRIPTYPE_BACKVACCUMEDGEGUIDE
			m_gripTypeIndex = i
			m_typeListIndex = index
		End Sub
		
		Public Sub setFinger(fingerIndex As Integer, sensorInfo As String)		
			Dim strArgs() As String
			strArgs = sensorInfo.split(",")
			
			If m_fingerCount < fingerIndex Then
				m_fingerCount = fingerIndex
			End If
			
			Select m_gripType
			Case GRIPTYPE_EDGE
				If strArgs.Length <> 3 Then
					throwError(ERR_INVALID_DATA)
				End If
				edgeGrip(m_gripTypeIndex).setFinger(fingerIndex,CInt(strArgs(0)),CInt(strArgs(1)),CInt(strArgs(2)))
			Case GRIPTYPE_TWOSTEPCLAMP
				If strArgs.Length <> 3 Then
					throwError(ERR_INVALID_DATA)
				End If
				twoStepClampGrip(m_gripTypeIndex).setFinger(fingerIndex,CInt(strArgs(0)),CInt(strArgs(1)),CInt(strArgs(2)))
			Case GRIPTYPE_SEMIEDGE
				If strArgs.Length <> 3 Then
					throwError(ERR_INVALID_DATA)
				End If
				semiEdgeGrip(m_gripTypeIndex).setFinger(fingerIndex,CInt(strArgs(0)),CInt(strArgs(1)),CInt(strArgs(2)))
			Case GRIPTYPE_TONGS
				If strArgs.Length <> 3 Then
					throwError(ERR_INVALID_DATA)
				End If
				semiEdgeGrip(m_gripTypeIndex).setFinger(fingerIndex,CInt(strArgs(0)),CInt(strArgs(1)),CInt(strArgs(2)))
			Case GRIPTYPE_POCKET
				If strArgs.Length <> 1 Then
					throwError(ERR_INVALID_DATA)
				End If
				pocketGrip(m_gripTypeIndex).setFinger(fingerIndex,CInt(strArgs(0)))
			Case GRIPTYPE_VACCUM
				If strArgs.Length <> 1 Then
					throwError(ERR_INVALID_DATA)
				End If
				vaccumGrip(m_gripTypeIndex).setFinger(fingerIndex,CInt(strArgs(0)))
			Case GRIPTYPE_VACCUMEDGEGUIDE
				If strArgs.Length <> 3 Then
					throwError(ERR_INVALID_DATA)
				End If
				vaccumEdgeGuideGrip(m_gripTypeIndex).setFinger(fingerIndex,CInt(strArgs(0)),CInt(strArgs(1)),CInt(strArgs(2)))
			Case GRIPTYPE_BACKEDGE
				If strArgs.Length <> 3 Then
					throwError(ERR_INVALID_DATA)
				End If
				backEdgeGrip(m_gripTypeIndex).setFinger(fingerIndex,CInt(strArgs(0)),CInt(strArgs(1)),CInt(strArgs(2)))
			Case GRIPTYPE_BACKTONGS
				If strArgs.Length <> 3 Then
					throwError(ERR_INVALID_DATA)
				End If
				backTongsGrip(m_gripTypeIndex).setFinger(fingerIndex,CInt(strArgs(0)),CInt(strArgs(1)),CInt(strArgs(2)))
			Case GRIPTYPE_BACKVACCUM
				If strArgs.Length <> 1 Then
					throwError(ERR_INVALID_DATA)
				End If
				backVaccumGrip(m_gripTypeIndex).setFinger(fingerIndex,CInt(strArgs(0)))
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				If strArgs.Length <> 3 Then
					throwError(ERR_INVALID_DATA)
				End If
				backVaccumEdgeGuideGrip(m_gripTypeIndex).setFinger(fingerIndex,CInt(strArgs(0)),CInt(strArgs(1)),CInt(strArgs(2)))
			End Select
		End Sub
		
		
		
		
		
		
		
		
		
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''' SETTING PROPERTY ''''''''''''''''''''''''
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim m_interBladeSlotInterval As Integer = 1
		Public Property interBladeSlotInterval As Integer
	        Get
	            Return m_interBladeSlotInterval
	        End Get
			Set (value As Integer)
	            m_interBladeSlotInterval = value
	        End Set
	    End Property
		
		Private Dim m_outerBladeSlotInterval As Integer = 1
		Public Property outerBladeSlotInterval As Integer
	        Get
	            Return m_outerBladeSlotInterval
	        End Get
			Set (value As Integer)
	            m_outerBladeSlotInterval = value
	        End Set
	    End Property
		
		Private Dim m_armCenterDeg As Double = -90
		Public Property armCenterDeg As Double
	        Get
				If myRobot(Robot.Selected-1).linkLength = 0 Then
					Return 0
				Else
	           		Return m_armCenterDeg
				End If
	        End Get
			Set (value As Double)
	            m_armCenterDeg = value
	        End Set
	    End Property
		
		Private Dim m_plateExistCheckIO As Integer = 0
		Public Property plateExistCheckIO As Integer
			Set (value As Integer)
				m_plateExistCheckIO = value
	        End Set
	        Get
	            Return m_plateExistCheckIO
	        End Get
	    End Property
		
		'bowon 150623
		Private Dim m_waferPresenceSensorSpecialCheckIO As Integer
		Public Property waferPresenceSensorSpecialCheckIO As Integer
			Set (value As Integer)
	            m_waferPresenceSensorSpecialCheckIO = value
	        End Set
			Get
	            Return m_waferPresenceSensorSpecialCheckIO
	        End Get
	    End Property
		
		Private Dim m_waferOutSensorIO As Integer = 0
		Public Property waferOutSensorIO As Integer
			Set (value As Integer)
				m_waferOutSensorIO = value
	        End Set
	        Get
	            Return m_waferOutSensorIO
	        End Get
	    End Property
		
		Private Dim m_externalUngripSensorIO As Integer = 0
		Public Property externalUngripSensorIO As Integer
			Set (value As Integer)
				m_externalUngripSensorIO = value
	        End Set
	        Get
	            Return m_externalUngripSensorIO
	        End Get
	    End Property
		
		Private Dim m_gripStateCheckSensor As Integer = 0
		Public Property gripStateCheckSensor As Integer
			Set (value As Integer)
				m_gripStateCheckSensor = value
	        End Set
	        Get
	            Return m_gripStateCheckSensor
	        End Get
	    End Property
		
		Private Dim m_armHomeSensorIO As Integer = 0
		Public Property armHomeSensorIO As Integer
			Set (value As Integer)
				m_armHomeSensorIO = value
	        End Set
	        Get
	            Return m_armHomeSensorIO
	        End Get
	    End Property

		Private Dim m_flipSizeDeg As Double = 20
		Public Property flipSizeDeg As Double
			Set (value As Double)
				m_flipSizeDeg = value
	        End Set
	        Get
	            Return m_flipSizeDeg
	        End Get
	    End Property
		
		Private Dim m_gripHalfStrokeTime_ms As Double = 0
		Public Property gripHalfStrokeTime_ms As Double
			Set (value As Double)
				m_gripHalfStrokeTime_ms = value
				MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Arm " + CStr(m_armIndex) + " : gripHalfStrokeTime " + CStr(m_gripHalfStrokeTime_ms) + " , ungripHalfStrokeTime " + CStr(m_ungripHalfStrokeTime_ms))
	        End Set
	        Get
	            Return m_gripHalfStrokeTime_ms
	        End Get
	    End Property
		
		Private Dim m_ungripHalfStrokeTime_ms As Double = 0
		Public Property ungripHalfStrokeTime_ms As Double
			Set (value As Double)
				m_ungripHalfStrokeTime_ms = value
				MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Arm " + CStr(m_armIndex) + " : gripHalfStrokeTime " + CStr(m_gripHalfStrokeTime_ms) + " , ungripHalfStrokeTime " + CStr(m_ungripHalfStrokeTime_ms))
	        End Set
	        Get
	            Return m_ungripHalfStrokeTime_ms
	        End Get
	    End Property
		
		'160808 joosh fiber sensor clamp select
		Private Dim m_useFiberSensorClamp As Boolean = False
		Public Property useFiberSensorClamp As Boolean
			Set (value As Boolean)
				m_useFiberSensorClamp = value
			End Set
			Get
				Return m_useFiberSensorClamp
			End Get
		End Property

			
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' EVENT ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		'&H1 ~ &H8000 of binary
		Shared Public Const EVENT_ARM_GRIP As Integer = &H1
		Shared Public Const EVENT_ARM_UNGRIP As Integer = &H2
		Shared Public Const EVENT_ARM_CRASHCHECK As Integer = &H4
		Shared Public Const EVENT_ARM_REALTIMESLIPCHECK As Integer = &H8
		
		'Shared Public Dim GripEventTimer As New TimeStamp
		'Shared Public Dim UnGripEventTimer As New TimeStamp
		
		Shared Public Dim ArmEventMutex As New Mutex
		Shared Public Dim ArmEventThread As Thread = New Thread("RobotArm.ArmEventThreadFunction",,"ArmEventThreadFunction")
		Shared Public Dim ArmEventList(MAX_ARM_EVENT_COUNT) As RobotArm
		Shared Public Dim ArmWaitEvent(MAX_ARM_EVENT_COUNT) As Integer
		Shared Public Sub AddArmEventList(arm As RobotArm, waitEvent As Integer)
			Dim i As Integer
			
			ArmEventMutex.lock()
			
			For i = 0 To MAX_ARM_EVENT_COUNT - 1
				If ArmEventList(i) Is Nothing Then
					ArmEventList(i) = arm
					ArmWaitEvent(i) = waitEvent
					Exit For
				End If
			Next i

			ArmEventMutex.unLock()
			
			If ArmEventThread.ThreadState <= 0 Then
				ArmEventThread.Start
			End If
		End Sub
		
		Shared Public Sub ArmEventThreadFunction()
			Dim events As Integer
			Dim i As Integer
			
			events = Thread.WaitEvent(&HFFFF, -1)
			ArmEventMutex.lock()
			
			Select events
			Case EVENT_ARM_GRIP
				For i = 0 To MAX_ARM_EVENT_COUNT - 1
					If Not(ArmEventList(i) Is Nothing) And ArmWaitEvent(i) = events Then
						ArmEventList(i).grip()
					End If
				Next i
			Case EVENT_ARM_UNGRIP
				For i = 0 To MAX_ARM_EVENT_COUNT - 1
					If Not(ArmEventList(i) Is Nothing) And ArmWaitEvent(i) = events Then
						ArmEventList(i).ungrip()
					End If
				Next i
			Case EVENT_ARM_CRASHCHECK
				For i = 0 To MAX_ARM_EVENT_COUNT - 1
					If Not(ArmEventList(i) Is Nothing) And ArmWaitEvent(i) = events Then
						ArmEventList(i).crashDetectSensorOnOff(True)
					End If
				Next i
			Case EVENT_ARM_REALTIMESLIPCHECK
				ArmEventList(i).realtimeSlipCheckStarted = True
			End Select
					
			For i = 0 To MAX_ARM_EVENT_COUNT - 1
				If Not(ArmEventList(i) Is Nothing) And ArmWaitEvent(i) = events Then
					ArmEventList(i) = Nothing
				End If
			Next i
			
			ArmEventMutex.unLock()
		End Sub
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		''''''''''''''''''''' Read Arm Property '''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim m_gripType As Integer = 0
		Private Dim m_gripTypeIndex As Integer = 0
		Public ReadOnly Property gripType As Integer
	        Get
	            Return m_gripType
	        End Get
	    End Property
		
		Private Dim m_totalGripTypeCount As Integer = 0
		Public ReadOnly Property totalGripTypeCount As Integer
			Get
				Return m_totalGripTypeCount
			End Get
		End Property
		
		Private Dim m_totalGripTypeList(0) As String
		Private Dim m_totalFlipGripTypeList(0) As String
		Private Dim m_gripTypeCheckFunctionList(0) As GripTypeFunction
		Private Dim m_flipGripTypeCheckFunctionList(0) As GripTypeFunction
		Public ReadOnly Property totalGripTypeString As String
	        Get
				Dim i As Integer
				Dim result As String = "" 'make griptype name for TP
				For i = 0 To m_totalGripTypeCount-1
					If m_totalGripTypeList(i).Substring(0,1) = "B" Then
						If m_totalGripTypeList(i).Substring(1,1) = "D" Then 'guide grip -> vaccum grip
							result = result + "V"
						ElseIf m_totalGripTypeList(i).Substring(1,1) = "T" Then 'tongs grip -> semi edge
							result = result + "S"
						Else
							result = result + m_totalGripTypeList(i).Substring(1,1)
						End If
					Else
						If m_totalGripTypeList(i).Substring(0,1) = "D" Then
							result = result + "V"
						ElseIf m_totalGripTypeList(i).Substring(0,1) = "T" Then
							result = result + "S"
						ElseIf m_totalGripTypeList(i).Substring(0,1) = "C" Then 'two step clamp -> edge
							result = result + "G"
						Else
							result = result + m_totalGripTypeList(i).Substring(0,1)
						End If
					End If
				Next i
	            Return result
	        End Get
	    End Property
		
		Private Dim m_typeListIndex As Integer = 0
		Public ReadOnly Property typeListIndex As Integer
			Get
				Return m_typeListIndex
			End Get
		End Property
		
		Private Dim edgeGrip(0) As EdgeGripSequence
		Private Dim twoStepClampGrip(0) As TwoStepClampGripSequence
		Private Dim semiEdgeGrip(0) As SemiEdgeGripSequence
		Private Dim tongsGrip(0) As TongsGripSequence
		Private Dim pocketGrip(0) As PocketGripSequence
		Private Dim vaccumGrip(0) As VaccumGripSequence
		Private Dim vaccumEdgeGuideGrip(0) As VaccumEdgeGuideGripSequence
		Private Dim backEdgeGrip(0) As BackEdgeGripSequence
		Private Dim backTongsGrip(0) As BackTongsGripSequence
		Private Dim backVaccumGrip(0) As BackVaccumGripSequence
		Private Dim backVaccumEdgeGuideGrip(0) As BackVaccumEdgeGuideGripSequence
		
		Private Dim m_needToUseSafeRotatePosition As Boolean = False
		Public ReadOnly Property needToUseSafeRotatePosition As Boolean
	        Get
	            Return m_needToUseSafeRotatePosition
	        End Get
	    End Property
		
		Public ReadOnly Property isCanFlip As Boolean
			Get
				If m_flipControlAxis <> 0 Then
					Return True
				Else
					Return False
				End If
			End Get
		End Property
		
		Private Dim m_fingerCount As Integer
		Public ReadOnly Property fingerCount As Integer
	        Get
	           Return m_fingerCount
	        End Get
	    End Property
		
		Private Dim m_controlAxis As Integer = 0
		Public ReadOnly Property controlAxis As Integer
	        Get
	            Return m_controlAxis
	        End Get
	    End Property
		
		Private Dim m_elbowControlAxis As Integer = 0
		Public ReadOnly Property elbowControlAxis As Integer
	        Get
	            Return m_elbowControlAxis
	        End Get
	    End Property
		
		Private Dim m_flipControlAxis As Integer = 0
		Public ReadOnly Property flipControlAxis As Integer
	        Get
	            Return m_flipControlAxis
	        End Get
	    End Property
		
		Private Dim m_armIndex As Integer
		Public ReadOnly Property armIndex As Integer
	        Get
	            Return m_armIndex
	        End Get
	    End Property
		
		Private Dim m_axisOrderIndex As Integer
		Public Property axisOrderIndex As Integer
			Set	(value As Integer)
				m_axisOrderIndex = value
			End Set
	        Get
	            Return m_axisOrderIndex
	        End Get
	    End Property
		
		Private Dim m_selectedFingerIndex As Integer
		Public Property selectedFingerIndex As Integer
			Set (value As Integer)
				m_selectedFingerIndex = value
	        End Set
	        Get
	            Return m_selectedFingerIndex
	        End Get
	    End Property

		
		Private Dim m_realtimeSlipCheckStarted As Boolean = False
		Public Property realtimeSlipCheckStarted As Boolean
			Set (value As Boolean)
				m_realtimeSlipCheckStarted = value
				If value = True Then
					Console.WriteLine(TimeStamp.CurrentTimeString() + " : Arm " + CStr(armIndex) + " Realtime SlipCheck Started " + CStr(realtimeSlipCheckSensor))
				Else
					Console.WriteLine(TimeStamp.CurrentTimeString() + " : Arm " + CStr(armIndex) + " Realtime SlipCheck Stopped " + CStr(realtimeSlipCheckSensor))
				End If
	        End Set
	        Get
	            Return m_realtimeSlipCheckStarted
	        End Get
	    End Property
		
		Private Dim m_realtimeSlipCheckSensorInput As Integer = 0
		Public Property realtimeSlipCheckSensor As Integer
			Set (value As Integer)
				m_realtimeSlipCheckSensorInput = value
	        End Set
	        Get
	            Return m_realtimeSlipCheckSensorInput
	        End Get
	    End Property
		
		Private Dim m_isCrashDetectSensorOn As Boolean = False
		Private Dim m_crashDetectSensorIO As Integer = 0
		Private Dim m_crashDetectSensorOnDelay As Integer = 50		
		Private Dim m_crashDetectSensorInput As Integer = 0
		
		Public ReadOnly Property isCrashDetectSensorOn As Boolean
	        Get
	            Return m_isCrashDetectSensorOn
	        End Get
	    End Property
		
		Public ReadOnly Property isUseCrashDetectSensor As Boolean
	        Get
				If m_crashDetectSensorIO <> 0 Then
					Return True
				Else
					Return False
				End If
	        End Get
	    End Property
		
		Private Sub parseGripTypeIndex(flipDirection As Integer, typeIndex As Integer, ByRef resultGripType As Integer, ByRef resultGripTypeIndex As Integer)
			If typeIndex > totalGripTypeCount Then
				throwError(ERR_INVALID_HAND_TYPE)
			End If

			Dim target As String
			If isCanFlip = True Then
				If flipDirection = FlipDirection_BACK Then
					target = m_totalFlipGripTypeList(typeIndex-1)
				Else
					target = m_totalGripTypeList(typeIndex-1)
				End If
			Else
				target = m_totalGripTypeList(typeIndex-1)
			End If
			
			If target.Substring(0,1) = "B" Then
				Select target.Substring(1,1)
				Case "G"
					resultGripType = GRIPTYPE_BACKEDGE
				Case "V"
					resultGripType = GRIPTYPE_BACKVACCUM
				Case "D"
					resultGripType = GRIPTYPE_BACKVACCUMEDGEGUIDE
				Case "T"
					resultGripType = GRIPTYPE_BACKTONGS
				Case Else
					ThrowError(ERR_INVALID_HAND_TYPE)
				End Select
				resultGripTypeIndex = CInt(target.Substring(2,1))
			Else
				Select target.Substring(0,1)
				Case "G"
					resultGripType = GRIPTYPE_EDGE
				Case "C"
					resultGripType = GRIPTYPE_TWOSTEPCLAMP
				Case "V"
					resultGripType = GRIPTYPE_VACCUM
				Case "D"
					resultGripType = GRIPTYPE_VACCUMEDGEGUIDE
				Case "S"
					resultGripType = GRIPTYPE_SEMIEDGE
				Case "T"
					resultGripType = GRIPTYPE_TONGS
				Case "P"
					resultGripType = GRIPTYPE_POCKET
				Case Else
					ThrowError(ERR_INVALID_HAND_TYPE)
				End Select
				resultGripTypeIndex = CInt(target.Substring(1,1))
			End If
		End Sub
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(armIndex As Integer, controlAxis As Integer)
			m_armIndex = armIndex
			m_controlAxis = controlAxis
			armHomeSensorIO = CInt(thePDBManager.getPDB(PDB_HOME_SENSOR, controlAxis))
		End Sub
		
		Public Sub New(armIndex As Integer, controlAxis As Integer, elbowControlAxis As Integer)
			m_armIndex = armIndex
			m_controlAxis = controlAxis
			m_elbowControlAxis = elbowControlAxis
			armHomeSensorIO = CInt(thePDBManager.getPDB(PDB_HOME_SENSOR, controlAxis))
		End Sub
		
		Public Function isCrashDetectedState() As Boolean
			If m_isCrashDetectSensorOn = False Then
				Return False
			End If
			
			If robotIO.getDIO(m_crashDetectSensorInput) = True Then
				Thread.Sleep(m_crashDetectSensorOnDelay)
				If robotIO.getDIO(m_crashDetectSensorInput) = True Then
					Return True
				Else
					Return False
				End If
			End If
			
			Return False
	    End Function
		
		Public Function isRealtimeSlipCheckState() As Boolean
			If m_realtimeSlipCheckSensorInput = 0 Or m_realtimeSlipCheckStarted = False Then
				Return False
			End If
			If robotIO.getDIO(m_realtimeSlipCheckSensorInput) = True Then
				Return True
			Else
				Return False
			End If
	    End Function
		
		Public Sub crashDetectSensorOnOff(flag As Boolean)
			If m_crashDetectSensorIO = 0 Then
				Exit Sub
			End If
			m_isCrashDetectSensorOn = flag
			robotIO.setDIO(m_crashDetectSensorIO,flag)
		End Sub
		
		Public Sub SetGripTypeIndex(typeIndex As Integer)
			SetGripTypeIndex(currentFlipDirection, typeIndex)
		End Sub
		
		Public Sub SetGripTypeIndex(flipDirection As Integer, typeIndex As Integer)
			Dim type As Integer
			Dim index As Integer
			parseGripTypeIndex(flipDirection,typeIndex,type,index)
			m_typeListIndex = typeIndex
			m_gripType = type
			m_gripTypeIndex = index
			
			If flipDirection = FlipDirection_BACK Then
				If m_flipGripTypeCheckFunctionList.getUpperBound(0) >= typeIndex Then
					If Not(m_flipGripTypeCheckFunctionList(typeIndex-1) Is Nothing) Then
						m_flipGripTypeCheckFunctionList(typeIndex-1)()
					End If
				End If
			Else
				If m_gripTypeCheckFunctionList.getUpperBound(0) >= typeIndex Then
					If Not(m_gripTypeCheckFunctionList(typeIndex-1) Is Nothing) Then
						m_gripTypeCheckFunctionList(typeIndex-1)()
					End If
				End If
			End If
		End Sub
		
		Public Function currentFlipDirection() As Integer
			If m_flipControlAxis <> 0 Then
				Dim curLoc As LocationEx = LocationEx.GetDestJointPos()
				Return checkFlipDirection(curLoc.loc.Angle(m_flipControlAxis))
			Else
				Return FlipDirection_FRONT
			End If
		End Function
		
		Public Function checkFlipDirection(loc As LocationEx) As Integer
			If isCanFlip = True Then
				If loc.type = COORD_JOINT Then
					Return checkFlipDirection(loc.loc.Angle(m_flipControlAxis))
				Else
					Return checkFlipDirection(loc.extra("F"))
				End If
			Else
				Return FlipDirection_FRONT
			End If
		End Function
		
		Public Function checkFlipDirection(flipDeg As Double) As Integer
			If Math.Abs(flipDeg) < m_flipSizeDeg Then
				Return FlipDirection_FRONT
			ElseIf Math.Abs(flipDeg) > 180 - m_flipSizeDeg And Math.Abs(flipDeg) < 180 + m_flipSizeDeg Then
				Return FlipDirection_BACK
			Else
				Return FlipDirection_INVALID
			End If
		End Function
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, mode As Integer) As LocationEx
			Select m_gripType
			Case GRIPTYPE_EDGE
				Return edgeGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode)
			Case GRIPTYPE_TWOSTEPCLAMP
				Return twoStepClampGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode)
			Case GRIPTYPE_SEMIEDGE
				Return semiEdgeGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode)
			Case GRIPTYPE_TONGS
				Return tongsGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode)
			Case GRIPTYPE_POCKET
				Return pocketGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode)
			Case GRIPTYPE_VACCUM
				Return vaccumGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode)
			Case GRIPTYPE_BACKEDGE
				Return backEdgeGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode)
			Case GRIPTYPE_BACKTONGS
				Return backTongsGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode)
			Case GRIPTYPE_BACKVACCUM
				Return backVaccumGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode)
			Case GRIPTYPE_VACCUMEDGEGUIDE
				Return vaccumEdgeGuideGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode)
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				Return backVaccumEdgeGuideGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode)
			End Select
			
			Return loc
		End Function
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, mode As Integer, offset As Double) As LocationEx
			Select m_gripType
			Case GRIPTYPE_EDGE
				Return edgeGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode,offset)
			Case GRIPTYPE_TWOSTEPCLAMP
				Return twoStepClampGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode,offset)
			Case GRIPTYPE_SEMIEDGE
				Return semiEdgeGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode,offset)
			Case GRIPTYPE_TONGS
				Return tongsGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode,offset)
			Case GRIPTYPE_POCKET
				Return pocketGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode,offset)
			Case GRIPTYPE_VACCUM
				Return vaccumGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode,offset)
			Case GRIPTYPE_BACKEDGE
				Return backEdgeGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode,offset)
			Case GRIPTYPE_BACKTONGS
				Return backTongsGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode,offset)
			Case GRIPTYPE_BACKVACCUM
				Return backVaccumGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode,offset)
			Case GRIPTYPE_VACCUMEDGEGUIDE
				Return vaccumEdgeGuideGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode,offset)
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				Return backVaccumEdgeGuideGrip(m_gripTypeIndex).prepareExtendArm(loc,stage,Me,mode,offset)
			End Select
			
			Return loc
		End Function
		
		Public Sub prepareRetractArm(mode As Integer)
			Select m_gripType
			Case GRIPTYPE_EDGE
				edgeGrip(m_gripTypeIndex).prepareRetractArm(Me,mode)
			Case GRIPTYPE_TWOSTEPCLAMP
				twoStepClampGrip(m_gripTypeIndex).prepareRetractArm(Me,mode)
			Case GRIPTYPE_SEMIEDGE
				semiEdgeGrip(m_gripTypeIndex).prepareRetractArm(Me,mode)
			Case GRIPTYPE_TONGS
				tongsGrip(m_gripTypeIndex).prepareRetractArm(Me,mode)
			Case GRIPTYPE_POCKET
				pocketGrip(m_gripTypeIndex).prepareRetractArm(Me,mode)
			Case GRIPTYPE_VACCUM
				vaccumGrip(m_gripTypeIndex).prepareRetractArm(Me,mode)
			Case GRIPTYPE_BACKEDGE
				backEdgeGrip(m_gripTypeIndex).prepareRetractArm(Me,mode)
			Case GRIPTYPE_BACKTONGS
				backTongsGrip(m_gripTypeIndex).prepareRetractArm(Me,mode)
			Case GRIPTYPE_BACKVACCUM
				backVaccumGrip(m_gripTypeIndex).prepareRetractArm(Me,mode)
			Case GRIPTYPE_VACCUMEDGEGUIDE
				vaccumEdgeGuideGrip(m_gripTypeIndex).prepareRetractArm(Me,mode)
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				backVaccumEdgeGuideGrip(m_gripTypeIndex).prepareRetractArm(Me,mode)
			End Select
		End Sub
		
		Public Sub afterRetractArm(mode As Integer)
			Select m_gripType
			Case GRIPTYPE_EDGE
				edgeGrip(m_gripTypeIndex).afterRetractArm(Me,mode)
			Case GRIPTYPE_TWOSTEPCLAMP
				twoStepClampGrip(m_gripTypeIndex).afterRetractArm(Me,mode)
			Case GRIPTYPE_SEMIEDGE
				semiEdgeGrip(m_gripTypeIndex).afterRetractArm(Me,mode)
			Case GRIPTYPE_TONGS
				tongsGrip(m_gripTypeIndex).afterRetractArm(Me,mode)
			Case GRIPTYPE_POCKET
				pocketGrip(m_gripTypeIndex).afterRetractArm(Me,mode)
			Case GRIPTYPE_VACCUM
				vaccumGrip(m_gripTypeIndex).afterRetractArm(Me,mode)
			Case GRIPTYPE_BACKEDGE
				backEdgeGrip(m_gripTypeIndex).afterRetractArm(Me,mode)
			Case GRIPTYPE_BACKTONGS
				backTongsGrip(m_gripTypeIndex).afterRetractArm(Me,mode)
			Case GRIPTYPE_BACKVACCUM
				backVaccumGrip(m_gripTypeIndex).afterRetractArm(Me,mode)
			Case GRIPTYPE_VACCUMEDGEGUIDE
				vaccumEdgeGuideGrip(m_gripTypeIndex).afterRetractArm(Me,mode)
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				backVaccumEdgeGuideGrip(m_gripTypeIndex).afterRetractArm(Me,mode)
			End Select
		End Sub
		
		Public Function defaultGripStage() As Boolean
			Return defaultGripStage(m_typeListIndex)
		End Function
		
		Public Function defaultGripStage(typeIndex As Integer) As Boolean
			Dim type As Integer
			Dim index As Integer
			If m_typeListIndex = typeIndex Then
				type = m_gripType
				index = m_gripTypeIndex
			Else
				parseGripTypeIndex(currentFlipDirection,typeIndex,type,index)
			End If
			
            Select type
			Case GRIPTYPE_EDGE
				Return edgeGrip(index).defaultGripStage
			Case GRIPTYPE_TWOSTEPCLAMP
				Return twoStepClampGrip(index).defaultGripStage
			Case GRIPTYPE_SEMIEDGE
				Return semiEdgeGrip(index).defaultGripStage
			Case GRIPTYPE_TONGS
				Return tongsGrip(index).defaultGripStage
			Case GRIPTYPE_POCKET
				Return pocketGrip(index).defaultGripStage
			Case GRIPTYPE_VACCUM
				Return vaccumGrip(index).defaultGripStage
			Case GRIPTYPE_BACKEDGE
				Return backEdgeGrip(index).defaultGripStage
			Case GRIPTYPE_BACKTONGS
				Return backTongsGrip(index).defaultGripStage
			Case GRIPTYPE_BACKVACCUM
				Return backVaccumGrip(index).defaultGripStage
			Case GRIPTYPE_VACCUMEDGEGUIDE
				Return vaccumEdgeGuideGrip(index).defaultGripStage
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				Return backVaccumEdgeGuideGrip(index).defaultGripStage
			End Select
		End Function
		
		Public Function isMagneticWaferDetectSensor() As Boolean
			Return isMagneticWaferDetectSensor(m_typeListIndex)
		End Function
		
		Public Function isMagneticWaferDetectSensor(typeIndex As Integer) As Boolean
			Dim type As Integer
			Dim index As Integer
			If m_typeListIndex = typeIndex Then
				type = m_gripType
				index = m_gripTypeIndex
			Else
				parseGripTypeIndex(currentFlipDirection,typeIndex,type,index)
			End If
			
            Select type
			Case GRIPTYPE_EDGE
				Return edgeGrip(index).magneticWaferDetectSensor
			Case GRIPTYPE_TWOSTEPCLAMP
				Return twoStepClampGrip(index).magneticWaferDetectSensor
			Case GRIPTYPE_SEMIEDGE
				Return semiEdgeGrip(index).magneticWaferDetectSensor
			Case GRIPTYPE_TONGS
				Return tongsGrip(index).magneticWaferDetectSensor
			Case GRIPTYPE_POCKET
				Return pocketGrip(index).magneticWaferDetectSensor
			Case GRIPTYPE_VACCUM
				Return vaccumGrip(index).magneticWaferDetectSensor
			Case GRIPTYPE_BACKEDGE
				Return backEdgeGrip(index).magneticWaferDetectSensor
			Case GRIPTYPE_BACKTONGS
				Return backTongsGrip(index).magneticWaferDetectSensor
			Case GRIPTYPE_BACKVACCUM
				Return backVaccumGrip(index).magneticWaferDetectSensor
			Case GRIPTYPE_VACCUMEDGEGUIDE
				Return vaccumEdgeGuideGrip(index).magneticWaferDetectSensor
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				Return backVaccumEdgeGuideGrip(index).magneticWaferDetectSensor
			End Select
		End Function
		
		Public Function isBackSide() As Boolean
			Return isBackSide(m_typeListIndex)
		End Function
		
		Public Function isBackSide(typeIndex As Integer) As Boolean			
			Dim type As Integer
			Dim index As Integer
			If m_typeListIndex = typeIndex Then
				type = m_gripType
				index = m_gripTypeIndex
			Else
				parseGripTypeIndex(currentFlipDirection,typeIndex,type,index)
			End If
			
        	Select type
			Case GRIPTYPE_EDGE
				Return edgeGrip(index).isBackSide
			Case GRIPTYPE_TWOSTEPCLAMP
				Return twoStepClampGrip(index).isBackSide
			Case GRIPTYPE_SEMIEDGE
				Return semiEdgeGrip(index).isBackSide
			Case GRIPTYPE_TONGS
				Return tongsGrip(index).isBackSide
			Case GRIPTYPE_POCKET
				Return pocketGrip(index).isBackSide
			Case GRIPTYPE_VACCUM
				Return vaccumGrip(index).isBackSide
			Case GRIPTYPE_BACKEDGE
				Return backEdgeGrip(index).isBackSide
			Case GRIPTYPE_BACKTONGS
				Return backTongsGrip(index).isBackSide
			Case GRIPTYPE_BACKVACCUM
				Return backVaccumGrip(index).isBackSide
			Case GRIPTYPE_VACCUMEDGEGUIDE
				Return vaccumEdgeGuideGrip(index).isBackSide
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				Return backVaccumEdgeGuideGrip(index).isBackSide
			End Select
	    End Function
		
		Public Function isUseExtraGuideGrip() As Boolean
			Return isUseExtraGuideGrip(m_typeListIndex)
		End Function
		
		Public Function isUseExtraGuideGrip(typeIndex As Integer) As Boolean
			Dim type As Integer
			Dim index As Integer
			If m_typeListIndex = typeIndex Then
				type = m_gripType
				index = m_gripTypeIndex
			Else
				parseGripTypeIndex(currentFlipDirection,typeIndex,type,index)
			End If
			
            Select type
			Case GRIPTYPE_EDGE
				Return edgeGrip(index).isUseextraGuideGrip
			Case GRIPTYPE_TWOSTEPCLAMP
				Return twoStepClampGrip(index).isUseextraGuideGrip
			Case GRIPTYPE_SEMIEDGE
				Return semiEdgeGrip(index).isUseextraGuideGrip
			Case GRIPTYPE_TONGS
				Return tongsGrip(index).isUseextraGuideGrip
			Case GRIPTYPE_POCKET
				Return pocketGrip(index).isUseextraGuideGrip
			Case GRIPTYPE_VACCUM
				Return vaccumGrip(index).isUseextraGuideGrip
			Case GRIPTYPE_BACKEDGE
				Return backEdgeGrip(index).isUseextraGuideGrip
			Case GRIPTYPE_BACKTONGS
				Return backTongsGrip(index).isUseextraGuideGrip
			Case GRIPTYPE_BACKVACCUM
				Return backVaccumGrip(index).isUseextraGuideGrip
			Case GRIPTYPE_VACCUMEDGEGUIDE
				Return vaccumEdgeGuideGrip(index).isUseextraGuideGrip
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				Return backVaccumEdgeGuideGrip(index).isUseextraGuideGrip
			End Select
		End Function
		
		Public Function isGrip() As Boolean
			Return isGrip(m_typeListIndex)
		End Function
		
		Public Function isGrip(typeIndex As Integer) As Boolean
			Dim result As Boolean
			
			If typeIndex > totalGripTypeCount Then
				Return False
			End If
			
			Dim type As Integer
			Dim index As Integer
			If m_typeListIndex = typeIndex Then
				type = m_gripType
				index = m_gripTypeIndex
			Else
				parseGripTypeIndex(currentFlipDirection,typeIndex,type,index)
			End If

			Select type
			Case GRIPTYPE_EDGE
				result = edgeGrip(index).isGrip()
			Case GRIPTYPE_TWOSTEPCLAMP
				Return twoStepClampGrip(index).isGrip()
			Case GRIPTYPE_SEMIEDGE
				result = semiEdgeGrip(index).isGrip()
			Case GRIPTYPE_TONGS
				result = tongsGrip(index).isGrip()
			Case GRIPTYPE_POCKET
				result = pocketGrip(index).isGrip()
			Case GRIPTYPE_VACCUM
				result = vaccumGrip(index).isGrip()
			Case GRIPTYPE_BACKEDGE
				result = backEdgeGrip(index).isGrip()
			Case GRIPTYPE_BACKTONGS
				result = backTongsGrip(index).isGrip()
			Case GRIPTYPE_BACKVACCUM
				result = backVaccumGrip(index).isGrip()
			Case GRIPTYPE_VACCUMEDGEGUIDE
				Return vaccumEdgeGuideGrip(index).isGrip()
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				Return backVaccumEdgeGuideGrip(index).isGrip()
			End Select
			
			Return result
		End Function
		
		Public Function isExtraGuideGrip() As Boolean
			Dim result As Boolean
			
			Dim type As Integer
			Dim index As Integer
			type = m_gripType
			index = m_gripTypeIndex
		
			Select type
			Case GRIPTYPE_EDGE
				result = edgeGrip(index).isExtraGuideGrip()
			Case GRIPTYPE_TWOSTEPCLAMP
				Return twoStepClampGrip(index).isExtraGuideGrip()
			Case GRIPTYPE_SEMIEDGE
				result = semiEdgeGrip(index).isExtraGuideGrip()
			Case GRIPTYPE_TONGS
				result = tongsGrip(index).isExtraGuideGrip()
			Case GRIPTYPE_POCKET
				result = pocketGrip(index).isExtraGuideGrip()
			Case GRIPTYPE_VACCUM
				result = vaccumGrip(index).isExtraGuideGrip()
			Case GRIPTYPE_BACKEDGE
				result = backEdgeGrip(index).isExtraGuideGrip()
			Case GRIPTYPE_BACKTONGS
				result = backTongsGrip(index).isExtraGuideGrip()
			Case GRIPTYPE_BACKVACCUM
				result = backVaccumGrip(index).isExtraGuideGrip()
			Case GRIPTYPE_VACCUMEDGEGUIDE
				Return vaccumEdgeGuideGrip(index).isExtraGuideGrip()
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				Return backVaccumEdgeGuideGrip(index).isExtraGuideGrip()
			End Select
			
			Return result
		End Function
		
		Public Sub grip()
			grip(True)
		End Sub
		
		Public Sub ungrip()
			grip(False)
		End Sub
		
		Public Sub grip(flag As Boolean)
			grip(m_typeListIndex,flag)
		End Sub
		
		Public Sub grip(typeIndex As Integer, flag As Boolean)
			If typeIndex > totalGripTypeCount Then
				Exit Sub
			End If
			
			Dim type As Integer
			Dim index As Integer
			If m_typeListIndex = typeIndex Then
				type = m_gripType
				index = m_gripTypeIndex
			Else
				parseGripTypeIndex(currentFlipDirection,typeIndex,type,index)
			End If
			
			Select type
			Case GRIPTYPE_EDGE
				edgeGrip(index).grip(flag)
			Case GRIPTYPE_TWOSTEPCLAMP
				twoStepClampGrip(index).grip(flag)
			Case GRIPTYPE_SEMIEDGE
				semiEdgeGrip(index).grip(flag)
			Case GRIPTYPE_TONGS
				tongsGrip(index).grip(flag)
			Case GRIPTYPE_POCKET
				pocketGrip(index).grip(flag)
			Case GRIPTYPE_VACCUM
				vaccumGrip(index).grip(flag)
			Case GRIPTYPE_BACKEDGE
				backEdgeGrip(index).grip(flag)
			Case GRIPTYPE_BACKTONGS
				backTongsGrip(index).grip(flag)
			Case GRIPTYPE_BACKVACCUM
				backVaccumGrip(index).grip(flag)
			Case GRIPTYPE_VACCUMEDGEGUIDE
				vaccumEdgeGuideGrip(index).grip(flag)
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				backVaccumEdgeGuideGrip(index).grip(flag)
			End Select
		End Sub
		
		Public Function pusherGripTimeTest() As Double
			Dim armList(0) As RobotArm
			armList(0) = Nothing
			Return pusherGripTimeTest(armList,m_typeListIndex,True,True)
		End Function
		
		Public Function pusherUngripTimeTest() As Double
			Dim armList(0) As RobotArm
			armList(0) = Nothing
			Return pusherGripTimeTest(armList,m_typeListIndex,False,True)
		End Function
		
		Public Function pusherGripTimeTest(flag As Boolean) As Double
			Dim armList(0) As RobotArm
			armList(0) = Nothing
			Return pusherGripTimeTest(armList,m_typeListIndex,flag,True)
		End Function
		
		Public Function pusherGripTimeTest(flag As Boolean, fullStroke As Boolean) As Double
			Dim armList(0) As RobotArm
			armList(0) = Nothing
			Return pusherGripTimeTest(armList,m_typeListIndex,flag,fullStroke)
		End Function
		
		Public Function pusherGripTimeTest(armList() As RobotArm, flag As Boolean, fullStroke As Boolean) As Double
			Return pusherGripTimeTest(armlist,m_typeListIndex,flag,fullStroke)
		End Function
		
		Public Function pusherGripTimeTest(typeIndex As Integer, flag As Boolean, fullStroke As Boolean) As Double
			Dim armList(0) As RobotArm
			armList(0) = Nothing
			Return pusherGripTimeTest(armlist,m_typeListIndex,flag,fullStroke)
		End Function
		
		Public Function pusherGripTimeTest(armList() As RobotArm, typeIndex As Integer, flag As Boolean, fullStroke As Boolean) As Double
			If typeIndex > totalGripTypeCount Then
				Return 0
			End If
			
			Dim type As Integer
			Dim index As Integer
			If m_typeListIndex = typeIndex Then
				type = m_gripType
				index = m_gripTypeIndex
			Else
				parseGripTypeIndex(currentFlipDirection,typeIndex,type,index)
			End If
			
			Select type
			Case GRIPTYPE_EDGE
				Return edgeGrip(index).pusherGripTimeTest(flag,fullStroke,armList)
			Case GRIPTYPE_TWOSTEPCLAMP
				Return twoStepClampGrip(index).pusherGripTimeTest(flag,fullStroke)
			Case GRIPTYPE_SEMIEDGE
				Return semiEdgeGrip(index).pusherGripTimeTest(flag,fullStroke)
			Case GRIPTYPE_TONGS
				Return tongsGrip(index).pusherGripTimeTest(flag,fullStroke)
			Case GRIPTYPE_POCKET
				Return pocketGrip(index).pusherGripTimeTest(flag,fullStroke)
			Case GRIPTYPE_VACCUM
				Return vaccumGrip(index).pusherGripTimeTest(flag,fullStroke)
			Case GRIPTYPE_BACKEDGE
				Return backEdgeGrip(index).pusherGripTimeTest(flag,fullStroke)
			Case GRIPTYPE_BACKTONGS
				Return backTongsGrip(index).pusherGripTimeTest(flag,fullStroke)
			Case GRIPTYPE_BACKVACCUM
				Return backVaccumGrip(index).pusherGripTimeTest(flag,fullStroke)
			Case GRIPTYPE_VACCUMEDGEGUIDE
				Return vaccumEdgeGuideGrip(index).pusherGripTimeTest(flag,fullStroke)
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				Return backVaccumEdgeGuideGrip(index).pusherGripTimeTest(flag,fullStroke)
			End Select
		End Function
		
		Public Sub extraGuideGrip(flag As Boolean)
			Dim type As Integer
			Dim index As Integer
			type = m_gripType
			index = m_gripTypeIndex
			
			Select type
			Case GRIPTYPE_EDGE
				edgeGrip(index).extraGuideGrip(flag)
			Case GRIPTYPE_TWOSTEPCLAMP
				twoStepClampGrip(index).extraGuideGrip(flag)
			Case GRIPTYPE_SEMIEDGE
				semiEdgeGrip(index).extraGuideGrip(flag)
			Case GRIPTYPE_TONGS
				tongsGrip(index).extraGuideGrip(flag)
			Case GRIPTYPE_POCKET
				pocketGrip(index).extraGuideGrip(flag)
			Case GRIPTYPE_VACCUM
				vaccumGrip(index).extraGuideGrip(flag)
			Case GRIPTYPE_BACKEDGE
				backEdgeGrip(index).extraGuideGrip(flag)
			Case GRIPTYPE_BACKTONGS
				backTongsGrip(index).extraGuideGrip(flag)
			Case GRIPTYPE_BACKVACCUM
				backVaccumGrip(index).extraGuideGrip(flag)
			Case GRIPTYPE_VACCUMEDGEGUIDE
				vaccumEdgeGuideGrip(index).extraGuideGrip(flag)
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				backVaccumEdgeGuideGrip(index).extraGuideGrip(flag)
			End Select
		End Sub
		
		Public Function fingerSensorCheck(fingerIndex As Integer) As Boolean
			Return fingerSensorCheck(m_typeListIndex,fingerIndex)
		End Function
		
		Public Function fingerSensorCheck(typeIndex As Integer, fingerIndex As Integer) As Boolean
			If typeIndex > totalGripTypeCount Then
				Return False
			End If
			
			Dim type As Integer
			Dim index As Integer
			If m_typeListIndex = typeIndex Then
				type = m_gripType
				index = m_gripTypeIndex
			Else
				parseGripTypeIndex(currentFlipDirection,typeIndex,type,index)
			End If
			
			Select type
			Case GRIPTYPE_EDGE
				Return edgeGrip(index).fingerSensorCheck(fingerIndex)
			Case GRIPTYPE_TWOSTEPCLAMP
				Return twoStepClampGrip(index).fingerSensorCheck(fingerIndex)
			Case GRIPTYPE_SEMIEDGE
				Return semiEdgeGrip(index).fingerSensorCheck(fingerIndex)
			Case GRIPTYPE_TONGS
				Return tongsGrip(index).fingerSensorCheck(fingerIndex)
			Case GRIPTYPE_POCKET
				Return pocketGrip(index).fingerSensorCheck(fingerIndex)
			Case GRIPTYPE_VACCUM
				Return vaccumGrip(index).fingerSensorCheck(fingerIndex)
			Case GRIPTYPE_BACKEDGE
				Return backEdgeGrip(index).fingerSensorCheck(fingerIndex)
			Case GRIPTYPE_BACKTONGS
				Return backTongsGrip(index).fingerSensorCheck(fingerIndex)
			Case GRIPTYPE_BACKVACCUM
				Return backVaccumGrip(index).fingerSensorCheck(fingerIndex)
			Case GRIPTYPE_VACCUMEDGEGUIDE
				Return vaccumEdgeGuideGrip(index).fingerSensorCheck(fingerIndex)
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				Return backVaccumEdgeGuideGrip(index).fingerSensorCheck(fingerIndex)
			End Select
		End Function
		
		Public Function fingerHomeCheck(fingerIndex As Integer) As Boolean
			Return fingerHomeCheck(m_typeListIndex,fingerIndex)
		End Function
		
		Public Function fingerHomeCheck(typeIndex As Integer, fingerIndex As Integer) As Boolean
			If typeIndex > totalGripTypeCount Then
				Return False
			End If
			
			Dim type As Integer
			Dim index As Integer
			If m_typeListIndex = typeIndex Then
				type = m_gripType
				index = m_gripTypeIndex
			Else
				parseGripTypeIndex(currentFlipDirection,typeIndex,type,index)
			End If
			
			Select type
			Case GRIPTYPE_EDGE
				Return edgeGrip(index).fingerHomeCheck(fingerIndex)
			Case GRIPTYPE_TWOSTEPCLAMP
				Return twoStepClampGrip(index).fingerHomeCheck(fingerIndex)
			Case GRIPTYPE_SEMIEDGE
				Return semiEdgeGrip(index).fingerHomeCheck(fingerIndex)
			Case GRIPTYPE_TONGS
				Return tongsGrip(index).fingerHomeCheck(fingerIndex)
			Case GRIPTYPE_POCKET
				Return pocketGrip(index).fingerHomeCheck(fingerIndex)
			Case GRIPTYPE_VACCUM
				Return vaccumGrip(index).fingerHomeCheck(fingerIndex)
			Case GRIPTYPE_BACKEDGE
				Return backEdgeGrip(index).fingerHomeCheck(fingerIndex)
			Case GRIPTYPE_BACKTONGS
				Return backTongsGrip(index).fingerHomeCheck(fingerIndex)
			Case GRIPTYPE_BACKVACCUM
				Return backVaccumGrip(index).fingerHomeCheck(fingerIndex)
			Case GRIPTYPE_VACCUMEDGEGUIDE
				Return vaccumEdgeGuideGrip(index).fingerHomeCheck(fingerIndex)
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				Return backVaccumEdgeGuideGrip(index).fingerHomeCheck(fingerIndex)
			End Select
		End Function
		
		Public Function getFingerSensorGripIO(fingerIndex As Integer) As Integer
			Return getFingerSensorGripIO(m_typeListIndex,fingerIndex)
		End Function
		
		Public Function getFingerSensorGripIO(typeIndex As Integer, fingerIndex As Integer) As Integer
			If typeIndex > totalGripTypeCount Then
				Return False
			End If
			
			Dim type As Integer
			Dim index As Integer
			If m_typeListIndex = typeIndex Then
				type = m_gripType
				index = m_gripTypeIndex
			Else
				parseGripTypeIndex(currentFlipDirection,typeIndex,type,index)
			End If
			
			Select type
			Case GRIPTYPE_EDGE
				Return edgeGrip(index).getFingerSensorGripIO(fingerIndex)
			Case GRIPTYPE_TWOSTEPCLAMP
				Return twoStepClampGrip(index).getFingerSensorGripIO(fingerIndex)
			Case GRIPTYPE_SEMIEDGE
				Return semiEdgeGrip(index).getFingerSensorGripIO(fingerIndex)
			Case GRIPTYPE_TONGS
				Return tongsGrip(index).getFingerSensorGripIO(fingerIndex)
			Case GRIPTYPE_POCKET
				Return pocketGrip(index).getFingerSensorGripIO(fingerIndex)
			Case GRIPTYPE_VACCUM
				Return vaccumGrip(index).getFingerSensorGripIO(fingerIndex)
			Case GRIPTYPE_BACKEDGE
				Return backEdgeGrip(index).getFingerSensorGripIO(fingerIndex)
			Case GRIPTYPE_BACKTONGS
				Return backTongsGrip(index).getFingerSensorGripIO(fingerIndex)
			Case GRIPTYPE_BACKVACCUM
				Return backVaccumGrip(index).getFingerSensorGripIO(fingerIndex)
			Case GRIPTYPE_VACCUMEDGEGUIDE
				Return vaccumEdgeGuideGrip(index).getFingerSensorGripIO(fingerIndex)
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				Return backVaccumEdgeGuideGrip(index).getFingerSensorGripIO(fingerIndex)
			End Select
		End Function
		
		Public Function SensorCheck(flag As Boolean) As Boolean
			Dim ret As Integer
			If flag = True Then
				ret = SensorCheck_wafer_code()
			Else
				ret = SensorCheck_noWafer_code()
			End If
			If ret = SENSOR_CHECK_RESULT_OK Then
				Return True
			Else
				Return False
			End If
		End Function
		
		Public Function SensorCheck(typeIndex As Integer, flag As Boolean) As Boolean
			Dim ret As Integer
			If flag = True Then
				ret = SensorCheck_wafer_code(typeIndex)
			Else
				ret = SensorCheck_noWafer_code(typeIndex)
			End If
			If ret = SENSOR_CHECK_RESULT_OK Then
				Return True
			Else
				Return False
			End If
		End Function
		
		Public Function sensorCheck_noWafer_code_untileOK(maximumRetryTime_ms As Integer) As Integer
			Return sensorCheck_noWafer_code_untileOK(maximumRetryTime_ms,m_typeListIndex)
		End Function
		
		Public Function sensorCheck_noWafer_code_untileOK(maximumRetryTime_ms As Integer,typeIndex As Integer) As Integer
			Dim timer As New TimeStamp
			Dim preResult As Integer = -1
			Dim result As Integer
			timer.startTimer()
			While True
				result = sensorCheck_noWafer_code(typeIndex)
				If preResult <> result Then
					preResult = result
					If ShowCommandLogToConsole = True Then
						If result = SENSOR_CHECK_RESULT_OK Then
							MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : SENSOR_CHECK_RESULT_OK")
						Else
							MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : SENSOR_CHECK_ERROR = " + CStr(result))
						End If
					End If
				End If
				If result = SENSOR_CHECK_RESULT_OK Then
					Return result
				End If
				If timer.elapsedTime() > maximumRetryTime_ms Then
					Return result
				End If
				Thread.Sleep(10)
			End While
			Return result
		End Function

		Public Function sensorCheck_noWafer_code() As Integer
			Return sensorCheck_noWafer_code(m_typeListIndex)
		End Function
		
		Public Function sensorCheck_noWafer_code(typeIndex As Integer) As Integer
			Dim i As Integer
			Dim result As Integer = SENSOR_CHECK_RESULT_OK
			
			If theSystem.demoMode = 0 Then
				If waferOutSensorIO <> 0 Then
					If robotIO.getDIO(waferOutSensorIO) = True Then
						throwError(ERR_WAFER_OUT)
					End If
				End If	
			End If
			
			For i = 1 To fingerCount
				If fingerSensorCheck(typeIndex,i) = True Then
					result = SENSOR_CHECK_RESULT_OVERWAFER
					Exit For
				End If
			Next i
			
			Return result
		End Function
		
		Public Function sensorCheck_wafer_code_untileOK(maximumRetryTime_ms As Integer) As Integer
			Return sensorCheck_wafer_code_untileOK(maximumRetryTime_ms,m_typeListIndex)
		End Function
		
		Public Function sensorCheck_wafer_code_untileOK(maximumRetryTime_ms As Integer,typeIndex As Integer) As Integer
			Dim timer As New TimeStamp
			Dim preResult As Integer = -1
			Dim result As Integer
			timer.startTimer()
			While True
				result = sensorCheck_wafer_code(typeIndex)
				If preResult <> result Then
					preResult = result
					If ShowCommandLogToConsole = True Then
						If result = SENSOR_CHECK_RESULT_OK Then
							MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : SENSOR_CHECK_RESULT_OK")
						Else
							MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : SENSOR_CHECK_ERROR = " + CStr(result))
						End If
					End If
				End If
				If result = SENSOR_CHECK_RESULT_OK Then
					Return result
				End If
				If timer.elapsedTime() > maximumRetryTime_ms Then
					Return result
				End If
				Thread.Sleep(10)
			End While
			Return result
		End Function
		
		Public Function sensorCheck_wafer_code() As Integer
			Return sensorCheck_wafer_code(m_typeListIndex)
		End Function
		
		Public Function sensorCheck_wafer_code(typeIndex As Integer) As Integer
			Dim i As Integer
			Dim result As Integer = SENSOR_CHECK_RESULT_OK
			
			If theSystem.demoMode = 0 Then
				If waferOutSensorIO <> 0 Then
					If robotIO.getDIO(waferOutSensorIO) = True Then
						throwError(ERR_WAFER_OUT)
					End If
				End If
				
				If gripStateCheckSensor <> 0 Then
					If isGrip() = True Then
						If robotIO.getDIO(gripStateCheckSensor) = False Then
							throwError(ERR_AIRSTOP_ERROR)
						End If
					End If
				End If
			End If
			
			If externalUngripSensorIO <> 0 Then
				If isGrip() = True Then
					If robotIO.getDIO(externalUngripSensorIO) = True Then
						Return SENSOR_CHECK_RESULT_NOWAFER
					End If
				End If
			End If

			Dim selected As Boolean
			For i = 1 To fingerCount
				selected = Math.Pow(2,i-1) And selectedFingerIndex
				If selected = True Then
					If fingerSensorCheck(typeIndex,i) = False Then
						result = SENSOR_CHECK_RESULT_NOWAFER
						Exit For
					End If
				Else
					If fingerSensorCheck(typeIndex,i) = True Then
						result = SENSOR_CHECK_RESULT_OVERWAFER
						Exit For
					End If
				End If
			Next i
			
			Return result
		End Function
		
		Public Function sensorCheck_gripperHome() As Boolean
			Return sensorCheck_gripperHome_untileOK(0,m_typeListIndex)
		End Function
		
		Public Function sensorCheck_gripperHome(typeIndex As Integer) As Boolean
			Return sensorCheck_gripperHome_untileOK(0,typeIndex)
		End Function
		
		Public Function sensorCheck_gripperHome_untileOK(maximumRetryTime_ms As Integer) As Boolean
			Return sensorCheck_gripperHome_untileOK(maximumRetryTime_ms,m_typeListIndex)
		End Function
		
		Public Function sensorCheck_gripperHome_untileOK(maximumRetryTime_ms As Integer, typeIndex As Integer) As Boolean
			Dim i As Integer
			Dim result As Boolean = True
			Dim preResult As Boolean = True
			Dim timer As New TimeStamp

			timer.startTimer()
			While True
				result = True
				For i = 1 To fingerCount
					If Math.Pow(2,i-1) And selectedFingerIndex Then
						If fingerHomeCheck(typeIndex,i) = False Then
							result = False
							If preResult <> result Then
								preResult = result
								If ShowCommandLogToConsole = True Then
									MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : GRIPPER_NOT_HOME")
								End If
							End If
							Exit For
						ElseIf fingerSensorCheck(typeIndex,i) = True Then
							result = False
							If preResult <> result Then
								preResult = result
								If ShowCommandLogToConsole = True Then
									MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : GRIP_SENSOR_ON")
								End If
							End If
							Exit For
						End If
					End If
				Next i
				If result = True Then
					If preResult <> result Then
						preResult = result
						If ShowCommandLogToConsole = True Then
							MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : GRIPPER_HOMED")
						End If
					End If
					Return result
				End If
				If timer.elapsedTime() > maximumRetryTime_ms Then
					Return result
				End If
				Thread.Sleep(10)
			End While
			
			Return result
		End Function
		
		Public Function getWafer(stage As Integer, arm As RobotArm) As Integer
			Dim armList(1) As RobotArm
			armList(0) = arm
			Return getWafer(stage,armList,ALL_STEP,False)
		End Function
		
		Public Function getWafer(stage As Integer, armList() As RobotArm) As Integer
			Return getWafer(stage,armList,ALL_STEP,False)
		End Function
		
		Public Function getWafer(stage As Integer, arm As RobotArm, motionStep As Integer) As Integer
			Dim armList(1) As RobotArm
			Dim GripNow As Boolean = False
			armList(0) = arm
			Return getWafer(stage,armList,motionStep,GripNow)
		End Function
		
		Public Function getWafer(stage As Integer, armList() As RobotArm, motionStep As Integer, GripNow As Boolean) As Integer
			Select m_gripType
			Case GRIPTYPE_EDGE
				Return edgeGrip(m_gripTypeIndex).getWafer(stage,armList,motionStep)
			Case GRIPTYPE_TWOSTEPCLAMP
				Return twoStepClampGrip(m_gripTypeIndex).getWafer(stage,armList,motionStep,Gripnow)
			Case GRIPTYPE_SEMIEDGE
				Return semiEdgeGrip(m_gripTypeIndex).getWafer(stage,armList,motionStep)
			Case GRIPTYPE_TONGS
				Return tongsGrip(m_gripTypeIndex).getWafer(stage,armList,motionStep)
			Case GRIPTYPE_POCKET
				Return pocketGrip(m_gripTypeIndex).getWafer(stage,armList,motionStep)
			Case GRIPTYPE_VACCUM
				Return vaccumGrip(m_gripTypeIndex).getWafer(stage,armList,motionStep,gripnow)
			Case GRIPTYPE_BACKEDGE
				Return backEdgeGrip(m_gripTypeIndex).getWafer(stage,armList,motionStep)
			Case GRIPTYPE_BACKTONGS
				Return backTongsGrip(m_gripTypeIndex).getWafer(stage,armList,motionStep)
			Case GRIPTYPE_BACKVACCUM
				Return backVaccumGrip(m_gripTypeIndex).getWafer(stage,armList,motionStep)
			Case GRIPTYPE_VACCUMEDGEGUIDE
				Return vaccumEdgeGuideGrip(m_gripTypeIndex).getWafer(stage,armList,motionStep)
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				Return backVaccumEdgeGuideGrip(m_gripTypeIndex).getWafer(stage,armList,motionStep)
			End Select
		End Function
		
		Public Function putWafer(stage As Integer, arm As RobotArm) As Integer
			Dim armList(1) As RobotArm
			armList(0) = arm
			Return putWafer(stage,armList,ALL_STEP,False,False)
		End Function
		
		Public Function putWafer(stage As Integer, armList() As RobotArm) As Integer
			Return putWafer(stage,armList,ALL_STEP,False,False)
		End Function

		Public Function putWafer(stage As Integer, arm As RobotArm, motionStep As Integer) As Integer
			Dim armList(1) As RobotArm
			armList(0) = arm
			Return putWafer(stage,armList,motionStep,False,False)
		End Function
		
		Public Function putWafer(stage As Integer, arm As RobotArm, motionStep As Integer, useUpsideMotion As Boolean) As Integer
			Dim armList(1) As RobotArm
			armList(0) = arm
			Return putWafer(stage,armList,motionStep,useUpsideMotion,False)
		End Function
		
		Public Function putWafer(stage As Integer, armList() As RobotArm, motionStep As Integer, useUpsideMotion As Boolean) As Integer
			Return putWafer(stage,armList,motionStep,useUpsideMotion,False)
		End Function
		
		Public Function putWafer(stage As Integer, armList() As RobotArm, motionStep As Integer, useUpsideMotion As Boolean, gripnow As Boolean) As Integer
			Select m_gripType
			Case GRIPTYPE_EDGE
				Return edgeGrip(m_gripTypeIndex).putWafer(stage,armList,motionStep)
			Case GRIPTYPE_TWOSTEPCLAMP
				Return twoStepClampGrip(m_gripTypeIndex).putWafer(stage,armList,motionStep,Gripnow)
			Case GRIPTYPE_SEMIEDGE
				Return semiEdgeGrip(m_gripTypeIndex).putWafer(stage,armList,motionStep)
			Case GRIPTYPE_TONGS
				Return tongsGrip(m_gripTypeIndex).putWafer(stage,armList,motionStep)
			Case GRIPTYPE_POCKET
				Return pocketGrip(m_gripTypeIndex).putWafer(stage,armList,motionStep)
			Case GRIPTYPE_VACCUM
				Return vaccumGrip(m_gripTypeIndex).putWafer(stage,armList,motionStep,useUpsideMotion,Gripnow)
			Case GRIPTYPE_BACKEDGE
				Return backEdgeGrip(m_gripTypeIndex).putWafer(stage,armList,motionStep)
			Case GRIPTYPE_BACKTONGS
				Return backTongsGrip(m_gripTypeIndex).putWafer(stage,armList,motionStep)
			Case GRIPTYPE_BACKVACCUM
				Return backVaccumGrip(m_gripTypeIndex).putWafer(stage,armList,motionStep)
			Case GRIPTYPE_VACCUMEDGEGUIDE
				Return vaccumEdgeGuideGrip(m_gripTypeIndex).putWafer(stage,armList,motionStep)
			Case GRIPTYPE_BACKVACCUMEDGEGUIDE
				Return backVaccumEdgeGuideGrip(m_gripTypeIndex).putWafer(stage,armList,motionStep)
			End Select
		End Function
		
		Public Function isControlAxis(axis As Integer) As Boolean
			If myRobot(Robot.Selected-1).robotType = SCARA_TYPE Then
				If controlAxis = axis Or elbowControlAxis = axis Then
					Return True
				End If
			Else
				If controlAxis = axis Then
					Return True
				End If
			End If
			Return False
		End Function
	
	End Class
	
End Module
'Created: 9/13/2013 11:09:11 AM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module JogModule

	Public Const JOG_COMPUTER As Integer = 0
	Public Const JOG_JOINT As Integer = 1
	Public Const JOG_WORLD As Integer = 2
	Public Const JOG_TOOL As Integer = 3
	Public Const JOG_FREE As Integer = 4
	
	Public Class JogCommandInfo
		Public robotIndex As Integer = 1
		Public mode As Integer = 0	'world, tool, joint, free
		Public axis As Integer = 0
		Public zIndex As Integer = 0 'for telescopic
		Public speed As Integer = 0
		
		Public Function clone() As JogCommandInfo
			Dim result As New JogCommandInfo
			result.robotIndex = robotIndex
			result.mode = mode
			result.axis = axis
			result.zIndex = zIndex
			result.speed = speed
			Return result
		End Function
	End Class
	
	Public Class JogManager
	
	
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' SHARED ''''''''''''''''''''''''''''
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		'&H1 ~ &H8000 of binary
		Shared Public Const EVENT_JOG_COMMAND_SET As Integer = &H1
		Shared Public Const EVENT_JOG_FREEMODE_SET As Integer = &H2
		Shared Public Const EVENT_JOG_STOP As Integer = &H4
		
		Shared Public Dim jogCommandMutex As New Mutex
		
		Shared Public Dim jogCommand As JogCommandInfo
		Shared Public Dim nowRunningJogCommand As JogCommandInfo
		Shared Public Dim jogCommandRunThread As Thread
		Shared Public Sub jogCommandRunThreadFunc()
			Dim ex As Exception
			Dim i As Integer
			Dim events As Integer

			While True
				Try
					events = Thread.WaitEvent(&HFFFF, 0)
					
					If Robot.Attached = 0 Then
						theJogManager.jogMode = JOG_COMPUTER
						nowRunningJogCommand = Nothing
					End If
					
					If events = 0 And nowRunningJogCommand Is Nothing Then
						Thread.Sleep(10)
						Exit Try
					End If
					
					If events <> 0 Then
						nowRunningJogCommand = jogCommand.clone
					End If
					
					If (events = 0 And theJogManager.jogMode = JOG_JOINT) Or events = EVENT_JOG_COMMAND_SET Then 'for telescopic
						If nowRunningJogCommand.zIndex > 0 And myRobot(nowRunningJogCommand.robotIndex-1).zAxisCount > 1 Then
							Dim curPos As LocationEx = LocationEx.GetCurJointPos()
							Dim changeToNextZ As Boolean
							For i = nowRunningJogCommand.zIndex To 2 Step -1
								changeToNextZ = False
								If nowRunningJogCommand.speed > 0 Then
									Dim zmax As Double = CDbl(thePDBManager.getPDB(PDB_MAX_SOFT_LIMIT,nowRunningJogCommand.axis))
									If curPos.loc.Angle(nowRunningJogCommand.axis) > zmax - 0.01 Or _
									Signal.DIO(CInt(thePDBManager.getPDB(PDB_POSITIVE_LIMIT_SENSOR, nowRunningJogCommand.axis))) = True Then
										changeToNextZ = True
									End If
								ElseIf nowRunningJogCommand.speed < 0 Then
									Dim zmin As Double = CDbl(thePDBManager.getPDB(PDB_MIN_SOFT_LIMIT,nowRunningJogCommand.axis))
									If curPos.loc.Angle(nowRunningJogCommand.axis) < zmin + 0.01 Or _
									Signal.DIO(CInt(thePDBManager.getPDB(PDB_NEGATIVE_LIMIT_SENSOR, nowRunningJogCommand.axis))) = True Then
										changeToNextZ = True
									End If
								End If
								If changeToNextZ = True Then
									events = EVENT_JOG_COMMAND_SET
									nowRunningJogCommand.zIndex = nowRunningJogCommand.zIndex - 1
									nowRunningJogCommand.axis = myRobot(nowRunningJogCommand.robotIndex-1).zIndexToAxis(nowRunningJogCommand.zIndex)
								Else
									Exit For
								End If
							Next i
						End If
					End If
					
					If errorHandler.ignoreCurrentSystemError = True Then
						Dim systemErrorCode As Integer
						systemErrorCode = errorHandler.getCurrentSystemErrorCode()
						If systemErrorCode <> 0 Then
							Dim zAxis As Integer = myRobot(nowRunningJogCommand.robotIndex-1).controlAxis("Z")
							If nowRunningJogCommand.speed > 0 Then
								If systemErrorCode = -1035 Then
									If nowRunningJogCommand.zIndex > 0 And _
									Signal.DIO(CInt(thePDBManager.getPDB(PDB_POSITIVE_LIMIT_SENSOR, zAxis))) = False Then
										systemErrorCode = 0
									End If
								ElseIf systemErrorCode = -1034 Then
									systemErrorCode = 0
								End If
							Else
								If systemErrorCode = -1035 Then
									systemErrorCode = 0
								ElseIf systemErrorCode = -1034 Then
									If nowRunningJogCommand.zIndex > 0 And _
									Signal.DIO(CInt(thePDBManager.getPDB(PDB_NEGATIVE_LIMIT_SENSOR, zAxis))) = False Then
										systemErrorCode = 0
									End If
								End If
							End If
							
							
							
							If systemErrorCode <> 0 Then
								errorHandler.ignoreCurrentSystemError = False
							Else
								errorHandler.clearError()
							End If	
						End If
					End If
					
					If events = 0 Then
						Thread.Sleep(10)
						Exit Try
					End If
					
					jogCommandMutex.lock()
					
					Select events
					Case EVENT_JOG_COMMAND_SET
						errorHandler.ignoreCurrentSystemError = True
						If theJogManager.jogMode = JOG_COMPUTER Then
							myRobot(nowRunningJogCommand.robotIndex-1).autoAttach()
							theJogManager.jogMode = nowRunningJogCommand.mode
							Move.StartJogMode()
							Move.SetJogCommand(nowRunningJogCommand.mode, nowRunningJogCommand.axis, nowRunningJogCommand.speed)
						ElseIf theJogManager.jogMode = JOG_JOINT Or _
							theJogManager.jogMode = JOG_WORLD Or _ 
							theJogManager.jogMode = JOG_TOOL Then
							'continous jog other axis
							While True
								Try
									Move.StopSpecialModes
									Thread.Sleep(10)
									Move.StartJogMode()
									Exit While
								Catch ex
									If ex.ErrorCode = -1009 Then
										myRobot(nowRunningJogCommand.robotIndex-1).autoAttach()
									ElseIf ex.ErrorCode = -1043 Or ex.ErrorCode = -1029 Then
									Else
										Exit While
									End If
									ex = Nothing
								End Try
							End While
							Move.SetJogCommand(nowRunningJogCommand.mode, nowRunningJogCommand.axis, nowRunningJogCommand.speed)
						End If
						Thread.Sleep(10)
					
					Case EVENT_JOG_FREEMODE_SET
						If theJogManager.jogMode = JOG_COMPUTER Then
							myRobot(nowRunningJogCommand.robotIndex-1).autoAttach()
							Move.StartJogMode()
							theJogManager.jogMode = nowRunningJogCommand.mode
						End If
						If theJogManager.jogMode = JOG_FREE Then
							If Robot.Selected = nowRunningJogCommand.robotIndex Then
								If nowRunningJogCommand.zIndex > 0 And myRobot(nowRunningJogCommand.robotIndex-1).zAxisCount > 1 Then
									For i = 1 To myRobot(Robot.Selected-1).zAxisCount
										Move.SetJogCommand(nowRunningJogCommand.mode, myRobot(Robot.Selected-1).zIndexToAxis(i), nowRunningJogCommand.speed)
										Thread.Sleep(10)
									Next i
								Else
									Move.SetJogCommand(nowRunningJogCommand.mode, nowRunningJogCommand.axis, nowRunningJogCommand.speed)
								End If
							End If
						End If
						
					Case EVENT_JOG_STOP
						errorHandler.ignoreCurrentSystemError = False
						If theJogManager.jogMode <> JOG_COMPUTER Then
							Move.SetJogCommand(nowRunningJogCommand.mode, nowRunningJogCommand.axis, 0)
							Thread.Sleep(200)
							Move.StopSpecialModes
							theJogManager.jogMode = JOG_COMPUTER
							myRobot(Robot.Attached-1).autoDetach()
						End If
						nowRunningJogCommand = Nothing

					End Select
					
				Catch ex
					If ex.ErrorCode = -1009 Then
						' no robot attached. because of ASS-soft-E-stop occur detach
					ElseIf ex.ErrorCode = -1045 Then
						' soft e-stop
					Else
						errorHandler.handleError(ex)
					End If
					ex = Nothing
					
				Finally
					jogCommandMutex.unLock()
				End Try
			End While
		End Sub
		
		
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	
		Private Dim m_jogMode As Integer = JOG_COMPUTER
		Public Property jogMode As Integer
			Set (value As Integer)
				m_jogMode = value
			End Set
			Get
				Return m_jogMode
			End Get
		End Property
		
		Private Function parseJogCommand(arg As String) As JogCommandInfo
			Dim jogInfo As New JogCommandInfo
			Dim index As Integer = 0
			
			jogInfo.robotIndex = Robot.Selected
			If arg.Length >= 3 Then
				Select arg.Substring(index, 1).toUpper
					Case "J"
						index = index + 1
						jogInfo.mode = JOG_JOINT
						jogInfo.axis = myRobot(Robot.Selected-1).tpToControlAxis(CInt(arg.Substring(index, 1)))
						index = index + 1
					Case "L"
						index = index + 1
						jogInfo.mode = JOG_WORLD
						Select arg.Substring(index, 1).toUpper
						Case "X"
							index = index + 1
							jogInfo.axis = 1
						Case "Y"
							index = index + 1
							jogInfo.axis = 2
						Case "Z"
							If myRobot(Robot.Selected-1).robotType = ARTICULATED_TYPE Then
								index = index + 1
								jogInfo.axis = 3
							Else
								index = index + 1
								jogInfo.axis = myRobot(Robot.Selected-1).controlAxis("Z")
								jogInfo.mode = JOG_JOINT
							End If
						Case "R"
							index = index + 1
							Select arg.Substring(index, 1).toUpper
							Case "X"
								index = index + 1
								jogInfo.axis = 4
							Case "Y"
								index = index + 1
								jogInfo.axis = 5
							Case "Z"
								index = index + 1
								jogInfo.axis = 6
							Case Else
								ThrowError(ERR_INVALID_ARGUMENT)
							End Select
						Case Else
							ThrowError(ERR_INVALID_ARGUMENT)
						End Select
					Case "T"
						index = index + 1
						jogInfo.mode = JOG_TOOL
						Select arg.Substring(index, 1).toUpper
						Case "X"
							index = index + 1
							jogInfo.axis = 1
						Case "Y"
							index = index + 1
							jogInfo.axis = 2
						Case "Z"
							index = index + 1
							jogInfo.axis = 3
						Case "R"
							index = index + 1
							Select arg.Substring(index, 1).toUpper
							Case "X"
								index = index + 1
								jogInfo.axis = 4
							Case "Y"
								index = index + 1
								jogInfo.axis = 5
							Case "Z"
								index = index + 1
								jogInfo.axis = 6
							Case Else
								ThrowError(ERR_INVALID_ARGUMENT)
							End Select
						Case Else
							ThrowError(ERR_INVALID_ARGUMENT)
						End Select
					Case Else
						ThrowError(ERR_INVALID_ARGUMENT)
				End Select
			ElseIf arg.Length = 2 Then
				jogInfo.axis = myRobot(Robot.Selected-1).controlAxis(arg.Substring(index, 1).toUpper)
				jogInfo.mode = JOG_JOINT
				index = index + 1	
			Else
				ThrowError(ERR_INVALID_ARGUMENT)
			End If
			
			If jogInfo.axis < 1 Then
				ThrowError(ERR_INVALID_ARGUMENT)
			End If
			
			Select arg.SubString(index)
			Case "+"
				jogInfo.speed = myRobot(Robot.Selected-1).theProfileManager.jogSpeed
			Case "-"
				jogInfo.speed = -1 * myRobot(Robot.Selected-1).theProfileManager.jogSpeed
			Case Else
				ThrowError(ERR_INVALID_ARGUMENT)
			End Select
			
			If myRobot(Robot.Selected-1).zAxisCount > 1 And _
				jogInfo.mode = JOG_JOINT And _
				jogInfo.axis = myRobot(Robot.Selected-1).zIndexToAxis(1) Then
				jogInfo.zIndex = myRobot(Robot.Selected-1).zAxisCount
				jogInfo.axis = myRobot(Robot.Selected-1).zIndexToAxis(jogInfo.zIndex)
			Else
				jogInfo.zIndex = 0
			End If
	
			Return jogInfo
		End Function
		
		Private Sub jogCommandRun(eventID As Integer, ByRef newJogCommand As JogCommandInfo)
			If jogCommandRunThread.ThreadState < 0 Then
				jogCommandRunThread.Start()
			ElseIf jogCommandRunThread.ThreadState = 4 Then
				jogCommandRunThread.Abort()
				jogCommandRunThread.Start()
			End If
			
			jogCommandMutex.lock()
			jogCommand = newJogCommand.clone
			jogCommandRunThread.SendEvent(eventID)
			jogCommandMutex.unLock()
		End Sub
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	
		Public Sub New()
			jogCommandRunThread = New Thread("JogManager.jogCommandRunThreadFunc",,"JogCommandRunThread")
		End Sub
		
		Public Sub jogCommandThreadStart()
			jogCommandRunThread.Start()
		End Sub
		
		Public Function isJogCommandRunningNow(robotIndex As Integer) As Boolean
			'If jogMode = JOG_JOINT Or jogMode = JOG_WORLD Or jogMode = JOG_TOOL Then
			If theJogManager.jogMode <> JOG_COMPUTER Then
				If Not(jogCommand Is Nothing) Then
					If jogCommand.robotIndex = robotIndex Then
						Return True
					End If
				End If
			End If
			Return False
		End Function

		Public Sub jog(command As String)
			If myRobot(Robot.Selected-1).isOpCommandRunningNow() = True Then
				ThrowError(ERR_NOW_ON_MOVE)
			End If
			
			myRobot(Robot.Selected-1).theMotionLoger.clearLastMotionLog()
			
			Dim newJogCommand As JogCommandInfo = parseJogCommand(command)
			jogCommandRun(EVENT_JOG_COMMAND_SET, newJogCommand)
		End Sub
	
		Public Sub freeModeSet(axis As Integer, flag As Integer)
			If myRobot(Robot.Selected-1).isOpCommandRunningNow() = True Then
				ThrowError(ERR_NOW_ON_MOVE)
			End If
			
			myRobot(Robot.Selected-1).theMotionLoger.clearLastMotionLog()
			
			Dim jogInfo As New JogCommandInfo
			jogInfo.robotIndex = Robot.Selected
			jogInfo.mode = JOG_FREE
			jogInfo.axis = axis
			jogInfo.zIndex = myRobot(Robot.Selected-1).axisToZIndex(axis)
			If flag = 0 Then
				jogInfo.speed = -100
			Else
				jogInfo.speed = 100
			End If
			jogCommandRun(EVENT_JOG_FREEMODE_SET, jogInfo)
		End Sub
		
		Public Sub jogStop()
			Dim jogInfo As New JogCommandInfo
			jogInfo.robotIndex = Robot.Selected
			jogCommandRun(EVENT_JOG_STOP, jogInfo)
		End Sub
		
		Public Sub excapeFromLimitSensorUseJog(onlyAbsMotor As Boolean)
			Dim i As Integer

			Dim min As Double
			Dim max As Double
			Dim curLoc As LocationEx
			Dim positiveLimit As Boolean
			Dim negativeLimit As Boolean
			For i = 1 To myRobot(Robot.Selected-1).axisCount
				If onlyAbsMotor = False Or CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) = 40 Or CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) = 44 Then
					Dim negativeLimitAddr As Integer = CInt(thePDBManager.getPDB(PDB_NEGATIVE_LIMIT_SENSOR, i))
					Dim positiveLimitAddr As Integer = CInt(thePDBManager.getPDB(PDB_POSITIVE_LIMIT_SENSOR, i))
					negativeLimit = robotIO.getDIO(negativeLimitAddr)
					positiveLimit = robotIO.getDIO(positiveLimitAddr)
					min = CDbl(thePDBManager.getPDB(PDB_MIN_SOFT_LIMIT,i))
					max = CDbl(thePDBManager.getPDB(PDB_MAX_SOFT_LIMIT,i))
					If negativeLimit = True Then
						Move.StartJogMode
						Move.SetJogCommand(JOG_JOINT, i, 10)
						While True
							Thread.sleep(10)
							negativeLimit = Signal.DIO(CInt(thePDBManager.getPDB(PDB_NEGATIVE_LIMIT_SENSOR, i)))
							If negativeLimit = False Then
								Move.StopSpecialModes
								Thread.Sleep(200)
								Exit While
							End If
							curLoc = LocationEx.GetCurJointPos()
							If curLoc.loc.Angle(i) >= max - 0.01 Then
								Move.StopSpecialModes
								Thread.Sleep(200)
								ThrowSystemError(-1034,"Negative overtravel",i)
							End If
						End While
					ElseIf positiveLimit = True Then
						Move.StartJogMode
						Move.SetJogCommand(JOG_JOINT, i, -10)
						While True
							Thread.sleep(10)
							positiveLimit = Signal.DIO(CInt(thePDBManager.getPDB(PDB_POSITIVE_LIMIT_SENSOR, i)))
							If positiveLimit = False Then
								Move.StopSpecialModes
								Thread.Sleep(200)
								Exit While
							End If
							curLoc = LocationEx.GetCurJointPos()
							If curLoc.loc.Angle(i) <= min + 0.01 Then
								Move.StopSpecialModes
								Thread.Sleep(200)
								ThrowSystemError(-1035,"Positive overtravel",i)
							End If
						End While
					End If
				End If
			Next i
		End Sub
		
		Public Sub excapeFromSoftLimitUseJog(onlyAbsMotor As Boolean)
			Dim i As Integer
			
			Dim myEx As Exception
			Dim min As Double
			Dim max As Double
			Dim curLoc As LocationEx
			For i = 1 To myRobot(Robot.Selected-1).axisCount
				If onlyAbsMotor = False Or CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) = 40 Or CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) = 44 Then
					curLoc = LocationEx.GetCurJointPos()
					min = CDbl(thePDBManager.getPDB(PDB_MIN_SOFT_LIMIT,i))
					max = CDbl(thePDBManager.getPDB(PDB_MAX_SOFT_LIMIT,i))
					If curLoc.loc.Angle(i) <= min + 0.01 Then
						Move.StartJogMode
						Move.SetJogCommand(JOG_JOINT, i, 10)
						While True
							Thread.sleep(10)
							curLoc = LocationEx.GetCurJointPos()
							If curLoc.loc.Angle(i) >= min + 0.01 Then
								Move.StopSpecialModes
								Thread.Sleep(200)
								Exit While
							End If
						End While
					ElseIf curLoc.loc.Angle(i) >= max - 0.01 Then
						Move.StartJogMode
						Move.SetJogCommand(JOG_JOINT, i, -10)
						While True
							Thread.sleep(10)
							curLoc = LocationEx.GetCurJointPos()
							If curLoc.loc.Angle(i) < max - 0.01 Then
								Move.StopSpecialModes
								Thread.Sleep(200)
								Exit While
							End If
						End While
					End If
				End If
			Next i
			
		End Sub
		
	End Class
	
End Module
'Created: 7/16/2013 2:26:31 PM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module RobotModule
	
	Public MotionCountTimer As New MotionTimeStamp
	Public GripTimer As New MotionTimeStamp
	Public Const TARGET_MODE As Integer = 0
	Public Const GET_MODE As Integer = 1
	Public Const PUT_MODE As Integer = 2
	Public Const CROSS_MODE As Integer = 3

									 
									   
									   
 
	Public Const WTR_TYPE As Integer = 1
	Public Const FTR_TYPE As Integer = 2
	Public Const SCARA_TYPE As Integer = 3
	Public Const ARTICULATED_TYPE As Integer = 4
	Public Const UNKNOWN_TYPE As Integer = 5
	
	Public Const MOTION_START_STATE As Integer = 1
	Public Const MOTION_ALMOST_END_STATE As Integer = 2
	Public Const MOTION_END_STATE As Integer = 3

													
															   
 
								  
								  
								   
								   
								  

								 
									
									   

								   
									  
								  
								

	Public Class RNDRobot
																								  
																						   
									 
						   
							   
	   
							  
		 
																				
					   
		 
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''' ROBOT COMPONENT ''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Dim theZPosErrDetector As ZPosErrDetector
		Public Sub setTheZPosErrDetector(value As ZPosErrDetector)
			value.setRobot(myRobot(robotIndex-1))
			Me.theZPosErrDetector = value
		End Sub
		
		Public Dim theMappingManager As MappingManager
		Public Sub setTheMappingManager(value As MappingManager)
			Me.theMappingManager = value
		End Sub
		
		Public Dim theBladeDeflectionDetector As BladeDeflectionDetector
		Public Sub setTheBladeDeflectionDetector(value As BladeDeflectionDetector)
			value.setRobot(myRobot(robotIndex-1))
			Me.theBladeDeflectionDetector = value
		End Sub
		
		Public Dim thePointDataManager As PointDataManager
		Public Sub setThePointDataManager(value As PointDataManager)
			Me.thePointDataManager = value
		End Sub
		
															  
																		
									  
		 
  
		Public Dim theProfileManager As ProfileManager
		Public Sub setTheProfileManager(value As ProfileManager)
			Me.theProfileManager = value
		End Sub

		Public Sub setRobotAxisName(name As String)
			setRobotAxisName(name,"")
		End Sub
		
													
  
		Public Sub setRobotAxisName(name As String, extraName As String)
			Dim i As Integer
			m_axisCount = name.Length
			For i = 0 To m_axisCount - 1
				m_robotAxisNameList(i) = name.Substring(i,1)
			Next i
			For i = 1 To 9
				If zIndexToAxis(i) > 0 Then
					m_zAxisCount = i
				Else
					Exit For
				End If
			Next i
			
			If extraName <> "" Then
				m_extraAxisCount = extraName.Length
				For i = 0 To m_extraAxisCount - 1
					m_robotExtraAxisNameList(i) = extraName.Substring(i,1)
				Next i
			ElseIf CInt(thePDBManager.getPDB(PDB_ROBOT_TYPE)) <> 1 Then
				m_extraAxisCount = 0
				If myRobot(Robot.selected-1).isTrackExist Then
					m_robotExtraAxisNameList(m_extraAxisCount) = "V"
					m_extraAxisCount = m_extraAxisCount + 1
				End If
				If myRobot(Robot.selected-1).isFlipExist Then
					m_robotExtraAxisNameList(m_extraAxisCount) = "F"
					m_extraAxisCount = m_extraAxisCount + 1
				End If
				If myRobot(Robot.selected-1).zAxisCount >= 2 Then
					m_robotExtraAxisNameList(m_extraAxisCount) = "2"
					m_extraAxisCount = m_extraAxisCount + 1
				End If
			Else
				m_extraAxisCount = 0
			End If
		End Sub
		
		Public Sub setTPAxisName(name As String)
			Dim i As Integer
			m_tpAxisCount = name.Length
			For i = 0 To m_tpAxisCount - 1
				m_tpAxisNameList(i) = name.Substring(i,1)
			Next i
		End Sub
		
		Public Sub setDynaxAxisName(name As String)
			Dim i As Integer
			m_dynaxAxisCount = name.Length
			For i = 0 To m_dynaxAxisCount - 1
				m_dynaxAxisNameList(i) = name.Substring(i,1)
			Next i
		End Sub
		
		Public Sub SetSpecialFactoryZeroMethod(Mathod As String)
			Dim i As Integer
			Dim MathodMember() As String
			Mathod = mathod.trim
			MathodMember = mathod.split(",")
			For i = 1 To MathodMember.length
				If MathodMember(i-1) <>"" Then
					specialFactoryZeroMethod(i) = CInt(MathodMember(i-1))
				Else
					specialFactoryZeroMethod(i) =  0
				End If
			Next
		End Sub
		
		Public Sub setArm(arm As RobotArm)
			If m_armCount < arm.armIndex Then
				m_armCount = arm.armIndex
			End If
			m_arm(arm.armIndex-1) = arm
			
			Dim i As Integer
			Dim j As Integer
			For i = 0 To m_armCount - 1
				m_arm(i).axisOrderIndex = 1
				For j = 0 To m_armCount - 1
					If i <> j Then
						If m_arm(i).controlAxis > m_arm(j).controlAxis Then
							m_arm(i).axisOrderIndex = m_arm(i).axisOrderIndex + 1
						End If
					End If
				Next j
			Next i
		End Sub





		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''' SETTING PROPERTY ''''''''''''''''''''''''
		''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim m_linkLength As Double = 163
		Public Property linkLength As Double
	        Get
	            Return m_linkLength
	        End Get
			Set (value As Double)
	            m_linkLength = value
	        End Set
	    End Property
		
		Private Dim m_axisSpecialSequence As String = ""
		Public Property axisSpecialSequence As String
	        Get
	            Return m_axisSpecialSequence
	        End Get
			Set (value As String)
	           m_axisSpecialSequence = value
	        End Set
	    End Property
		
		Private Dim m_axisSpecialORGsequence As String = ""
		Public Property axisSpecialORGsequence As String
	        Get
				Return m_axisSpecialORGsequence
	        End Get
			Set (value As String)
	           m_axisSpecialORGsequence = value
	        End Set
	    End Property
		
		Private Dim m_checkForAllGripType As Boolean = True 'If can grip multiple object Then FALSE (Ex> YEST)
		Public Property checkForAllGripType As Boolean
	        Get
	            Return m_checkForAllGripType
	        End Get
			Set (value As Boolean)
	           m_checkForAllGripType = value
	        End Set
	    End Property
		
		Private Dim m_checkArmGripOneByOne As Boolean = False
		Public Property checkArmGripOneByOne As Boolean
	        Get
	            Return m_checkArmGripOneByOne
	        End Get
			Set (value As Boolean)
	           m_checkArmGripOneByOne = value
	        End Set
	    End Property
		
		Private Dim m_automaticRetractScaraArm As Boolean = False
		Public Property automaticRetractScaraArm As Boolean
	        Get
	            Return m_automaticRetractScaraArm
	        End Get
			Set (value As Boolean)
	            m_automaticRetractScaraArm = value
	        End Set
	    End Property
		
		Private Dim m_zAxisFactoryZero_PlusDirection As Boolean = False
		Public Property zAxisFactoryZero_PlusDirection As Boolean
	        Get
	            Return m_zAxisFactoryZero_PlusDirection
	        End Get
			Set (value As Boolean)
	            m_zAxisFactoryZero_PlusDirection = value
	        End Set
	    End Property
		
		Private Dim m_zAxisFactoryZeroPosition As Double = 0
		Public Property zAxisFactoryZeroPosition As Double
	        Get
	            Return m_zAxisFactoryZeroPosition
	        End Get
			Set (value As Double)
	            m_zAxisFactoryZeroPosition = value
	        End Set
	    End Property
		
		Private Dim m_waferCheckOnReadyMotion As Boolean = False
		Public Property waferCheckOnReadyMotion As Boolean
	        Get
	            Return m_waferCheckOnReadyMotion
	        End Get
			Set (value As Boolean)
	            m_waferCheckOnReadyMotion = value
	        End Set
	    End Property
		
		Private Dim m_autoMoveAxisFactoryZero As Boolean = True
		Public Property autoMoveAxisFactoryZero As Boolean
	        Get
	            Return m_autoMoveAxisFactoryZero
	        End Get
			Set (value As Boolean)
	            m_autoMoveAxisFactoryZero = value
	        End Set
	    End Property
		
		Private Dim m_robotType As Integer
		Public Property robotType As Integer
	        Get
	            Return m_robotType
	        End Get
			Set (value As Integer)
	            m_robotType = value
	        End Set
	    End Property
		
		Private Dim m_isCanGetMultipleArm As Boolean = False
		Public Property isCanGetMultipleArm As Boolean
	        Get
	            Return m_isCanGetMultipleArm
	        End Get
			Set (value As Boolean)
	            m_isCanGetMultipleArm = value
	        End Set
	    End Property
		
		Private Dim m_isCanCrossMotion As Boolean = False
		Public Property isCanCrossMotion As Boolean
	        Get
	            Return m_isCanCrossMotion
	        End Get
			Set (value As Boolean)
	            m_isCanCrossMotion = value
	        End Set
	    End Property
		
		Private Dim m_isCanUPutMotion As Boolean = False
		Public Property isCanUPutMotion As Boolean
	        Get
	            Return m_isCanUPutMotion
	        End Get
			Set (value As Boolean)
	            m_isCanUPutMotion = value
	        End Set
	    End Property
		
		Private Dim m_isCanAutoZTeaching As Boolean = False
		Public Property isCanAutoZTeaching As Boolean
	        Get
	            Return m_isCanAutoZTeaching
	        End Get
			Set (value As Boolean)
	            m_isCanAutoZTeaching = value
	        End Set
	    End Property
		
		Private Dim m_waferDetectingSensorIO As Integer = 0
		Public Property waferDetectingSensorIO As Integer
			Set (value As Integer)
				m_waferDetectingSensorIO = value
			End Set
			Get
				Return m_waferDetectingSensorIO
			End Get
		End Property
		
		Private Dim m_waferDetectingSensorCheckOnlyNoWafer As Boolean = True
		Public Property waferDetectingSensorCheckOnlyNoWafer As Boolean
			Set (value As Boolean)
				m_waferDetectingSensorCheckOnlyNoWafer = value
			End Set
			Get
				Return m_waferDetectingSensorCheckOnlyNoWafer
			End Get
		End Property
		
		Private Dim m_ExtendGripWaitFlg As Boolean = False
		Public Property ExtendGripWaitFlg As Boolean
			Set (value As Boolean)
				m_ExtendGripWaitFlg = value
			End Set
			Get
				Return m_ExtendGripWaitFlg
			End Get
		End Property
		
		Private Dim m_onlyWaferCheckWhenArmRetract As Boolean = False
		Public Property onlyWaferCheckWhenArmRetract As Boolean
			Set (value As Boolean)
				m_onlyWaferCheckWhenArmRetract = value
			End Set
			Get
				Return m_onlyWaferCheckWhenArmRetract
			End Get
		End Property
		
		Private Dim m_waitCommandCompleteOnContinousMode As Boolean = False
		Public Property waitCommandCompleteOnContinousMode As Boolean
			Set (value As Boolean)
				m_waitCommandCompleteOnContinousMode = value
			End Set
			Get
				If onlyWaferCheckWhenArmRetract = True Then
					Return True
				Else
					Return m_waitCommandCompleteOnContinousMode
				End If
			End Get
		End Property
		
		Private Dim m_waitMoveReadyCompleteOnContinousMode As Boolean = False
		Public Property waitMoveReadyCompleteOnContinousMode As Boolean
			Set (value As Boolean)
				m_waitMoveReadyCompleteOnContinousMode = value
			End Set
			Get
				Return m_waitMoveReadyCompleteOnContinousMode
			End Get
		End Property
		
		Private Dim m_motorHomeDisableWhenServoOFF As Boolean = False
		Public Property motorHomeDisableWhenServoOFF As Boolean
			Set (value As Boolean)
				m_motorHomeDisableWhenServoOFF = value
			End Set
			Get
				Return m_motorHomeDisableWhenServoOFF
			End Get
		End Property

		Private Dim m_stopWhenGetPutError As Boolean = False
		Public Property stopWhenGetPutError As Boolean
			Set (value As Boolean)
				m_stopWhenGetPutError = value
			End Set
			Get
				Return m_stopWhenGetPutError
			End Get
		End Property




	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		''''''''''''''''''''''''' MOTION THREAD '''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		'&H1 ~ &H8000 of binary
		Shared Public Const EVENT_OP_START As Integer = &H1
		Shared Public Const EVENT_SYNC As Integer = &H2
		
		Private Dim threadRunState As Integer = MOTION_END_STATE
		Private Dim threadRunStateMutex As New Mutex
		Public Sub changeOPThreadRunState(state As Integer)
			Dim ex As Exception
			Try
				threadRunStateMutex.lock()
				threadRunState = state
				If state = MOTION_END_STATE Then
					threadRunOpCommand = Nothing
				End If
				If ShowCommandLogToConsole = True Then
					MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot " + CStr(robotIndex) + " Runstate is changed to " + CStr(state))
				End If
			Catch ex
				Throw ex
			Finally
				threadRunStateMutex.unLock()
			End Try
		End Sub
		
											  
												  
	  
						   
		  
			  

		Public Dim threadRunOpCommand As Command = Nothing
		Public Dim threadRunOpCommand2 As Command = Nothing	'2015_1021 -757 error debug - "add"
		Public Dim threadRunOpCommandResponse As Response
		Public Dim threadRunOpCommandResponseList As ResponseList
		Public Dim opCommandRunThread As Thread
		Shared Public Sub opCommandRunThreadFunc()
			Dim robotIndex As Integer = Thread.CurrentThread.Argument
			Dim targetRobot As RNDRobot = myRobot(robotIndex - 1)
			Dim ex As Exception
			Dim opCommandString As String
			Dim i As Integer
			
			While True
				Try
				
OP_START:

					Thread.WaitEvent(EVENT_OP_START, -1)
					
					'2015_1021 -757 error debug - "add"
					If targetRobot.threadRunOpCommand Is Nothing Then ' 
						targetRobot.threadRunOpCommand = targetRobot.threadRunOpCommand2
					End If	
					
					opCommandString = targetRobot.threadRunOpCommand.cmd
														   

					'move start
					If ShowCommandLogToConsole = True Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot" + CStr(robotIndex) + " OPCommand " + opCommandString + " Run Start")
					End If
					targetRobot.changeOPThreadRunState(MOTION_START_STATE)
					Thread.WaitEvent(EVENT_SYNC, -1)
					
					'wait for FLASH SAVE complete
					DataFile.WaitForSaveReservationThreadComplete(10000)
					
					If protocolHandler.isOpCommandButDoNotNeedAttach(opCommandString.ToUpper) = False Then
						targetRobot.autoAttach()
					End If
					robotIO.assSensorIO = 0
					robotIO.rapidDecelSensorIO = 0
					
					' -- encoder error check
					For i = 1 To myRobot(Robot.Selected-1).axisCount
						encoderErrorOnlyCheckThisRobot(i)
					Next i
					' -- encoder error check
					
					'protocol run
					protocolHandler.commRoutine(targetRobot.robotIndex, targetRobot.threadRunOpCommand,targetRobot.threadRunOpCommandResponse,targetRobot.threadRunOpCommandResponseList)
					
					If protocolHandler.isOpCommandButNotMotion(opCommandString.ToUpper) = False Then
						'move almost End
						theMoveEx.waitForAlmostEOM
						If ShowCommandLogToConsole = True Then
							MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot" + CStr(robotIndex) + " OPCommand " + opCommandString + " Run Almost End")
						End If
						
						'check move End
						If ContinuousMotionMode = True And targetRobot.waitCommandCompleteOnContinousMode = False And robotIO.assSensorIO = 0 Then
							targetRobot.changeOPThreadRunState(MOTION_ALMOST_END_STATE)
							
							Dim trajState0 As Integer = -1
							Dim trajState1 As Integer = -1
							Dim nextEvent As Integer = 0
							While True
								If trajState0 <> Robot.TrajState(robotIndex, 0) Then
									trajState0 = Robot.TrajState(robotIndex, 0)
									MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : trajState0=" + CStr(trajState0))
								End If
								If trajState1 <> Robot.TrajState(robotIndex, 1) Then
									trajState1 = Robot.TrajState(robotIndex, 1)
									MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : trajState1=" + CStr(trajState1))
								End If
								If trajState1 = 6 Then
									'motion complete
									Exit Try
								End If
								nextEvent = Thread.WaitEvent(0,0)
								If (nextEvent And EVENT_OP_START) <> 0 Then
									Goto OP_START
								Else
									Thread.Sleep(10)
								End If
							End While
						Else
							theMoveEx.WaitForEOM()
						End If
					End If
					
					If ShowCommandLogToConsole = True Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot" + CStr(robotIndex) + " OPCommand " + opCommandString + " Run End")
					End If
					
				Catch ex
					If ShowCommandLogToConsole = True Then
						MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot" + CStr(robotIndex) + " OPCommand " + opCommandString + " Error : " + CStr(GetErrorCode(ex)) + "," + ex.Message)
					End If
					
					If IsError(ex,-1009) Then
						'this is softEStop. ignore.
					Else
						errorHandler.handleError(ex)
						If Not(targetRobot.threadRunOpCommandResponse Is Nothing) Then
							targetRobot.threadRunOpCommandResponse.err = GetErrorCode(ex)
						End If
					End If
					
					ex = Nothing
				Finally
					targetRobot.autoDetach()
					targetRobot.changeOPThreadRunState(MOTION_END_STATE)
				End Try
			End While
		End Sub
		
		Public Sub opCommandRunThreadStopFunc()
			Dim i As Integer
			If opCommandRunThread.ThreadState > 0 Then
				For i = 1 To 10
					If threadRunState = MOTION_END_STATE Then
						Exit Sub
					Else
						Thread.Sleep(100)
					End If
				Next i
				opCommandRunThread.Abort()
				changeOPThreadRunState(MOTION_END_STATE)
				MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot" + CStr(robotIndex) + " OPCommand Aborted")
			End If
		End Sub
		
		Public Function isRunningNow() As Boolean
			Return isOpCommandRunningNow() Or theJogManager.isJogCommandRunningNow(robotIndex)
		End Function
		
		Public Function isStopTrajState() As Boolean
			Return (Robot.TrajState(robotIndex, 1) = 0 Or Robot.TrajState(robotIndex, 1) = 5 Or Robot.TrajState(robotIndex, 1) = 6)
		End Function
		
		Public Function isOpCommandRunningNow() As Boolean
			If opCommandRunThread.ThreadState > 0 Then
				If ContinuousMotionMode = True And threadRunState < MOTION_ALMOST_END_STATE Then
					Return True
				ElseIf ContinuousMotionMode = False And threadRunState < MOTION_END_STATE Then
					Return True
				End If
			End If
			Return False
		End Function
		
		Public Sub opCommandRun(cmd As Command, ByRef cmdResponse As Response, ByRef respList As ResponseList)
			Dim changedResponseEarlyReturnMode As Boolean = ResponseEarlyReturnMode
			'TP always not use ResponseEarlyReturnMode, and CCLINK always use ResponseEarlyReturnMode
			If cmd.sourceDevice = COM_CCLINK Then
				changedResponseEarlyReturnMode = True
			ElseIf cmd.sourceDevice = COM_TP Then
				changedResponseEarlyReturnMode = False
			End If
			
												  
											
			  
										   
					  
					   
		 
				
		   
	 
						 
								 
		   
	 
			  
	
		 
   
			If isOpCommandRunningNow() = True Or theJogManager.isJogCommandRunningNow(Robot.Selected) = True Then
				ThrowError(ERR_NOW_ON_MOVE)
			End If
			
			If opCommandRunThread.ThreadState <= 0 Then
				opCommandRunThread.Start
			End If
			
			'2015_1021 -757 error debug - "add"
			If Not ( threadRunOpCommand Is Nothing) Then 
				threadRunOpCommand2 = cmd
			Else
				threadRunOpCommand2 = Nothing
			End If 
			
			
			threadRunOpCommand = cmd
			If changedResponseEarlyReturnMode = False Then
				threadRunOpCommandResponse = cmdResponse
				threadRunOpCommandResponseList = respList
			Else
				threadRunOpCommandResponse = Nothing
				threadRunOpCommandResponseList = Nothing
			End If
			
			
			If ShowCommandLogToConsole = True Then
				'2015_1021 -757 error debug - "change"
				'MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot" + CStr(robotIndex) + " OPCommand " + threadRunOpCommand.cmd + " Start request")
				MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot" + CStr(robotIndex) + " Start request")
			End If
			
			opCommandRunThread.SendEvent(EVENT_OP_START)
			While True
				If threadRunState = MOTION_START_STATE Then
					Exit While
				End If
				Thread.Sleep(10)
			End While
			opCommandRunThread.SendEvent(EVENT_SYNC)
			
			If changedResponseEarlyReturnMode = False Then
				If ContinuousMotionMode = False Or protocolHandler.isOpCommandButNotMotion(cmd.cmd.toupper) = True Then
					While True
						If threadRunState = MOTION_END_STATE Then
							Exit While
						End If
						Thread.Sleep(10)
					End While
				Else
					While True
						If threadRunState = MOTION_END_STATE Or threadRunState = MOTION_ALMOST_END_STATE Then
							Exit While
						End If
						Thread.Sleep(10)
					End While
				End If
			End If
		End Sub
		
									   
										   
	   
											
		 
		
		
		
		




		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		''''''''''''''''''''' Read Robot Property '''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim m_robotIndex As Integer
		Public ReadOnly Property robotIndex As Integer
			Get
				Return m_robotIndex
			End Get
		End Property	
		
		Private Dim m_arm(MAX_ARM_COUNT_PER_ROBOT) As RobotArm
		Public ReadOnly Property arm(index As Integer) As RobotArm
	        Get
	            Return m_arm(index)
	        End Get
	    End Property
		
		Public ReadOnly Property lowerArm As RobotArm
	        Get
				If armCount >= 1 Then
	            	Return m_arm(0)
				Else
					Return Nothing
				End If
	        End Get
	    End Property
		
		Public ReadOnly Property upperArm As RobotArm
	        Get
				If armCount >= 2 Then
	            	Return m_arm(1)
				Else
					Return Nothing
				End If
	        End Get
	    End Property
		
		Private Dim m_armCount As Integer
		Public ReadOnly Property armCount As Integer
	        Get
	            Return m_armCount
	        End Get
	    End Property
		
		Public ReadOnly Property name As String
	        Get
				Dim i As Integer
				Dim result As String = ""
				result = result + CStr(m_tpAxisCount)
				For i = 0 To m_tpAxisCount-1
					result = result + m_tpAxisNameList(i)
				Next i
				
				Select m_robotType
				Case WTR_TYPE
					result = result + "W"
				Case FTR_TYPE
					result = result + "F"
				Case SCARA_TYPE
					result = result + "S"
				Case Else
					result = result + "W"
				End Select
				
				result = result + CStr(m_armCount)
				
				Dim maxFingerCount As Integer = 0
				For i = 0 To m_armCount-1
					If maxFingerCount < m_arm(i).fingerCount Then
						maxFingerCount = m_arm(i).fingerCount
					End If
				Next i
				If maxFingerCount >= 10 Then
					For i = 0 To m_armCount-1
						result = result + CStr(m_arm(i).fingerCount) + "/"
					Next i
				Else
					For i = 0 To m_armCount-1
						result = result + CStr(m_arm(i).fingerCount)
					Next i
				End If
				
				If theMappingManager Is Nothing Then
					result = result + "N"
				Else
					result = result + "M"
				End If
				
				If CInt(thePDBManager.getPDB(PDB_ROBOT_TYPE)) = 1 Then 'joint only
					result = result + "J"
				Else
					result = result + "C"
				End If
				
				If m_armCount > 0 Then
					If m_arm(0).totalGripTypeCount > 1 Then
						result = result + CStr(m_arm(0).totalGripTypeCount)
					End If
					result = result + m_arm(0).totalGripTypeString
				End If
				
				If theZPosErrDetector Is Nothing Then
					result = result + "N"
				Else
					result = result + "Z"
				End If
				
				'autoTeaching
				If isCanAutoZTeaching = True Then
					result = result + "A"
				Else
					result = result + "N"
				End If
				
				'change wafer size (no more use)
				result = result + "N"
				
				If UseThreeCountErrorCode = False Then
					result = result + "N"
				Else
					result = result + "E"
				End If
				
				If theBladeDeflectionDetector Is Nothing Then
					result = result + "N"
				Else
					result = result + "B"
				End If
				
				result = result + "_" + thePDBManager.getPdb(PDB_CONTROLLER_NAME)
	            Return result
	        End Get
	    End Property
		
		Private Dim m_zAxisCount As Integer = 0
		Public ReadOnly Property zAxisCount As Integer
	        Get
				Return m_zAxisCount
	        End Get
	    End Property
		
		Public ReadOnly Property zIndexToAxis(index As Integer) As Integer
	        Get
				If index = 1 Then
					Return controlAxis("Z")
				Else
					Return controlAxis(CStr(index))
				End If
	        End Get
	    End Property
		
		Public ReadOnly Property axisToZIndex(axis As Integer) As Integer
	        Get
				If m_robotAxisNameList(axis-1) = "Z" Then
					Return 1
				ElseIf Asc("2") <= Asc(m_robotAxisNameList(axis-1)) And Asc(m_robotAxisNameList(axis-1)) <= Asc("9") Then
					Return Asc(m_robotAxisNameList(axis-1)) - Asc("0")
				Else
					Return -1
				End If
	        End Get
	    End Property
		
		Private Dim m_orgCompleteFlag As Boolean = False
		Public ReadOnly Property isOrgCompleted As Boolean
	        Get
	            Return m_orgCompleteFlag
	        End Get
	    End Property
		
		Private Dim m_axisCount As Integer
		Public ReadOnly Property axisCount As Integer
	        Get
	            Return m_axisCount
	        End Get
	    End Property
		
		Private Dim m_extraAxisCount As Integer
		Public ReadOnly Property extraAxisCount As Integer
	        Get
	            Return m_extraAxisCount
	        End Get
	    End Property
		
		Private Dim m_tpAxisCount As Integer
		Public ReadOnly Property tpAxisCount As Integer
	        Get
	            Return m_tpAxisCount
	        End Get
	    End Property
		
		Private Dim m_dynaxAxisCount As Integer
		Public ReadOnly Property dynaxAxisCount As Integer
	        Get
	            Return m_dynaxAxisCount
	        End Get
	    End Property
		
		Public ReadOnly Property isTrackExist As Boolean
			Get
				If controlAxis("V") > 0 Then
					Return True
				Else
					Return False
				End If
			End Get
		End Property
		
		Public ReadOnly Property isFlipExist As Boolean
			Get
				Dim i As Integer
				For i = 0 To armCount-1
					If m_arm(i).isCanFlip = True Then
						Return True
					End If
				Next i
				Return False
			End Get
		End Property
		
		
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private Dim m_robotAxisNameList(10) As String
		Public ReadOnly Property robotAxisName(index As Integer) As String
			Get
				Return m_robotAxisNameList(index-1)
			End Get
		End Property
		Private Dim m_robotExtraAxisNameList(10) As String
		Public ReadOnly Property robotExtraAxisName(index As Integer) As String
			Get
				Return m_robotExtraAxisNameList(index-1)
			End Get
		End Property
		Private Dim m_tpAxisNameList(10) As String
		Public ReadOnly Property tpAxisName(index As Integer) As String
			Get
				Return m_tpAxisNameList(index-1)
			End Get
		End Property
		Private Dim m_dynaxAxisNameList(10) As String
		Public ReadOnly Property dynaxAxisName(index As Integer) As String
			Get
				Return m_dynaxAxisNameList(index-1)
			End Get
		End Property
		
		Private Dim m_specialFactoryZeroMethod(10) As Integer
		Public Property specialFactoryZeroMethod(index As Integer) As Integer
	        Get
	            Return m_specialFactoryZeroMethod(index-1)
	        End Get
			Set (value As Integer)
	            m_specialFactoryZeroMethod(index-1) = value
	        End Set
	    End Property
		
		Private Sub multipleArmCheck(armList() As RobotArm)
			Dim i,j As Integer
			If armList Is Nothing Then
				throwError(ERR_INVALID_HAND)
			End If
			For i = 0 To armList.getUpperBound(0) - 2
				For j = i+1 To armList.getUpperBound(0) - 1
					If armList(i).controlAxis <> armList(j).controlAxis Then
						'different control Axis
						If isCanGetMultipleArm = False Then
							throwError(ERR_INVALID_HAND)
						Else
							Exit Sub
						End If
					End If
				Next j
			Next i
		End Sub
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Dim theMotionLoger As New RobotMotionLoger
		
		Public Sub New(index As Integer)
			m_robotIndex = index
			opCommandRunThread = New Thread("RNDRobot.opCommandRunThreadFunc",,"OpCommandRunThread" & CStr(index), 100) ' 100 KB is thread stack size (default is 4 KB)
			opCommandRunThread.Argument = m_robotIndex
		End Sub
		
		Public Sub New(index As Integer, type As Integer)
			m_robotIndex = index
			opCommandRunThread = New Thread("RNDRobot.opCommandRunThreadFunc",,"OpCommandRunThread" & CStr(index), 100)
			opCommandRunThread.Argument = m_robotIndex
			robotType = type
		End Sub
		
		Public Sub robotMotionThreadStart()
			opCommandRunThread.Start
		End Sub
		
		Public Sub autoAttach()
			attach(m_robotIndex)
		End Sub
		
		Public Sub autoDetach()
			attach(0)
		End Sub
		
		Public Sub attach(robotNo As Integer)
			Dim ex As Exception
			Try
				If Robot.Attached <> robotNo Then
					Robot.Attached = robotNo
				End If
			Catch ex
				If ex.ErrorCode = -1006 Then	' Already other thread attached
					throwError(ERR_NOW_ON_MOVE)
				ElseIf ex.ErrorCode = -1045 Then ' soft stop
					
				Else
					Throw ex
				End If
				ex = Nothing
			End Try
		End Sub
		
		Public Dim servoEnableMutex As New Mutex
		Public Sub servoEnable(flag As Boolean)
			Dim ex As Exception
			Dim ex2 As Exception
			Dim i As Integer
			Dim retryCount As Integer
			Dim retryCountDCBusVoltDown As Integer
			Dim DCBusVoltageThreshold As Integer
			
			servoEnableMutex.lock()
			While True
				Try
					If Controller.PowerEnabled <> flag Then
						 
														
																 
		
														 
																  
						   
																   
						   
			  
						  
																  
		
						
						If flag = True Then
							Thread.Sleep(2000)
'							encoderErrorCheckAndClear()
							If protocolHandler.useEMOResetSignalIO <> 0 Then
								robotIO.setDIO(protocolHandler.useEMOResetSignalIO,True)
								Thread.Sleep(1500)
								robotIO.setDIO(protocolHandler.useEMOResetSignalIO,False)
								Thread.Sleep(1500)
							End If 
						End If
						
						Controller.PowerEnabled = flag
						
						If flag = True Then
							Try
								encoderPositionRead()
							Catch ex2
								If Not(IsError(ex2,-3127) Or IsError(ex2,-3128)) Then
									Throw ex2
								End If
							End Try
						End If
						
						If flag = True And motorHomeDisableWhenServoOFF = True Then
							m_orgCompleteFlag = False
							thePDBManager.setPDB(PDB_MOTOR_HOME_STATE,0)
						End If
					End If
					Exit While
				Catch ex
					servoEnableMutex.unlock()
					Select ex.ErrorCode
					Case -1600 'power off request
						'resume
						Thread.Sleep(500)
					Case -3109
						retryCount = retryCount - 1
						If retryCount > 0 Then
						Else
							Throw ex
						End If
					Case Else
						Throw ex
					End Select
					
					ex = Nothing
				Finally
					servoEnableMutex.unlock()
				End Try
			End While
			servoEnableMutex.unlock()
		End Sub
		
		Public Sub setFactoryZero(axis As Integer)
			Dim i As Integer
			Dim j As Integer
			Dim ex As Exception
			
			Dim oldHomeOrder As Integer
			Dim oldValue(axisCount) As Double
			oldHomeOrder = CInt(thePDBManager.getPDB(PDB_HOMING_SEQUENCT))
			For i=1 To axisCount
				oldValue(i-1) = CInt(thePDBManager.getPDB(PDB_HOME_METHOD, i))
								
											   
		
				thePDBManager.setPDB(PDB_HOME_METHOD,i,35)
		  
			Next
			
			Try
				If autoMoveAxisFactoryZero = True Then
					Dim changed As Boolean = False
					For i = 1 To axisCount
						If axis = 0 Or axis = i Or (axis = controlAxis("Z") And axisToZIndex(i) > 0) Then
							If CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) = 40 Or CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) = 44 Then 'If absolute
								If specialFactoryZeroMethod(i) <> 0 Then
									thePDBManager.setPDB(PDB_HOME_METHOD,i,specialFactoryZeroMethod(i))
									changed = True
								End If
							End If
						End If
					Next i
					If changed = True Then
						Robot.Home()
				  
   
						For i=1 To axisCount
								   
												  
		   
							thePDBManager.setPDB(PDB_HOME_METHOD,i,35)
			 
						Next
	  
					End If
					For i = 1 To axisCount
						If axis = 0 Or axis = i Or (axis = controlAxis("Z") And axisToZIndex(i) > 0) Then
							If CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) = 40 Or CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) = 44 Then 'If absolute
								If specialFactoryZeroMethod(i) = 0 Then
									If axisToZIndex(i) > 0 Then ' If Z Axis
										If zAxisFactoryZero_PlusDirection = False Then
											If CInt(thePDBManager.getPDB(PDB_NEGATIVE_LIMIT_SENSOR,i)) = 0 Then
												thePDBManager.setPDB(PDB_HOME_METHOD,i,-4) ' - hard stop
											Else
												thePDBManager.setPDB(PDB_HOME_METHOD,i,17) ' - limit
											End If
										Else
											If CInt(thePDBManager.getPDB(PDB_POSITIVE_LIMIT_SENSOR,i)) = 0 Then
												thePDBManager.setPDB(PDB_HOME_METHOD,i,-3) ' + hard stop
											Else
												thePDBManager.setPDB(PDB_HOME_METHOD,i,18) ' + limit
											End If
										End If
										Robot.Home()
									  
													 
			  
										thePDBManager.setPDB(PDB_HOME_METHOD,i,35)
				
									ElseIf i = controlAxis("V") Then ' If V Axis
										If CInt(thePDBManager.getPDB(PDB_NEGATIVE_LIMIT_SENSOR,i)) = 0 Then
											thePDBManager.setPDB(PDB_HOME_METHOD,i,-4) ' - hard stop
										Else
											thePDBManager.setPDB(PDB_HOME_METHOD,i,17) ' - limit
										End If
										Robot.Home()
									  
													 
			  
										thePDBManager.setPDB(PDB_HOME_METHOD,i,35)
									End If
								End If
							End If
						End If
			
					Next i
				End If
				
				Dim value As Double
				Dim curLoc As LocationEx = LocationEx.GetDestJointPos()
				For i = 1 To axisCount
					If axis = 0 Or axis = i Or _
					(axis = controlAxis("Z") And axisToZIndex(i) > 0) Then
						If CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) = 41 Then 'If incremental
							Dim scale As Double = CDbl(thePDBManager.getPDB(2300, i))
							If i = controlAxis("T") Then ' If T
								value = -1 * CDbl(thePDBManager.getPDB(16120, i))
								value = value + scale * curLoc.loc.angle(i)
								thePDBManager.setPDB(16120, i, -1 * value)
							Else
								For j = 0 To armCount - 1 ' If Arm
									If (i = m_arm(j).controlAxis) Or (i = m_arm(j).elbowControlAxis) Then
										value = -1 * CDbl(thePDBManager.getPDB(16120, i))
										value = value + scale * (curLoc.loc.angle(i) - m_arm(j).armCenterDeg)
										thePDBManager.setPDB(16120, i, -1 * value)
										Exit For
									End If
								Next j
							End If
						ElseIf CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) = 40 Or CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) = 44 Then 'If absolute
							value = CDbl(thePDBManager.getPDB(12252, i))
							For j = 0 To armCount - 1
								If (i = m_arm(j).controlAxis) Or (i = m_arm(j).elbowControlAxis) Then
										 
										
									value = value - (CDbl(thePDBManager.getPDB(2300, i)) * m_arm(j).armCenterDeg)
				 
												   
												   
			
									Exit For
								End If
							Next j
							If axisToZIndex(i) > 0 Then ' If Z and multi Z
								value = value - (CDbl(thePDBManager.getPDB(2300, i)) * (zAxisFactoryZeroPosition / zAxisCount))
							End If
							thePDBManager.setPDB(16120, i, -1 * value)
							Robot.Home
						End If
					End If
				Next i
				
				m_orgCompleteFlag = False
				
			Catch ex
				Throw ex
				ex = Nothing
				
			Finally
				'restore homing method
				thePDBManager.setPDB(PDB_HOMING_SEQUENCT, oldHomeOrder)
				For i = 1 To axisCount
					thePDBManager.setPDB(PDB_HOME_METHOD, i, oldValue(i-1))
				Next
			End Try
		End Sub
		
		Public Function controlAxis(axisName As String) As Integer
			Dim i As Integer
			For i = 1 To m_axisCount
				If m_robotAxisNameList(i-1) = axisName Then
					Return i
				End If
			Next i
			Return -1
		End Function
		
		Public Function tpAxis(axisName As String) As Integer
			Dim i As Integer
			For i = 1 To m_tpAxisCount
				If m_tpAxisNameList(i-1) = axisName Then
					Return i
				End If
			Next i
			Return -1
		End Function
		
		Public Function dynaxAxis(axisName As String) As Integer
			Dim i As Integer
			For i = 1 To m_dynaxAxisCount
				If m_dynaxAxisNameList(i-1) = axisName Then
					Return i
				End If
			Next i
			Return -1
		End Function
		
		Public Function tpToControlAxis(tpAxisIndex As Integer) As Integer
			Dim axisName As String = m_tpAxisNameList(tpAxisIndex-1)
			If axisName = "" Then
				Return tpAxisIndex
			Else
				Return controlAxis(axisName)
			End If
		End Function
		
		Public Function dynaxToControlAxis(dynaxAxisIndex As Integer) As Integer
			Dim axisName As String = m_dynaxAxisNameList(dynaxAxisIndex-1)
			Return controlAxis(axisName)
		End Function
		
		Public Function controlToTPAxis(axisIndex As Integer) As Integer
			Dim axisName As String = m_robotAxisNameList(axisIndex-1)
			Return tpAxis(axisName)
		End Function
		
		Public Function controlToDynaxAxis(axisIndex As Integer) As Integer
			Dim axisName As String = m_robotAxisNameList(axisIndex-1)
			Return dynaxAxis(axisName)
		End Function
		
		Public Function armSelectIndexToCustomValue(armSelectIndex As Integer) As Integer
			Dim i As Integer
			Dim customValue As Integer = 0
			
			If armSelectIndex >= Math.Pow(2,armCount) Then
				ThrowError(ERR_INVALID_HAND)
			End If
			
			For i = 0 To armCount - 1
				If armSelectIndex And Math.Pow(2,m_arm(i).armIndex-1) Then
					customValue = customValue + Math.Pow(2,m_arm(i).axisOrderIndex-1)
				End If
			Next i
			
			Return customValue - 1
		End Function
		
		Public Function customValueToArmSelectIndex(customValue As Integer) As Integer
			Dim i As Integer
			Dim armSelectIndex As Integer = 0
			
			For i = 0 To armCount - 1
				If (customValue+1) And Math.Pow(2,m_arm(i).axisOrderIndex-1) Then
					armSelectIndex = armSelectIndex + Math.Pow(2,m_arm(i).armIndex-1)
				End If
			Next i
			
			Return armSelectIndex
		End Function
		
		Public Function armListToArmSelectIndex(armList() As RobotArm) As Integer
			Dim armSelectedIndex As Integer = 0
			Dim i As Integer
			For i = 0 To armList.GetUpperBound(0) - 1
				armSelectedIndex = armSelectedIndex + Math.Pow(2,armList(i).armIndex-1)
			Next i
			Return armSelectedIndex
		End Function
		
		Public Sub armSelectIndexToArmList(armSelectedIndex As Integer, ByRef resultArmList() As RobotArm)
			Dim resultArmCount As Integer = 0
			Dim i As Integer
			For i = 0 To armCount - 1
				If Math.Pow(2,m_arm(i).armIndex-1) And armSelectedIndex Then
					resultArmCount = resultArmCount + 1
					If resultArmCount = 1 Then
						ReDim resultArmList(resultArmCount)
					Else
						ReDim Preserve resultArmList(resultArmCount)
					End If
					resultArmList(resultArmCount-1) = m_arm(i)
				End If
			Next i
		End Sub
		
		Public Function getSelectedArmIndex() As Integer
			Dim customValue As Integer = 0
			Dim value As Integer
			Dim i As Integer
			
			For i = 2 To 1 Step -1
				value = Robot.Custom(Robot.Selected,i)
				customValue = customValue * 2 + value
			Next i
			
			Return customValueToArmSelectIndex(customValue)
		End Function
		
		Public Sub setSelectedArmIndex(armSelectIndex As Integer)
			Dim changed As Boolean = False
			Dim customValue As Integer = armSelectIndexToCustomValue(armSelectIndex)
			Dim i As Integer
			
			For i = 1 To 2 Step 1
				If customValue And Math.Pow(2,i-1) Then
					If Robot.Custom(Robot.Selected,i) <> 1 Then
						Robot.Custom(i) = 1
						changed = True
					End If
				Else
					If Robot.Custom(Robot.Selected,i) <> 0 Then
						Robot.Custom(i) = 0
						changed = True
					End If
				End If
			Next i
			
			If changed = True Then
				If ShowCommandLogToConsole = True Then
					MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Arm CustomValue changed to " + CStr(customValue))
				End If
			End If
		End Sub
		
		Public Sub setSelectedArmIndex(selectedArm As RobotArm)
			Dim selectedArmList(1) As RobotArm
			selectedArmList(0) = selectedArm
			setSelectedArmIndex(selectedArmList)
		End Sub
		
		Public Sub setSelectedArmIndex(selectedArmList() As RobotArm)
			setSelectedArmIndex(armListToArmSelectIndex(selectedArmList))
		End Sub
		
		Public Sub getAllArmList(ByRef armList() As RobotArm)
			getAllArmList(armList, False)
		End Sub
		
		Public Sub getAllArmList(ByRef armList() As RobotArm, selecFingerIndex As Boolean)
			ReDim armList(armCount)
			Dim i As Integer
			For i = 0 To armCount - 1
				If selecFingerIndex = True Then
					m_arm(i).selectedFingerIndex = Math.pow(2,m_arm(i).fingerCount)	- 1
				End If
				armList(i) = m_arm(i)
			Next i
		End Sub
		
		Public Sub getArmList(ByRef armList() As RobotArm, fingerIndex As Integer)
			Dim resultCount As Integer = 0
			Dim i As Integer
			For i = 0 To armCount - 1
				m_arm(i).selectedFingerIndex = fingerIndex Mod Math.pow(2,m_arm(i).fingerCount)
				fingerIndex = Math.Floor(fingerIndex / Math.pow(2,m_arm(i).fingerCount))
				If m_arm(i).selectedFingerIndex <> 0 Then
					If resultCount = 0 Then
						ReDim armList(1)
					Else
						ReDim Preserve armList(resultCount + 1)
					End If
					armList(resultCount) = m_arm(i)
					resultCount = resultCount + 1
				End If
			Next i
			If resultCount = 0 Then
				throwError(ERR_INVALID_HAND)
			End If
		End Sub
		
		Public Sub getArmList_checkArmControlAxis(ByRef armList() As RobotArm, fingerIndex As Integer)
			Dim firstSelectedArmList() As RobotArm
			getArmList(firstSelectedArmList,fingerIndex)
			
			Dim resultCount As Integer = 0
			Dim i,j As Integer
			For i = 0 To armCount - 1
				For j = 0 To firstSelectedArmList.getUpperBound(0) - 1
					If m_arm(i).controlAxis = firstSelectedArmList(j).controlAxis Then
						If resultCount = 0 Then
							ReDim armList(1)
						Else
							ReDim Preserve armList(resultCount + 1)
						End If
						armList(resultCount) = m_arm(i)
						resultCount = resultCount + 1
						Exit For
					End If
				Next j
			Next i
			If resultCount = 0 Then
				throwError(ERR_INVALID_HAND)
			End If
		End Sub
		
		Public Sub getOtherArmList(ByRef armList() As RobotArm, arm As RobotArm)
			Dim nowArmList(1) As RobotArm
			nowArmList(0) = arm
			getOtherArmList(armList,nowArmList)
		End Sub
		
		Public Sub getOtherArmList(ByRef armList() As RobotArm, nowArmList() As RobotArm)
			ReDim armList(armCount - nowArmList.getUpperBound(0))
			Dim resultCount As Integer = 0
			Dim i As Integer
			Dim j As Integer
			Dim match As Boolean
			For i = 0 To armCount - 1
				match = False
				For j = 0 To nowArmList.getUpperBound(0) - 1
					If m_arm(i).armIndex = nowArmList(j).armIndex Then
						match = True
						Exit For
					End If
				Next j
				If match = False Then
					resultCount = resultCount + 1
					armList(resultCount - 1) = m_arm(i)
				End If
			Next i
		End Sub
		
		Public Sub getOtherArmList_checkArmControlAxis(ByRef armList() As RobotArm, arm As RobotArm)
			Dim nowArmList(1) As RobotArm
			nowArmList(0) = arm
			getOtherArmList_checkArmControlAxis(armList,nowArmList)
		End Sub
		
		Public Sub getOtherArmList_checkArmControlAxis(ByRef armList() As RobotArm, nowArmList() As RobotArm)
			ReDim armList(0)
			Dim resultCount As Integer = 0
			Dim i As Integer
			Dim j As Integer
			Dim match As Boolean
			For i = 0 To armCount - 1
				match = False
				For j = 0 To nowArmList.getUpperBound(0) - 1
					If m_arm(i).armIndex = nowArmList(j).armIndex Or _
					m_arm(i).controlAxis = nowArmList(j).controlAxis Then
						match = True
						Exit For
					End If
				Next j
				If match = False Then
					resultCount = resultCount + 1
					ReDim Preserve armList(resultCount)
					armList(resultCount - 1) = m_arm(i)
				End If
			Next i
		End Sub
		
		Public Sub getCurrentNotHomeArmList(ByRef armList() As RobotArm)
			getRetractNeedArmList(armList, True)
		End Sub
		
		Public Sub getRetractNeedArmList(ByRef armList() As RobotArm)
			getRetractNeedArmList(armList, False)
		End Sub
		
							  
  
		 
  
		Public Sub getRetractNeedArmList(ByRef armList() As RobotArm, useOnlyCurrentPosition As Boolean)
			Dim ex As Exception
			Dim resultCount As Integer = 0
			Dim i As Integer
			ReDim armList(0)
			
			If robotType = SCARA_TYPE Then
				If theMotionLoger.lastStage <> 0 And theMotionLoger.lastIndex = 0 Then
					Exit Sub
				End If
			End If
			
			Dim homeLoc As LocationEx
			homeLoc = thePointDataManager.getLocation(HOME_POINT_INDEX)
			If homeLoc Is Nothing Then
				Exit Sub
			End If
			Dim curLoc As LocationEx
			If useOnlyCurrentPosition = True Then
				curLoc = LocationEx.GetCurJointPos()
			Else
				curLoc = LocationEx.GetDestJointPos()
			End If
			
			Dim needRetract As Boolean
			For i = 0 To armCount - 1
				needRetract = True
				If robotType = SCARA_TYPE Then
					If (Math.Abs(curLoc.loc.angle(m_arm(i).controlAxis) - homeLoc.loc.angle(m_arm(i).controlAxis))) < 0.01 And _
						(Math.Abs(curLoc.loc.angle(m_arm(i).elbowControlAxis) - homeLoc.loc.angle(m_arm(i).elbowControlAxis))) < 0.01 Then
						needRetract = False
					End If
					If needRetract = True Then
						Dim s As Integer
						Dim stationReadyLoc As LocationEx
						For s = 1 To theStationManager.stationCount
							If theStationManager.getStation(s).isUseSmartMotion() = True Then
								Try
									stationReadyLoc = theStationManager.getStation(s).readyLocation(1,m_arm(i),TARGET_MODE)
									If (Math.Abs(curLoc.loc.angle(m_arm(i).controlAxis) - stationReadyLoc.loc.angle(m_arm(i).controlAxis))) < 0.01 And _
										(Math.Abs(curLoc.loc.angle(m_arm(i).elbowControlAxis) - stationReadyLoc.loc.angle(m_arm(i).elbowControlAxis))) < 0.01 Then
										needRetract = False
										Exit For
									End If
								Catch ex
									'ignore error
								End Try
							End If
						Next s
					End If
				ElseIf robotType = WTR_TYPE Or robotType = FTR_TYPE Then
					If Math.Abs(curLoc.loc.angle(m_arm(i).controlAxis) - homeLoc.loc.angle(m_arm(i).controlAxis)) < 0.01 Then
						needRetract = False
					End If
				End If
				If needRetract = True Then
					If resultCount = 0 Then
						ReDim armList(1)
					Else
						ReDim Preserve armList(resultCount + 1)
					End If
					armList(resultCount) = m_arm(i)
					resultCount = resultCount + 1
				End If
			Next i
		End Sub
		
		Public Function isArmAxis(axis As Integer) As RobotArm
			Dim i As Integer
			For i = 0 To armCount - 1
				If arm(i).isControlAxis(axis) = True Then
					Return arm(i)
				End If
			Next i
			Return Nothing
		End Function
		
					  
						   
		 
  
		Public Sub org()
			Dim i As Integer
			Dim ex As Exception
			Dim ex2 As Exception
			m_orgCompleteFlag = False
			Dim robotArmList() As RobotArm
			Dim homeLoc As LocationEx = thePointDataManager.getLocation(HOME_POINT_INDEX)

			' -- servo On If now servo is off
			servoEnable(True)
			' -- servo On If now servo is off
			
			
			' -- motor home check only this robot
			encoderPositionRead(robotIndex)
			' -- motor home check only this robot
			

			' -- attach
			autoAttach()
			' -- attach

			
			' --- check now wafer state
			If armCount > 0 Then
				getAllArmList(robotArmList,True)
				If checkArmGripOneByOne = True Then
					For i = 1 To armCount
						armWaferCheck(robotArmList(i-1),False,checkForAllGripType)
					Next i
					Thread.Sleep(500)
					'one more time. because first turn on state, all vaccum is on. so, it need recheck one by one after suction off.
					For i = 1 To armCount
						armWaferCheck(robotArmList(i-1),False,checkForAllGripType)
					Next i
				Else
					armWaferCheck(robotArmList,False,checkForAllGripType)
				End If
			End If
			' check now wafer state ---
			
			
			' home method
			If armCount > 0 And Not(homeLoc Is Nothing) Then
				If CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,robotArmList(0).controlAxis)) = 40 Or CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,robotArmList(0).controlAxis)) = 44 Then 'If absolute
					' limit out
					theJogManager.excapeFromLimitSensorUseJog(False)
					theJogManager.excapeFromSoftLimitUseJog(True)
					' limit out
					
					Try
						theProfileManager.nowHoming = True
						
						If axisSpecialORGsequence = "" Then
						allArmRetract()
						Else
						
						End If
						theMoveEx.waitForEOM()
					Catch ex
						If ex.ErrorCode = -1012 And (robotType = WTR_TYPE Or robotType = FTR_TYPE) Then
							For i = 0 To robotArmList.getUpperBound(0)-1
								theMoveEx.OneAxis(robotArmList(i).controlAxis,homeLoc.loc.Angle(robotArmList(i).controlAxis),False,theProfileManager.getProfile(COORD_JOINT,True))
								theMoveEx.forceOverlap(100)
							Next i
							theMoveEx.WaitForEOM
						ElseIf ex.ErrorCode = -1056 Then ' hand custom value error
							If robotType = SCARA_TYPE Then
								'ignore
							Else
								Throw ex
							End If
						Else
							Throw ex
						End If

					Finally
						theProfileManager.nowHoming = False
					End Try
					
					If theSystem.demoMode = 0 Then
						checkArmHomeSensor(theSystem.gripperMaximumTime)
					End If
					
					Try
						theProfileManager.nowHoming = True
						If robotType = SCARA_TYPE Then
							Dim readyLoc As LocationEx
							Dim cur As locationEx = LocationEx.GetDestJointPos()
							readyLoc = homeLoc.clone
							readyLoc.setCurrentFixedPosition()
							readyLoc.loc.Angle(myRobot(Robot.Selected-1).ControlAxis("T")) = cur.loc.Angle(myRobot(Robot.Selected-1).ControlAxis("T"))
							theMoveEx.Loc(readyLoc, theProfileManager.GetProfile(readyLoc.Type, True))
							theMoveEx.WaitForEOM
																	   
										  
																																  
							theMoveEx.Loc(homeLoc, theProfileManager.GetProfile(readyLoc.Type, True))
							
							theMoveEx.WaitForEOM
						Else
							Dim tempHomeLoc As LocationEx
							tempHomeLoc = homeLoc.clone
							Dim curLoc As LocationEx = LocationEx.GetDestJointPos()
							For i = 1 To axisCount
								If CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) <> 40 And CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) <> 44 Then 'If not absolute
									tempHomeLoc.loc.Angle(i) = homeLoc.loc.Angle(i)
								End If
							Next i
							
							Dim moveSpesicalSequence As String = ""
							If theMotionLoger.lastStage <> 0 Then
								Dim lastStation As Station = theStationManager.getStation(theMotionLoger.lastStage)
								moveSpesicalSequence = lastStation.outSpecialSequence
							End If
							If moveSpesicalSequence = "" Then
								moveSpesicalSequence = axisSpecialORGsequence
							End If
								
							If moveSpesicalSequence <> "" Then
								Try	
									lookAtLocation(tempHomeLoc, theProfileManager.getProfile(COORD_JOINT,True), moveSpesicalSequence)
								Catch ex2
									For i = 1 To axisCount
										If CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) = 40 Or CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) = 44 Then 'If absolute
											theMoveEx.OneAxis(i,homeLoc.loc.Angle(i),False,theProfileManager.getProfile(COORD_JOINT,True))
											theMoveEx.forceOverlap(100)
										End If
									Next i
								End Try
							Else
								For i = 1 To axisCount
									If CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) = 40 Or CInt(thePDBManager.getPDB(PDB_ENCODER_TYPE,i)) = 44 Then 'If absolute
										theMoveEx.OneAxis(i,homeLoc.loc.Angle(i),False,theProfileManager.getProfile(COORD_JOINT,True))
										theMoveEx.forceOverlap(100)
									End If
								Next i
							End If
							
							theMoveEx.WaitForEOM
						End If
					Catch ex
						Throw ex

					Finally
						theProfileManager.nowHoming = False
					End Try
				End If
			End If
			
			Robot.Home
			' home method
			
			' limit out
			theJogManager.excapeFromSoftLimitUseJog(False)
			' limit out
			
			' --- move to home
			moveToHome()
			' move to home ---
			' -- attach
			autoDetach()
			' -- attach
			theMotionLoger.clearLastMotionLog()
			m_orgCompleteFlag = True
		End Sub
		
		Public Sub moveToHome()
			Dim ex As Exception
			Dim homeLoc As LocationEx = thePointDataManager.getLocation(HOME_POINT_INDEX)
														  
			Try
				If homeLoc Is Nothing Then
					Exit Try
				End If
				
				theProfileManager.nowHoming = True
									  
																			
				moveToLocation(homeLoc,True)
				Move.WaitForEOM
									   
			Catch ex
				Throw ex

			Finally
				theProfileManager.nowHoming = False
			End Try
		End Sub
		
		Public Sub stopMotion()
			theMoveEx.moveStop()
			opCommandRunThreadStopFunc()
		End Sub
		
		Public Sub MoveAbs(targetLoc As LocationEx)
			theMoveEx.loc(targetLoc,theProfileManager.getProfile(targetLoc.type,True))
		End Sub
		
		Public Sub MoveInc(targetLoc As LocationEx)
			Dim loc As LocationEx
			Dim i,j As Integer
			
			If targetLoc.type = COORD_CARTESIAN Then
				loc = LocationEx.getDestCartPos()
				
				loc.loc.X = loc.loc.X + targetLoc.loc.X
				loc.loc.Y = loc.loc.Y + targetLoc.loc.Y
				loc.loc.Z = loc.loc.Z + targetLoc.loc.Z
				If robotType = ARTICULATED_TYPE Then
					loc.loc.Roll = loc.loc.Roll + targetLoc.loc.Roll
					loc.loc.Pitch = loc.loc.Pitch + targetLoc.loc.Pitch
				End If
				loc.loc.Yaw = loc.loc.Yaw + targetLoc.loc.Yaw
	
				If isTrackExist() Then
					loc.extra("T") = loc.extra("T") + targetLoc.extra("T")
				End If
				If isFlipExist() Then
					loc.extra("F") = loc.extra("F") + targetLoc.extra("F")
				End If
			Else
				loc = LocationEx.getDestJointPos()
				For i = 1 To axisCount
					loc.loc.angle(i) = loc.loc.angle(i) + targetLoc.loc.angle(i)
				Next i
				
				Dim zAxisCount As Integer = myRobot(Robot.Selected-1).zAxisCount
				If zAxisCount > 1 Then 'smart telescopic INC move
					Dim sumOfZMove As Double = 0
					For i = 1 To zAxisCount
						sumOfZMove = sumOfZMove + targetLoc.loc.angle(myRobot(Robot.Selected-1).zIndexToAxis(i))
					Next i
					If sumOfZMove <> 0 Then
						Dim curLoc As LocationEx = LocationEx.getDestJointPos()
						Dim needMoveAxisCount As Integer
						Dim nowZPosition As Double = loc.getZPosition()
						Dim targetZPositionPerAxis As Double = (sumOfZMove + nowZPosition) / zAxisCount
						Dim diff(zAxisCount) As Double
						For i = 1 To zAxisCount
							diff(i-1) = targetZPositionPerAxis - loc.loc.angle(myRobot(Robot.Selected-1).zIndexToAxis(i))
						Next i
						For i = 1 To zAxisCount
							If (sumOfZMove > 0 And diff(i-1) < 0) Or (sumOfZMove < 0 And diff(i-1) > 0) Then
								needMoveAxisCount = 0
								For j = 1 To zAxisCount
									If (sumOfZMove > 0 And diff(j-1) > 0) Or (sumOfZMove < 0 And diff(j-1) < 0) Then
										needMoveAxisCount = needMoveAxisCount + 1
									End If
								Next j
								For j = 1 To zAxisCount
									If (sumOfZMove > 0 And diff(j-1) > 0) Or (sumOfZMove < 0 And diff(j-1) < 0) Then
										diff(j-1) = diff(j-1) + (diff(i-1) / needMoveAxisCount)
									End If
								Next j
								diff(i-1) = 0
								i = 1
							End If
						Next i
						For i = 1 To zAxisCount
							loc.loc.angle(myRobot(Robot.Selected-1).zIndexToAxis(i)) = curLoc.loc.angle(myRobot(Robot.Selected-1).zIndexToAxis(i)) + diff(i-1)
						Next i
					End If
				End If
			End If
			
			theMoveEx.loc(loc,theProfileManager.getProfile(targetLoc.type,True))
		End Sub
		
		Public Sub moveToLocation(loc As LocationEx)
			moveToLocation(loc,False,theProfileManager.getProfile(loc.type,True))
		End Sub
		
		Public Sub moveToLocation(loc As LocationEx, safeMove As Boolean)
			moveToLocation(loc,safeMove,theProfileManager.getProfile(loc.type,True))
		End Sub
		
		Public Sub moveToLocation(loc As LocationEx, safeMove As Boolean, pf As ProfileEx)
			Dim i As Integer
			
			If loc Is Nothing Then
				ThrowError(ERR_NO_DATA)
			End If
			
			theMotionLoger.clearLastMotionLog()
		 
			
			If safeMove = True And armCount > 0 Then
				lookAtLocation(loc,pf)
'				theMoveEx.wait()
			End If
		 
			
			theMoveEx.loc(loc,pf)
		End Sub
		
		Public Sub lookAtLocation(loc As LocationEx, pf As ProfileEx)
			lookAtLocation(loc,pf,"")
		End Sub
		
		Public Sub lookAtLocation(loc As LocationEx, pf As ProfileEx, specialSequence As String)
			Dim i As Integer
			
			If axisSpecialORGsequence = "" Then																   
'				allArmRetract()
			Else
			
			End If
			
'			theMoveEx.wait()
			
			Dim lookLoc As LocationEx
			If loc.type = COORD_JOINT Then
				lookLoc = loc.clone
			Else
				If robotType = WTR_TYPE Or robotType = FTR_TYPE Then
					lookLoc = LocationEx.GetDestCartPos()
					lookLoc.setZPosition(loc.getZPosition())
					If controlAxis("T") > 0 Then
						lookLoc.loc.angle(controlAxis("T")) = Math.Atan2(loc.loc.x,loc.loc.y) * 180 / Math.PI
					End If
				Else
					lookLoc = loc.kinesol
				End If
			End If
			
			If robotType <> SCARA_TYPE Then
				lookLoc.setAllArmHomePosition()
			End If
			
			Dim alreadyRotated As Boolean = False
			Dim selectedSpecialSequence As String = specialSequence
			
			If selectedSpecialSequence = "" Then
				selectedSpecialSequence = axisSpecialSequence
			End If
			
			If selectedSpecialSequence <> "" And loc.type = COORD_JOINT Then
				Dim index As Integer = 0
				Dim curLoc As LocationEx = LocationEx.GetDestJointPos()
				Dim axisName As String
				While index < selectedSpecialSequence.length
					axisName = selectedSpecialSequence.Substring(index,1)
					If axisName = "/" Then 'move now
						theMoveEx.loc(curLoc,pf)
						theMoveEx.wait()
						index = index + 1
					ElseIf axisName = "#" Then 'move to Special point
						axisName = selectedSpecialSequence.Substring(index+1,1)
						Dim targetPointIndex As Integer = CInt(selectedSpecialSequence.Substring(index+2,3))
						Dim targetLoc As LocationEx = thePointDataManager.getLocation(targetPointIndex)
						If targetLoc Is Nothing Then
							ThrowError(ERR_NO_DATA)
						End If
						index = index + 5
						If axisName = "F" Then
							For i = 0 To armCount-1
								If m_arm(i).isCanFlip = True Then
									armFlip_deg(m_arm(i),targetLoc.loc.angle(m_arm(i).flipControlAxis))
									curLoc = LocationEx.GetDestJointPos()
									curLoc.loc.angle(m_arm(i).flipControlAxis) = targetLoc.loc.angle(m_arm(i).flipControlAxis)
								End If
							Next i
							'Console.WriteLine("Sub F" + " Changed... " + curLoc.toString())
						Else
							curLoc.loc.angle(controlAxis(axisName)) = targetLoc.loc.angle(controlAxis(axisName))
							'Console.WriteLine("Sub " + axisName + " Changed... " + curLoc.toString())
						End If
					ElseIf axisName = "F" Then
						For i = 0 To armCount-1
							If m_arm(i).isCanFlip = True Then
								armFlip_deg(m_arm(i),lookLoc.loc.angle(m_arm(i).flipControlAxis))
								curLoc = LocationEx.GetDestJointPos()
								curLoc.loc.angle(m_arm(i).flipControlAxis) = lookLoc.loc.angle(m_arm(i).flipControlAxis)
							End If
						Next i
						alreadyRotated = True
						index = index + 1
						'Console.WriteLine("F" + " Changed... " + curLoc.toString())
					Else
						curLoc.loc.angle(controlAxis(axisName)) = lookLoc.loc.angle(controlAxis(axisName))
						index = index + 1
						'Console.WriteLine(axisName + " Changed... " + curLoc.toString())
					End If
				End While
			End If
			
			If alreadyRotated = False Then
				For i = 0 To armCount-1
					If m_arm(i).isCanFlip = True Then
						theMoveEx.wait()
						armFlip_deg(m_arm(i),lookLoc.loc.angle(m_arm(i).flipControlAxis))
					End If
				Next i
			End If
			
			theMoveEx.motionOverlap(0,100)
			theMoveEx.loc(lookLoc,pf)				 
			theMoveEx.motionOverlap(0,100)
		End Sub
		
		Public Sub armGripWaitSignal(arm As RobotArm, flag As Boolean)
			Dim waitSignal1(0) As Integer
			Dim waitSignal2(0) As Integer
			Dim armList(1) As RobotArm
			armList(0) = arm
			armGripWaitSignal_and(0,armList,flag,waitSignal1,waitSignal2)
		End Sub
		
		Public Sub armGripWaitSignal(maxWaitTime As Integer, arm As RobotArm, flag As Boolean, waitSignal() As Integer)
			Dim signalCount As Integer = waitSignal.getUpperBound(0)-1
			Dim waitSignal2(signalCount) As Integer
			Dim i As Integer
			For i = 0 To signalCount - 1
				waitSignal2(i) = 0
			Next i
			Dim armList(1) As RobotArm
			armList(0) = arm
			armGripWaitSignal_and(maxWaitTime,armList,flag,waitSignal,waitSignal2)
		End Sub
		
		Public Sub armGripWaitSignal_or(maxWaitTime As Integer, signal1OnWaiteTime As Integer, arm As RobotArm, flag As Boolean, waitSignal1() As Integer, waitSignal2() As Integer)
			Dim armList(1) As RobotArm
			armList(0) = arm
			armGripWaitSignal_or(maxWaitTime,signal1OnWaiteTime,armList,flag,waitSignal1,waitSignal2)
		End Sub
		
		Public Sub armGripWaitSignal_and(maxWaitTime As Integer, arm As RobotArm, flag As Boolean, waitSignal1() As Integer, waitSignal2() As Integer)
			Dim armList(1) As RobotArm
			armList(0) = arm
			armGripWaitSignal_and(maxWaitTime,armList,flag,waitSignal1,waitSignal2)
		End Sub
		
		Public Sub armGripWaitSignal(armList() As RobotArm, flag As Boolean)
			Dim waitSignal1(0) As Integer
			Dim waitSignal2(0) As Integer
			armGripWaitSignal_and(0,armList,flag,waitSignal1,waitSignal2)
		End Sub
		
		
		Public Sub armGripWaitSignal(maxWaitTime As Integer, armList() As RobotArm, flag As Boolean, waitSignal() As Integer)
			Dim signalCount As Integer = waitSignal.getUpperBound(0)-1
			Dim waitSignal2(signalCount) As Integer
			Dim i As Integer
			For i = 0 To signalCount - 1
				waitSignal2(i) = 0
			Next i
			armGripWaitSignal_and(maxWaitTime,armList,flag,waitSignal,waitSignal2)
		End Sub
		
		Public Sub armGripWaitSignal_or(maxWaitTime As Integer, signal1OnWaiteTime As Integer, armList() As RobotArm, flag As Boolean, waitSignal1() As Integer, waitSignal2() As Integer)
			Dim i As Integer
			Dim remainCheckTargetCount As Integer
			Dim gripChanged As Boolean = False
			Dim checkTimeOut As New TimeStamp

			If Not(armList Is Nothing) Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If Not(armList(i) Is Nothing) Then
						If armList(i).isGrip() <> flag Then
							armList(i).grip(flag)
							gripChanged = True
						End If
					End If
				Next i
			End If
			
			Dim signalCount As Integer = waitSignal1.getUpperBound(0)
			Dim gripOnTimer(signalCount) As TimeStamp
			Dim checkStep(signalCount) As Integer
			
			Dim Const CHECK_START As Integer = 1
			Dim Const SISNAL1_ON As Integer = 2
			Dim Const SISNAL1_OFF As Integer = 3
			Dim Const CHECK_COMPLETE As Integer = 4
			
			For i = 0 To signalCount-1
				gripOnTimer(i) = New TimeStamp
				If waitSignal1(i) = 0 Then
					checkStep(i) = CHECK_COMPLETE
				Else
					checkStep(i) = CHECK_START
				End If
			Next i
			
			checkTimeOut.startTimer()
		
			While True
				If checkTimeOut.elapsedTime() > maxWaitTime Then
					Exit Sub
				End If
				remainCheckTargetCount = 0
				
				For i = 0 To signalCount-1
					If checkStep(i) <> CHECK_COMPLETE Then
						If waitSignal2(i) = 0 Then
							If robotIO.getDIO(waitSignal1(i)) = True Then
								checkStep(i) = CHECK_COMPLETE
								If ShowCommandLogToConsole = True Then
									MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Signal " + CStr(waitSignal1(i)) + " is ON")
								End If
							End If
						Else
							If robotIO.getDIO(waitSignal2(i)) = True Then
								checkStep(i) = CHECK_COMPLETE
								If ShowCommandLogToConsole = True Then
									MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Signal " + CStr(waitSignal2(i)) + " is ON")
								End If
							End If
							
							If checkStep(i) < SISNAL1_ON Then
								If robotIO.getDIO(waitSignal1(i)) = True Then
									If signal1OnWaiteTime > 0 Then
										gripOnTimer(i).startTimer()
										checkStep(i) = SISNAL1_ON
										If ShowCommandLogToConsole = True Then
											MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Signal " + CStr(waitSignal1(i)) + " is ON")
										End If
									Else
										checkStep(i) = CHECK_COMPLETE
										If ShowCommandLogToConsole = True Then
											MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Signal " + CStr(waitSignal1(i)) + " is ON (SELECT)")
										End If
									End If
								End If
							ElseIf checkStep(i) = SISNAL1_ON Then
								If robotIO.getDIO(waitSignal1(i)) = True Then
									If gripOnTimer(i).elapsedTime() >= signal1OnWaiteTime Then
										checkStep(i) = CHECK_COMPLETE
										If ShowCommandLogToConsole = True Then
											MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Signal " + CStr(waitSignal1(i)) + " is ON (SELECT)")
										End If
									End If
								Else
									checkStep(i) = SISNAL1_OFF
									If ShowCommandLogToConsole = True Then
										MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Signal " + CStr(waitSignal1(i)) + " is OFF")
									End If
								End If
							End If
						End If
					End If
					If checkStep(i) <> CHECK_COMPLETE Then
						remainCheckTargetCount = remainCheckTargetCount + 1
					End If
				Next i
				
				If remainCheckTargetCount = 0 Then
					Exit Sub
				End If
				
				Thread.Sleep(1)
			End While
		End Sub
		
		Public Sub armGripWaitSignal_and(maxWaitTime As Integer, armList() As RobotArm, flag As Boolean, waitSignal1() As Integer, waitSignal2() As Integer)
			Dim i As Integer
			Dim gripChanged As Boolean = False
			Dim checkTimeOut As New TimeStamp
			Dim remainCheckTargetCount As Integer
		
		
			If Not(armList Is Nothing) Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If Not(armList(i) Is Nothing) Then
						If armList(i).isGrip() <> flag Then
							armList(i).grip(flag)
							gripChanged = True
						End If
					End If
				Next i
			End If

			Dim signalCount As Integer = waitSignal1.getUpperBound(0)
			Dim gripOnTimer(signalCount) As TimeStamp
			Dim checkStep(signalCount) As Integer

			
			Dim Const CHECK_START As Integer = 1
			Dim Const SISNAL1_ON As Integer = 2
			Dim Const CHECK_COMPLETE As Integer = 3
			
			For i = 0 To signalCount-1
				gripOnTimer(i) = New TimeStamp
				If waitSignal1(i) = 0 Then
					checkStep(i) = CHECK_COMPLETE
				Else
					checkStep(i) = CHECK_START
				End If
			Next i
			
			checkTimeOut.startTimer()
			i = 0
			While True
				If checkTimeOut.elapsedTime() > maxWaitTime Then
					Exit Sub
				End If
				remainCheckTargetCount = 0
				
				'For i = 0 To signalCount-1
					If checkStep(i) <> CHECK_COMPLETE Then
						If waitSignal2(i) = 0 Then
							If robotIO.getDIO(waitSignal1(i)) = True Then
								checkStep(i) = CHECK_COMPLETE
								If ShowCommandLogToConsole = True Then
									MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Signal " + CStr(waitSignal1(i)) + " is ON")
								End If
							End If
						Else
							If robotIO.getDIO(waitSignal1(i)) = True Then
								If checkStep(i) < SISNAL1_ON Then
									checkStep(i) = SISNAL1_ON
									If ShowCommandLogToConsole = True Then
										MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Signal " + CStr(waitSignal1(i)) + " is ON")
										If robotIO.getDIO(waitSignal2(i)) = False Then
											MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Signal " + CStr(waitSignal2(i)) + " is OFF")
										End If
									End If
								End If
								If robotIO.getDIO(waitSignal2(i)) = True Then
									If checkStep(i) < CHECK_COMPLETE Then
										checkStep(i) = CHECK_COMPLETE
										If ShowCommandLogToConsole = True Then
											MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Signal " + CStr(waitSignal2(i)) + " is ON")
										End If
									End If
								End If
							End If
						End If
					End If
					If checkStep(i) <> CHECK_COMPLETE Then
						remainCheckTargetCount = remainCheckTargetCount + 1
					End If
				'Next i
				
				If remainCheckTargetCount = 0 Then
					Exit Sub
				End If
				
				Thread.Sleep(1)
			End While
		End Sub
		
		Public Sub checkArmHomeSensor(maximumWaitTime_ms As Integer)
			Dim armList() As RobotArm
			If armCount > 0 Then
				getAllArmList(armList)
			Else
				Exit Sub
			End If
			
			Dim timer As New TimeStamp
			Dim i As Integer
			Dim result As Boolean
			Dim preResult As Boolean = True
			
			timer.startTimer()
			While True
				result = True
				For i = 0 To armList.getUpperBound(0) - 1
					If armList(i).armHomeSensorIO <> 0 Then
						If robotIO.getDIO(armList(i).armHomeSensorIO) = False Then
							result = False
							Exit For
						End If
					End If
				Next i
				
				If preResult <> result Then
					preResult = result
					If ShowCommandLogToConsole = True Then
						If result = True Then
							MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : ARM_HOMED")
						Else
							MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : ARM_NOT_HOME")
						End If
					End If
				End If
				
				If result = False Then
					If timer.elapsedTime() > maximumWaitTime_ms Then
						ThrowError(ERR_NOT_READYPOS)
					End If
					Thread.Sleep(10)
				Else
					Exit Sub
				End If
			End While
		End Sub
		
		Public Sub checkWaferSlipDetectingBar(maxWaitTime_ms As Integer)
			Dim i As Integer
			Dim j As Integer
			Dim timer As New TimeStamp
			timer.startTimer()
			If waferDetectingSensorIO <> 0 Then
				Do
					If robotIO.getDIO(waferDetectingSensorIO) = True Then
						Exit Sub
					Else
						If waferDetectingSensorCheckOnlyNoWafer = True Then
							For j = 0 To Me.armCount - 1
								If arm(j).SensorCheck(False) = False Then
									Exit Sub
								End If
							Next j
						End If
					End If
					Thread.Sleep(10)
				Loop While timer.elapsedTime() < maxWaitTime_ms
				throwError(ERR_WAFER_SLIP)
			End If
		End Sub
		
		Public Sub armGrip(arm As RobotArm, flag As Boolean, waitDelay As Boolean)
			Dim armList(1) As RobotArm
			armList(0) = arm
			armGrip(armList,flag,waitDelay,False)
		End Sub
		
		Public Sub armGrip(armList() As RobotArm, flag As Boolean, waitDelay As Boolean)
			armGrip(armList,flag,waitDelay,False)
		End Sub
		
		Public Sub armGrip(arm As RobotArm, flag As Boolean, waitDelay As Boolean, checkGripTime As Boolean)
			Dim armList(1) As RobotArm
			armList(0) = arm
			armGrip(armList,flag,waitDelay,checkGripTime)
		End Sub
		
		Public Sub armGrip(armList() As RobotArm, flag As Boolean, waitDelay As Boolean, checkGripTime As Boolean)
			Dim i As Integer
			Dim gripChanged As Boolean = False
			Dim GripTimer As New TimeStamp
			'GripTimer.startTimer()'checkckeck
			
			For i = 0 To armList.GetUpperBound(0) - 1
				If armList(i).isGrip() <> flag Then
					armList(i).grip(flag)
					gripChanged = True
				End If
			Next i
			
			Dim signalCount As Integer = MAX_FINGER_COUNT_PER_ARM - 1
			Dim SelectFinger(signalCount) As Boolean
			Dim temp As Integer = armlist(0).selectedFingerIndex
				
			For i = armList(0).fingerCount-1 To 0 Step -1
				SelectFinger(i) = Math.Floor(temp/Math.Pow(2,i))
				If selectFinger(i) <> 0 Then
					temp = temp - Math.pow(2,i)				
				End If 
			Next i
			
			If theSystem.demoMode = 0 And checkGripTime = True And gripChanged = True And SelectFinger(0) <> 0 Then
				If flag = True Then
					armList(0).gripHalfStrokeTime_ms = armList(0).pusherGripTimeTest(armList,True,False)
				Else
					armList(0).ungripHalfStrokeTime_ms = armList(0).pusherGripTimeTest(armlist,False,False)
				End If
			End If
			
			If waitDelay = True And gripChanged = True Then
				If flag = True Then
					GripTimer.assertTimeDelay(theSystem.suctionOnTime)
				Else
					GripTimer.assertTimeDelay(theSystem.suctionOffTime)
				End If
			End If
		End Sub
		
		Public Sub extraGuideGrip(arm As RobotArm, flag As Boolean)
			Dim armList(1) As RobotArm
			armList(0) = arm
			extraGuideGrip(armList,flag)
		End Sub
		
		Public Sub extraGuideGrip(armList() As RobotArm, flag As Boolean)
			Dim i As Integer
			Dim gripChanged As Boolean = False
			
			For i = 0 To armList.GetUpperBound(0) - 1
				If armList(i).isUseExtraGuideGrip = True Then
					If armList(i).isExtraGuideGrip() <> flag Then
						armList(i).extraGuideGrip(flag)
						gripChanged = True
					End If
				End If
			Next i
			
			If gripChanged = True Then
				If flag = True Then
					Thread.Sleep(theSystem.suctionOnTime)
				Else
					Thread.Sleep(theSystem.suctionOffTime)
				End If
			End If
		End Sub
		
		Public Sub armWaferCheck_gripStep(arm As RobotArm, flag As Boolean, waitDelay As Boolean, checkAllGripTypes As Boolean)
			Dim armList(1) As RobotArm
			armList(0) = arm
			armWaferCheck_gripStep(armList,flag,waitDelay,checkAllGripTypes)
		End Sub
		
		Public Sub armWaferCheck_gripStep(armList() As RobotArm, flag As Boolean, waitDelay As Boolean, checkAllGripTypes As Boolean)
			Dim i,t As Integer
			Dim gripChanged As Boolean = False
			Dim somethingGrip As Boolean
			
			For i = 0 To armList.GetUpperBound(0) - 1
				If checkAllGripTypes = True Then ' can grip only one type
					somethingGrip = False
					For t = 1 To armList(i).totalGripTypeCount
						If armList(i).isGrip(t) = True And armList(i).sensorCheck(t,True) = True Then
							somethingGrip = True
							Exit For
						End If
					Next t
					If somethingGrip = False Then
						If flag = True Then
							If armList(i).isMagneticWaferDetectSensor() = False Then
								If armList(i).isGrip() <> True Then
									armList(i).grip(True)
									gripChanged = True
								End If
							Else
								If armList(i).sensorCheck(True) = True Then
									If armList(i).isGrip() <> True Then
										armList(i).grip(True)
										gripChanged = True
									End If
								End If
							End If
						Else
							For t = 1 To armList(i).totalGripTypeCount
								If armList(i).isMagneticWaferDetectSensor(t) = False Then
									If armList(i).isGrip(t) <> True Then
										armList(i).grip(t,True)
										  
										
								 
																				
									 
																			  
				 
				
										gripChanged = True
									End If
								Else
									If armList(i).sensorCheck(t,True) = True Then
										If armList(i).isGrip(t) <> True Then
											armList(i).grip(t,True)
											gripChanged = True
										End If
									End If
								End If
							Next t
						End If
					Else
						'do not anything. because already something grip.
					End If
					
				Else ' can grip multiple object (ex> YEST)
					If flag = True Then
						If armList(i).isMagneticWaferDetectSensor() = False Then
							If armList(i).isGrip() <> True Then
								armList(i).grip(True)
								gripChanged = True
							End If
						Else
							If armList(i).sensorCheck(True) = True Then
								If armList(i).isGrip() <> True Then
									armList(i).grip(True)
									gripChanged = True
								End If
							End If
						End If
					Else
						For t = 1 To armList(i).totalGripTypeCount
							If armList(i).isMagneticWaferDetectSensor(t) = False Then
								If armList(i).isGrip(t) <> True Then
									armList(i).grip(t,True)
									gripChanged = True
								End If
							Else
								If armList(i).sensorCheck(t,True) = True Then
									If armList(i).isGrip(t) <> True Then
										armList(i).grip(t,True)
										gripChanged = True
									End If
								End If
							End If
						Next t
					End If
				End If
			Next i
			
			If gripChanged = True And waitDelay = True Then
				Thread.Sleep(theSystem.suctionOnTime)
			End If
		End Sub
		
		Public Function armWaferCheck_checkStep(arm As RobotArm, flag As Boolean, checkAllGripTypes As Boolean) As Boolean
			Dim armList(1) As RobotArm
			armList(0) = arm
			Return armWaferCheck_checkStep(armList,flag,checkAllGripTypes,0)
		End Function
		
		Public Function armWaferCheck_checkStep(armList() As RobotArm, flag As Boolean, checkAllGripTypes As Boolean) As Boolean
			Return armWaferCheck_checkStep(armList,flag,checkAllGripTypes,0)
		End Function
		
		Public Function armWaferCheck_checkStep(arm As RobotArm, flag As Boolean, checkAllGripTypes As Boolean, maximumCheckTime_ms As Integer) As Boolean
			Dim armList(1) As RobotArm
			armList(0) = arm
			Return armWaferCheck_checkStep(armList,flag,checkAllGripTypes,maximumCheckTime_ms)
		End Function
		
		Public Function armWaferCheck_checkStep(armList() As RobotArm, flag As Boolean, checkAllGripTypes As Boolean, maximumCheckTime_ms As Integer) As Boolean
			Dim i,t,k As Integer
			Dim sensorCheckResult As Boolean = True
			Dim nowHandResult As Boolean = True
			Dim currentWaitTimer As New TimeStamp
			currentWaitTimer.startTimer()
			
			For i = 0 To armList.GetUpperBound(0) - 1
				nowHandResult = True
				
				If checkAllGripTypes = True Then ' can grip only one type
					If flag = True Then
						Do
							If armList(i).sensorCheck(True) = False Then
								nowHandResult = False
							Else
								nowHandResult = True
								Exit Do
							End If
							Thread.Sleep(10)
						Loop While currentWaitTimer.elapsedTime() < maximumCheckTime_ms
						If nowHandResult = True Then
							If armList(i).isUseextraGuideGrip = True Then
								armList(i).extraGuideGrip(True)
							End If
						Else
							sensorCheckResult = False
						End If
					Else
	 
						Dim targetTIndex As Integer
						Do
							targetTIndex = -1
							nowHandResult = True
							For t = armList(i).totalGripTypeCount To 1 Step -1 'after is first order. If after is grip, Then beore grip type will ungrip.
								If armList(i).sensorCheck(t,False) = False Then
									nowHandResult = False
									targetTIndex = t
									Exit For
								End If
							Next t
							If nowHandResult = True Then
								Exit Do
							End If
							Thread.Sleep(10)
						Loop While currentWaitTimer.elapsedTime() < maximumCheckTime_ms

						For t = armList(i).totalGripTypeCount To 1 Step -1
							If t <> targetTIndex Then
								If armList(i).defaultGripStage(t) = False Then
									If armList(i).isGrip(t) <> False Then
										armList(i).grip(t,False)
										  
										
								 
																			  
									 
																			
									End If
								End If
							End If
			   
			  
						Next t
						If nowHandResult = True Then
							If armList(i).isUseextraGuideGrip = True Then
								armList(i).extraGuideGrip(False)
							End If
						Else
							If armList(i).isUseextraGuideGrip = True Then
								armList(i).extraGuideGrip(True)
							End If
							sensorCheckResult = False
						End If
					End If
				
				Else ' can grip multiple object (ex> YEST)
					If flag = True Then
						Do
							If armList(i).sensorCheck(True) = False Then
								nowHandResult = False
							Else
								nowHandResult = True
								Exit Do
							End If
							Thread.Sleep(10)
						Loop While currentWaitTimer.elapsedTime() < maximumCheckTime_ms
						If nowHandResult = True Then
							If armList(i).isUseextraGuideGrip = True Then
								armList(i).extraGuideGrip(True)
							End If
						Else
							sensorCheckResult = False
						End If
					Else
						Do
							nowHandResult = True
							For t = 1 To armList(i).totalGripTypeCount
								If armList(i).sensorCheck(t,False) = False Then
									nowHandResult = False
									Exit For
								End If
							Next t
							If nowHandResult = True Then
								Exit Do
							End If
							Thread.Sleep(10)
						Loop While currentWaitTimer.elapsedTime() < maximumCheckTime_ms
						For t = 1 To armList(i).totalGripTypeCount
							If armList(i).sensorCheck(t,False) = True Then
								If armList(i).defaultGripStage(t) = False Then
									If armList(i).isGrip(t) <> False Then
										armList(i).grip(t,False)
									End If
								End If
							End If
						Next t
						If nowHandResult = True Then
							If armList(i).isUseextraGuideGrip = True Then
								armList(i).extraGuideGrip(False)
							End If
						Else
							If armList(i).isUseextraGuideGrip = True Then
								armList(i).extraGuideGrip(True)
							End If
							sensorCheckResult = False
						End If
					End If
				End If
			Next i
			
			Return sensorCheckResult
		End Function
		
		Public Function armWaferCheck(arm As RobotArm, flag As Boolean, checkAllGripTypes As Boolean) As Boolean
			Dim armList(1) As RobotArm
			armList(0) = arm
			Return armWaferCheck(armList,flag,checkAllGripTypes,0)
		End Function
		
		Public Function armWaferCheck(armList() As RobotArm, flag As Boolean, checkAllGripTypes As Boolean) As Boolean
			armWaferCheck_gripStep(armList,flag,True,checkAllGripTypes)
			Return armWaferCheck_checkStep(armList,flag,checkAllGripTypes,0)
		End Function
		
		Public Function armWaferCheck(arm As RobotArm, flag As Boolean, checkAllGripTypes As Boolean, maximumCheckTime_ms As Integer) As Boolean
			Dim armList(1) As RobotArm
			armList(0) = arm
			Return armWaferCheck(armList,flag,checkAllGripTypes,maximumCheckTime_ms)
		End Function
		
		Public Function armWaferCheck(armList() As RobotArm, flag As Boolean, checkAllGripTypes As Boolean, maximumCheckTime_ms As Integer) As Boolean
			armWaferCheck_gripStep(armList,flag,True,checkAllGripTypes)
			Return armWaferCheck_checkStep(armList,flag,checkAllGripTypes,maximumCheckTime_ms)
		End Function
		
		Public Sub allArmRetract()
			Dim armList() As RobotArm
			
			getRetractNeedArmList(armList)
			
			If armList Is Nothing Then
				Exit Sub
			End If
			
			armRetract(armList,TARGET_MODE)
		End Sub
		
		Public Sub armFlip(arm As RobotArm)
			armFlip(arm,False)
		End Sub
		
		Public Sub armFlip_deg(arm As RobotArm, flipAxisDegree As Double)
			armFlip(arm,flipAxisDegree,False)
		End Sub
		
		Public Sub armFlip_state(arm As RobotArm, side As Integer)
			If side = FlipDirection_FRONT Then
				armFlip_state(arm,side,False)
			ElseIf side = FlipDirection_BACK Then
				armFlip_state(arm,side,False)
			End If
		End Sub
		
		Public Sub armFlip_state(arm As RobotArm, side As Integer, flipNow As Boolean)
			If arm.isCanFlip = False Then
				Exit Sub
			End If
			
			If side = FlipDirection_FRONT Then
				armFlip(arm,0,flipNow)
			ElseIf side = FlipDirection_BACK Then
				Dim flipMin As Double = CDbl(thePDBManager.getPDB(PDB_MIN_SOFT_LIMIT,arm.flipControlAxis))
				If flipMin < -180 Then
					armFlip(arm,-180,flipNow)
				Else
					armFlip(arm,180,flipNow)
				End If
			End If
		End Sub
		
		Public Sub armFlip(arm As RobotArm, flipNow As Boolean)
			Dim nowFlipDirection As Integer = arm.currentFlipDirection()
			If nowFlipDirection = FlipDirection_FRONT Then
				armFlip_state(arm,FlipDirection_BACK,flipNow)
			ElseIf nowFlipDirection = FlipDirection_BACK Then
				armFlip_state(arm,FlipDirection_FRONT,flipNow)
			Else
				armFlip_state(arm,FlipDirection_FRONT,flipNow)
			End If
		End Sub
		
		Public Sub armFlip(arm As RobotArm, flipAxisDegree As Double, flipNow As Boolean)
			If arm.isCanFlip = False Then
				Exit Sub
			End If
		
			Dim nowFlipDirection As Integer = arm.currentFlipDirection()
			Dim targetFlipDirection As Integer = arm.checkFlipDirection(flipAxisDegree)
			
			If targetFlipDirection = FlipDirection_INVALID Then
				throwError(ERR_CANNOT_FLIP_ARM)
			End If
			
			Dim rotatePf As ProfileEx
			Dim noWafer_SafeTurn As Boolean = True
			
			If arm.SensorCheck(False) = True Then
				noWafer_SafeTurn = True
			Else
				noWafer_SafeTurn = False
			End If
			rotatePf = theProfileManager.getProfile(COORD_JOINT,noWafer_SafeTurn)
			
			Dim safeTurnLoc As LocationEx = thePointDataManager.getLocation(SAFE_TURN_POINT_INDEX)
			Dim curLoc As LocationEx = LocationEx.GetDestJointPos()
			
			If noWafer_SafeTurn = True Or _
			nowFlipDirection = targetFlipDirection Or _
			(arm.needToUseSafeRotatePosition = False And safeTurnLoc Is Nothing) Then
				If flipNow = True Then
					curLoc.loc.Angle(arm.flipControlAxis) = flipAxisDegree
					theMoveEx.Loc(curLoc, theProfileManager.getProfile(COORD_JOINT,True))
				End If
			Else
				If safeTurnLoc Is Nothing Then
					ThrowError(ERR_NO_DATA)
				End If
				safeTurnLoc.loc.angle(arm.flipControlAxis) = curLoc.loc.angle(arm.flipControlAxis)
				moveToLocation(safeTurnLoc,True,theProfileManager.getProfile(COORD_JOINT,False))
				theMoveEx.wait()
				
				curLoc = LocationEx.GetDestJointPos()
				curLoc.loc.Angle(arm.flipControlAxis) = flipAxisDegree
				theMoveEx.Loc(curLoc, theProfileManager.getProfile(COORD_JOINT,False))
				theMoveEx.wait()
				
				armRetract(arm, TARGET_MODE)
				theMoveEx.wait()
			End If
			
			arm.SetGripTypeIndex(targetFlipDirection,arm.typeListIndex)
		End Sub
		
		Public Sub armRetract(arm As RobotArm, mode As Integer)
			Dim armList(1) As RobotArm
			armList(0) = arm
			armRetract(armList,mode,TARGET_MODE)
		End Sub
		
		Public Sub armRetract(armList() As RobotArm, mode As Integer)
			armRetract(armList,mode,TARGET_MODE)
		End Sub
		
		Public Sub armRetract(armList() As RobotArm, mode As Integer, Zmode As Integer)
			Dim i As Integer
			Dim j As Integer = 0
			Dim ex As Exception
			Dim moveLoc As locationEx
			Dim curhand As Integer
			Dim curLoc As locationEx
			Dim homeLoc As LocationEx = thePointDataManager.getLocation(HOME_POINT_INDEX)
			Dim curJointLoc As locationEx = locationEx.GetDestJointPos()
			
			If armList.GetUpperBound(0) < 1 Then
				Exit Sub
			End If
			
			For i = 0 To armList.GetUpperBound(0) - 1
				If armList(i).SensorCheck(False) = False Then
					If armList(i).isCanFlip = True And armList(i).needToUseSafeRotatePosition = True Then
						Dim nowFlipDirection As Integer = armList(i).currentFlipDirection()	
						If nowFlipDirection = FlipDirection_INVALID Then
							throwError(ERR_CANNOT_FLIP_ARM)
						End If
					End If
				End If
			Next i
			
			Dim otherArmList() As RobotArm
			getOtherArmList_checkArmControlAxis(otherArmList,armList)
			
			For i = 0 To armList.GetUpperBound(0) - 1
				armList(i).prepareRetractArm(mode)
		  
			Next i
			
			If robotType = SCARA_TYPE  Then 
				Dim ScaraArmList() As RobotArm
				getAllArmList(ScaraArmList)
				curHand = FindNeedRetractArm()
				'''search safe pos
				setSelectedArmIndex(curHand)
	
				Dim curJointPos As LocationEx = locationEx.GetCurJointPos()
				
				If armCount <> 1 Then																			
					If curHand = 1 Then
						moveLoc = theStationManager.searchSafetyPos(theMotionLoger,ScaraArmList(0),ScaraArmList(1),mode)
					Else
						moveLoc = theStationManager.searchSafetyPos(theMotionLoger,ScaraArmList(1),ScaraArmList(0),mode)
					End If 
				Else
					moveLoc = theStationManager.searchSafetyPos(theMotionLoger,ScaraArmList(0),ScaraArmList(1),mode)
				End If
				
				If moveloc Is Nothing Then
					j = 0
					For i = 0 To ScaraArmList.GetUpperBound(0) - 1
						curLoc = locationEx.GetDestCartPos()
						If Math.Abs(homeLoc.loc.Angle(myRobot(Robot.Selected-1).ControlAxis("T")) - curJointLoc.loc.angle(myRobot(Robot.Selected-1).ControlAxis("T"))) < 30 Then
							If Math.Abs(homeLoc.loc.Angle(myRobot(Robot.Selected-1).ControlAxis("E")) - curJointLoc.loc.angle(myRobot(Robot.Selected-1).ControlAxis("E"))) < 30 Then
								If i = 0 Then
									If Math.Abs(homeLoc.loc.Angle(myRobot(Robot.Selected-1).ControlAxis("L")) - curJointLoc.loc.angle(myRobot(Robot.Selected-1).ControlAxis("L"))) < 30 Then
										j = j + 1
									End If
								Else
									If Math.Abs(homeLoc.loc.Angle(myRobot(Robot.Selected-1).ControlAxis("U")) - curJointLoc.loc.angle(myRobot(Robot.Selected-1).ControlAxis("U"))) < 30 Then
										j = j + 1
									End If
								End If
							End If
						End If
						If Math.Abs(homeloc.loc.angle(ScaraArmList(i).ControlAxis) - curJointLoc.loc.angle(ScaraArmList(i).ControlAxis)) < 180 _
							Or Math.Abs(homeloc.loc.angle(ScaraArmList(i).elbowControlAxis) - curJointLoc.loc.angle(ScaraArmList(i).elbowControlAxis)) < 180 Then
								j = j + 10	
						End If 
					Next i
					
					If j = 11*(ScaraArmList.GetUpperBound(0)) And theMotionLoger.laststage = "" Then	
						moveLoc = homeLoc.clone
						curJointPos.setCurrentFixedPosition()
						moveLoc.setCurrentFixedPosition()
						moveLoc.loc.Angle(myRobot(Robot.Selected-1).ControlAxis("T")) = curJointLoc.loc.Angle(myRobot(Robot.Selected-1).ControlAxis("T"))
						theMoveEx.Loc(moveLoc, theProfileManager.GetProfile(moveLoc.Type, True))
						theMoveEx.wait
						Exit Sub
					Else
						throwerror(ERR_RETRACT_RANGE_OUT)
					End If 
				Else
					j = 0
					For i = 0 To ScaraArmList.GetUpperBound(0) - 1
						curLoc = locationEx.GetDestCartPos()
						If Math.Abs(homeLoc.loc.Angle(myRobot(Robot.Selected-1).ControlAxis("T")) - curJointLoc.loc.angle(myRobot(Robot.Selected-1).ControlAxis("T"))) < 45 Then
							If Math.Abs(homeLoc.loc.Angle(myRobot(Robot.Selected-1).ControlAxis("E")) - curJointLoc.loc.angle(myRobot(Robot.Selected-1).ControlAxis("E"))) < 15 Then
								If i = 0 Then
									If Math.Abs(homeLoc.loc.Angle(myRobot(Robot.Selected-1).ControlAxis("L")) - curJointLoc.loc.angle(myRobot(Robot.Selected-1).ControlAxis("L"))) < 15 Then
										j = j + 1
									End If
								Else
									If Math.Abs(homeLoc.loc.Angle(myRobot(Robot.Selected-1).ControlAxis("U")) - curJointLoc.loc.angle(myRobot(Robot.Selected-1).ControlAxis("U"))) < 15 Then
										j = j + 1
									End If
								End If
							End If
						End If
						If Math.Abs(homeloc.loc.angle(ScaraArmList(i).ControlAxis) - curJointLoc.loc.angle(ScaraArmList(i).ControlAxis)) < 180 _
							Or Math.Abs(homeloc.loc.angle(ScaraArmList(i).elbowControlAxis) - curJointLoc.loc.angle(ScaraArmList(i).elbowControlAxis)) < 180 Then
								j = j + 10	
						End If 
					Next i
					
					If j = 11*(ScaraArmList.GetUpperBound(0)) Then	
						moveLoc = homeLoc.clone
						curJointPos.setCurrentFixedPosition()
						moveLoc.setCurrentFixedPosition()
						moveLoc.loc.Angle(myRobot(Robot.Selected-1).ControlAxis("T")) = curJointLoc.loc.Angle(myRobot(Robot.Selected-1).ControlAxis("T"))
						theMoveEx.Loc(moveLoc, theProfileManager.GetProfile(moveLoc.Type, True))
						theMoveEx.wait
						Exit Sub
					Else
						theMoveEx.Loc(moveloc, theProfileManager.GetProfile(moveloc.Type, fast))
						theMoveEx.wait
					End If
				End If 
				
				'''search safe pos
 			End If 
			
			Dim fast As Boolean
			If theProfileManager.useOnOffSpeedAsGetPutSpeed = False Then
				If mode = PUT_MODE Then
					fast = True
				Else
					fast = False
				End If
			Else
				If mode = PUT_MODE Then
					fast = True
				Else
					fast = False
				End If
			End If
			
			Dim lastStageIndex As Integer = theMotionLoger.lastStage
			Dim lastSlotIndex As Integer = theMotionLoger.lastSlot
			Dim lastArmPositionIndex As Integer = theMotionLoger.lastIndex
			Dim readyLoc As LocationEx = Nothing
			Dim curTeachingLoc As LocationEx = Nothing
			Dim lastTargetStage As Station = Nothing
			Dim targetTeachingPointCount As Integer
			
			If lastStageIndex <> 0 Then
				lastTargetStage = theStationManager.getStation(lastStageIndex)
				targetTeachingPointCount = lastTargetStage.teachingPointCountPerArm
				If lastTargetStage.needSetArmCustomValue(armList(0)) = True Then
					setSelectedArmIndex(theMotionLoger.lastSelectedArmIndex)
				End If
			Else
				targetTeachingPointCount = 1
			End If
			
			If lastArmPositionIndex = 0 Then
				lastArmPositionIndex = targetTeachingPointCount
			End If
			
			If (m_automaticRetractScaraArm = True) And (robotType = SCARA_TYPE And targetTeachingPointCount = 1) Then
				'scara auto retract arm
				readyLoc = LocationEx.GetDestCartPos()
				Dim cartHomeLoc As LocationEx
		
				If homeLoc.type = COORD_JOINT Then
					cartHomeLoc = homeLoc.kinesol
				Else
					cartHomeLoc = homeLoc.clone
				End If
				Dim diffRad As Double = Math.Atan2(readyLoc.loc.y,readyLoc.loc.x) - Math.Atan2(cartHomeLoc.loc.y,cartHomeLoc.loc.x)
				readyLoc.loc.x = Math.Cos(diffRad) * cartHomeLoc.loc.x - Math.Sin(diffRad) * cartHomeLoc.loc.y
				readyLoc.loc.y = Math.sin(diffRad) * cartHomeLoc.loc.x + Math.cos(diffRad) * cartHomeLoc.loc.y
				readyLoc.setCurrentFixedPosition()
				
				Dim code As Integer = 0
				errorHandler.ignoreCurrentSystemError = True
				errorHandler.clearError()
				Try
					If cartHomeLoc.loc.config <> readyLoc.loc.config Then
						readyLoc.loc.config = cartHomeLoc.loc.config
						theMoveEx.Loc(readyLoc, theProfileManager.GetProfile(COORD_JOINT, fast)) ' for not straight (joint)
					Else
						theMoveEx.Loc(readyLoc, theProfileManager.GetProfile(readyLoc.type, fast)) ' for not straight (joint)
						theMoveEx.motionOverlap(0,100)
					End If
'					theMoveEx.wait
				Catch ex
					If ex.ErrorCode = -1029 Or ex.ErrorCode = -1043 Then
						code = errorHandler.getCurrentSystemError().ErrorCode
					Else
						code = ex.ErrorCode
					End If
					If code = -1039 Or code = -1012 Then 'position too close (singlur point)
						errorHandler.clearError()
						autoAttach()
					Else
						Throw ex
					End If

				End Try
				errorHandler.ignoreCurrentSystemError = False

				Dim diffDeg As Double = readyLoc.loc.yaw - cartHomeLoc.loc.yaw
				While Math.Abs(diffDeg) > 180
					If diffDeg > 0 Then
						diffDeg = diffDeg - 360
					Else
						diffDeg = diffDeg + 360
					End If
				End While
				Dim tAxisIndex As Integer = controlAxis("T")
'				readyLoc = homeLoc.clone
'				readyLoc.loc.angle(tAxisIndex) = readyLoc.loc.angle(tAxisIndex) + diffDeg
'				readyLoc.setCurrentFixedPosition()
'				theMoveEx.Loc(readyLoc, theProfileManager.GetProfile(readyLoc.Type, fast))
			Else
				Try
					If theSystem.demoMode = 0 And mode = GET_MODE Then
						For i = 0 To armList.getUpperBound(0) - 1
							If armList(i).realtimeSlipCheckSensor <> 0 Then
		'						RobotArm.AddArmEventList(armList(i),RobotArm.EVENT_ARM_REALTIMESLIPCHECK)
		'						Move.Trigger(0, 0, RobotArm.ArmEventThread, RobotArm.EVENT_ARM_REALTIMESLIPCHECK)
								armList(i).realtimeSlipCheckStarted = True
							End If
						Next i
					End If
					
					'default retract arm
					For i = lastArmPositionIndex + 1 To targetTeachingPointCount + 1 Step 1
						If i = targetTeachingPointCount + 1 Then
							If robotType = WTR_TYPE Or robotType = FTR_TYPE Then
								If Zmode = GET_MODE Or Zmode = PUT_MODE Then
									Dim targetStation As Station = theStationManager.getStation(lastStageIndex)
									Dim ZmoveDestloc As locationEx = locationEx.GetCurJointPos
									Dim ZmoveLoc As locationEx = targetStation.readyLocation(lastSlotIndex,armList(0),Zmode)
									If Zmode = GET_MODE Then
										armGrip(armList,False,False)
										For j = 1 To zAxisCount
											ZmoveDestloc.loc.Angle(myRobot(Robot.Selected-1).zIndexToAxis(j)) = ZmoveLoc.loc.Angle(myRobot(Robot.Selected-1).zIndexToAxis(j))
										Next j 
										theMoveEx.Loc(ZmoveDestloc, theProfileManager.GetProfile(ZmoveLoc.Type, fast))
										theMoveEx.waitForEOM
										theMoveEx.Loc(ZmoveDestloc, theProfileManager.GetProfile(ZmoveLoc.Type, fast))
										theMoveEx.waitForEOM
									End If 
									If Zmode = PUT_MODE Then
										For j = 1 To zAxisCount
											ZmoveDestloc.loc.Angle(myRobot(Robot.Selected-1).zIndexToAxis(j)) = ZmoveLoc.loc.Angle(myRobot(Robot.Selected-1).zIndexToAxis(j))
										Next j 
										theMoveEx.Loc(ZmoveDestloc, theProfileManager.GetProfile(ZmoveLoc.Type, fast))
										theMoveEx.waitForEOM
										theMoveEx.Loc(ZmoveDestloc, theProfileManager.GetProfile(ZmoveLoc.Type, fast))
										theMoveEx.waitForEOM
										armGrip(armList,True,False)
									End If 
								End If 
								readyLoc = LocationEx.GetDestJointPos()
								'readyLoc = LocationEx.GetCurJointPos()
								readyLoc.setArmHomePosition(armList)
								readyLoc.setCurrentFixedPosition()
							ElseIf robotType = SCARA_TYPE Then
								' scara robot only retract to last ready point
								Exit For
							End If
						Else
							If armList.GetUpperBound(0) = 2 Then 
								curTeachingLoc = lastTargetStage.teachingLocation(1, armList(theMotionLoger.lastSelectedArmIndex-1), i-1)
								readyLoc = lastTargetStage.teachingLocation(1, armList(theMotionLoger.lastSelectedArmIndex-1), i)
							Else
								curTeachingLoc = lastTargetStage.teachingLocation(1, armList(0), i-1)
								readyLoc = lastTargetStage.teachingLocation(1, armList(0), i)
							End If 
							If (readyLoc Is Nothing) Or (curTeachingLoc Is Nothing) Then
								ThrowError(ERR_NO_DATA)
							End If
'							If readyLoc.Type = COORD_JOINT Then
'								Dim tempLoc As LocationEx = Nothing				
													   
'								For j = 1 To armList.getUpperBound(0) - 1
'									tempLoc = lastTargetStage.teachingLocation(1, armList(theMotionLoger.lastSelectedArmIndex-1), i)
'									If tempLoc Is Nothing Then
'										ThrowError(ERR_NO_DATA)
'									End If
'									readyLoc.loc.angle(armList(j).controlAxis) = tempLoc.loc.angle(armList(j).controlAxis)
'								Next j
'							End If
							
							readyLoc.setCurrentFixedPosition()
							
							If robotType <> SCARA_TYPE Then
								readyLoc.setArmHomePosition(otherArmList)
							End If
							
							If readyLoc.Type <> curTeachingLoc.type Then 'depend on now loc type
								readyLoc = readyLoc.kinesol()
							End If
						End If
						
'						theMoveEx.MotionOverlap(0,60)
						theMoveEx.Loc(readyLoc, theProfileManager.GetProfile(readyLoc.Type, fast))
						theMoveEx.MotionOverlap(0,30)
						
						If i <> targetTeachingPointCount + 1 Then
							theMoveEx.waitForAcceleratingUp(20)
							theMotionLoger.lastIndex = i-1
							'theMoveEx.waitForEOM
							'theMoveEx.waitForAlmostEOM
						End If
					Next i							
	 
				Catch ex
					Throw ex
				Finally
					If theSystem.demoMode = 0 And mode = GET_MODE Then
						For i = 0 To armList.getUpperBound(0) - 1
							If armList(i).realtimeSlipCheckSensor <> 0 Then
								theMoveEx.waitForEOM
								armList(i).realtimeSlipCheckStarted = False
							End If
						Next i
					End If
				End Try
			End If

			robotIO.resetDoorInterlock()
			theMotionLoger.lastIndex = 0
		End Sub
		
		Public Sub armExtend(stage As Integer, arm As RobotArm, mode As Integer)
			Dim armList(1) As RobotArm
			armList(0) = arm
			armExtend(stage,armList,mode,0)
		End Sub
		
		Public Sub armExtend(stage As Integer, armlist() As RobotArm, mode As Integer)
			armExtend(stage,armList,mode,0)
		End Sub
		
		Public Sub armExtend(stage As Integer, armList() As RobotArm, mode As Integer, offset As Double)
			Dim i As Integer
			Dim j As Integer
			Dim ex As Exception
			
			multipleArmCheck(armList)
			
			If (theMotionLoger.lastCommand = "GRDY" Or theMotionLoger.lastCommand = "PRDY" Or theMotionLoger.lastCommand = "TRDY") And _
				theMotionLoger.lastStage = stage Then
			Else
				ThrowError(ERR_NOT_READYPOS)
			End If
		 
   
			If theSystem.demoMode = 0 Then
				checkArmHomeSensor(theSystem.gripperMaximumTime)
				checkWaferSlipDetectingBar(theSystem.gripperMaximumTime)
			End If
			
			robotIO.selectDoorInterlock(stage)
			
			Dim fast As Boolean
			If theProfileManager.useOnOffSpeedAsGetPutSpeed = False Then
				If mode = PUT_MODE Then
					fast = False
				Else
					fast = True
				End If
			Else
				If mode = PUT_MODE Then
					fast = True
				Else
					fast = False
				End If
			End If

			Dim otherArmList() As RobotArm
			getOtherArmList_checkArmControlAxis(otherArmList,armList)
			
			Dim targetStage As Station = theStationManager.getStation(stage)
			Dim startPointIndex As Integer = targetStage.teachingPointCountPerArm
			If robotType = SCARA_TYPE And startPointIndex > 1 Then
				'scara already last teachingpoint when ready
				startPointIndex = startPointIndex - 1
			End If
			Dim readyLoc As LocationEx = Nothing
			Dim tempLoc As LocationEx = Nothing
			
			If targetStage.needSetArmCustomValue(armList(0)) = True Then
				setSelectedArmIndex(armList)
			End If
			
			Try
				If theSystem.crashDetectUse = 1 Then
					For i = 0 To armList.getUpperBound(0) - 1
						If armList(i).isUseCrashDetectSensor() = True Then
							RobotArm.AddArmEventList(armList(i),RobotArm.EVENT_ARM_CRASHCHECK)
							Move.Trigger(0, 10, RobotArm.ArmEventThread, RobotArm.EVENT_ARM_CRASHCHECK)
						End If
					Next i
				End If
				
				If theSystem.demoMode = 0 And mode = PUT_MODE Then
					For i = 0 To armList.getUpperBound(0) - 1
						If armList(i).realtimeSlipCheckSensor <> 0 Then
	'						RobotArm.AddArmEventList(armList(i),RobotArm.EVENT_ARM_REALTIMESLIPCHECK)
	'						Move.Trigger(0, 0, RobotArm.ArmEventThread, RobotArm.EVENT_ARM_REALTIMESLIPCHECK)
							armList(i).realtimeSlipCheckStarted = True
						End If
					Next i
				End If
				For i = startPointIndex To 1 Step -1
					readyLoc = targetStage.teachingLocation(theMotionLoger.lastSlot, armList(0), i)
					If readyLoc Is Nothing Then
						ThrowError(ERR_NO_DATA)
					End If
					
					If readyLoc.Type = COORD_JOINT Then
						For j = 1 To armList.getUpperBound(0) - 1
							tempLoc = targetStage.teachingLocation(theMotionLoger.lastSlot, armList(j), i)
							If tempLoc Is Nothing Then
								ThrowError(ERR_NO_DATA)
							End If
							readyLoc.loc.angle(armList(j).controlAxis) = tempLoc.loc.angle(armList(j).controlAxis)
						Next j
					End If
					
					If i = 1 Then
						If readyLoc.Type = COORD_JOINT Then
							For j = 0 To armList.getUpperBound(0) - 1
								If offset = 0 Then
									readyLoc = armList(j).prepareExtendArm(readyLoc,stage,mode)
								Else
									readyLoc = armList(j).prepareExtendArm(readyLoc,stage,mode,offset)
								End If
							Next j
						Else
							If offset = 0 Then
								readyLoc = armList(0).prepareExtendArm(readyLoc,stage,mode)
							Else
								readyLoc = armList(0).prepareExtendArm(readyLoc,stage,mode,offset)
							End If
						End If
					End If
					
					readyLoc.setCurrentFixedPosition(False)
					If robotType <> SCARA_TYPE Then
						readyLoc.setArmHomePosition(otherArmList)
					End If
					
					'Position Check before Arm extend 151214 bwjung
					PositionCheck(readyloc, "T")
					PositionCheck(readyloc, "V")
'	 				theMoveEx.waitForAcceleratingUp(50)
					theMoveEx.Loc(readyLoc, theProfileManager.GetProfile(readyLoc.Type, fast))
					theMoveEx.waitForAcceleratingUp(50)
					
					theMotionLoger.lastStage = stage
					theMotionLoger.lastIndex = i
					'Console.WriteLine("lastIndex = " + CStr(i))
				Next i
				If offset = 0 Then
					theMoveEx.waitForAlmostEOM
				Else
					theMoveEx.waitForEOM
				End If
			Catch ex
				Throw ex
			Finally
				If theSystem.crashDetectUse = 1 Then
					For i = 0 To armList.getUpperBound(0) - 1
						If armList(i).isUseCrashDetectSensor() = True Then
							theMoveEx.waitForEOM
							armList(i).crashDetectSensorOnOff(False)
						End If
					Next i
				End If
				
				If theSystem.demoMode = 0 And mode = PUT_MODE Then
					For i = 0 To armList.getUpperBound(0) - 1
						If armList(i).realtimeSlipCheckSensor <> 0 Then
							theMoveEx.waitForEOM
							armList(i).realtimeSlipCheckStarted = False
						End If
					Next i
				End If
			End Try
		End Sub
		
		Public Sub MaparmExtend(stage As Integer, armList() As RobotArm, mode As Integer)
			Dim i As Integer
			Dim j As Integer
			Dim ex As Exception
			
			multipleArmCheck(armList)
			
			If (theMotionLoger.lastCommand = "MRDY") And _
				theMotionLoger.lastStage = stage Then
			Else
				ThrowError(ERR_NOT_READYPOS)
			End If
			Dim otherArmList() As RobotArm
			getOtherArmList_checkArmControlAxis(otherArmList,armList)
			
			Dim targetStage As Station = theStationManager.getStation(stage)
			Dim startPointIndex As Integer = targetStage.teachingPointCountPerArm
			If robotType = SCARA_TYPE And startPointIndex > 1 Then
				'scara already last teachingpoint when ready
				startPointIndex = startPointIndex - 1
			End If
			Dim readyLoc As LocationEx = Nothing
			Dim tempLoc As LocationEx = Nothing
			
'			If targetStage.needSetArmCustomValue(armList(0)) = True Then
'				setSelectedArmIndex(armList)
'			End If

			Try
				
				For i = startPointIndex To 1 Step -1
					readyLoc = targetStage.MapteachingLocation(theMotionLoger.lastSlot, armList(0), i)
					If readyLoc Is Nothing Then
						ThrowError(ERR_NO_DATA)
					End If
					
					If readyLoc.Type = COORD_JOINT Then
						For j = 1 To armList.getUpperBound(0) - 1
							tempLoc = targetStage.MapteachingLocation(theMotionLoger.lastSlot, armList(j), i)
							If tempLoc Is Nothing Then
								ThrowError(ERR_NO_DATA)
							End If
							readyLoc.loc.angle(armList(j).controlAxis) = tempLoc.loc.angle(armList(j).controlAxis)
						Next j
					End If
					
					If i = 1 Then
						If readyLoc.Type = COORD_JOINT Then
							For j = 0 To armList.getUpperBound(0) - 1
								readyLoc = armList(j).prepareExtendArm(readyLoc,stage,mode)
							Next j
						Else
							readyLoc = armList(0).prepareExtendArm(readyLoc,stage,mode)
						End If
					End If
					
					readyLoc.setCurrentFixedPosition(False)
					If robotType <> SCARA_TYPE Then
						readyLoc.setArmHomePosition(otherArmList)
					End If
					
					'Position Check before Arm extend 151214 bwjung
					PositionCheck(readyloc, "T")
					PositionCheck(readyloc, "V")
						
					theMoveEx.Loc(readyLoc, theProfileManager.getMapProfile())
					
					theMoveEx.waitForAcceleratingUp(10)
					
					theMotionLoger.lastStage = stage
					theMotionLoger.lastIndex = i
					'Console.WriteLine("lastIndex = " + CStr(i))
				Next i
					  
				theMoveEx.waitForEOM
			Catch ex
				Throw ex
			Finally
			End Try
		End Sub
		
		Public Sub armExchange(stage As Integer, getArm As RobotArm, putArm As RobotArm)
			
			MotionCountTimer.MtionStartTimer()
			
			If robotType = WTR_TYPE And theStationManager.getStation(stage).isUseSmartMotion() = False Then
				
				Dim i As Integer
				Dim ex As Exception
				
				If (theMotionLoger.lastCommand = "GRDY" Or theMotionLoger.lastCommand = "PRDY" Or theMotionLoger.lastCommand = "TRDY") And _
					theMotionLoger.lastStage = stage Then
				Else
					ThrowError(ERR_NOT_READYPOS)
				End If
				
				If theSystem.demoMode = 0 Then
					If putArm.armHomeSensorIO <> 0 Then
						If robotIO.getDIO(putArm.armHomeSensorIO) = False Then
							ThrowError(ERR_NOT_READYPOS)
						End If
					End If
				End If
				
				robotIO.selectDoorInterlock(stage)
				
				Dim fast As Boolean = False 'put mode
				Dim otherArmList() As RobotArm
				getOtherArmList_checkArmControlAxis(otherArmList,putArm)
				
				''' turn with T
				Dim targetStage As Station = theStationManager.getStation(stage)
				Dim readyLoc As LocationEx = targetStage.teachingLocation(theMotionLoger.lastSlot, putArm, 1)
				readyLoc.setArmHomePosition(otherArmList)
				If readyLoc Is Nothing Then
					ThrowError(ERR_NO_DATA)
				End If
				readyLoc = putArm.prepareExtendArm(readyLoc,stage,PUT_MODE)

				''' not turn T
'				Dim targetStage As Station = theStationManager.getStation(stage)
'				Dim readyLoc As LocationEx = LocationEx.GetDestJointPos()
'				readyLoc.setArmHomePosition(otherArmList)
'				Dim putArmLocation As LocationEx = targetStage.teachingLocation(1, putArm, 1)
'				If putArmLocation Is Nothing Then
'					ThrowError(ERR_NO_DATA)
'				End If
'				readyLoc.loc.angle(putArm.controlAxis) = putArmLocation.loc.angle(putArm.controlAxis)
'				readyLoc = putArm.prepareExtendArm(readyLoc,stage,PUT_MODE)

				Try
					If theSystem.crashDetectUse = 1 Then
						If putArm.isUseCrashDetectSensor() = True Then
							RobotArm.AddArmEventList(putArm,RobotArm.EVENT_ARM_CRASHCHECK)
							Move.Trigger(0, 10, RobotArm.ArmEventThread, RobotArm.EVENT_ARM_CRASHCHECK)
						End If
					End If
					
					If theSystem.demoMode = 0 Then
						If putArm.realtimeSlipCheckSensor <> 0 Then
							putArm.realtimeSlipCheckStarted = True
						End If
						If getArm.realtimeSlipCheckSensor <> 0 Then
							getArm.realtimeSlipCheckStarted = True
						End If
					End If

					readyLoc.setCurrentFixedPosition(False)
					
					MotionCountTimer.MotionElapsedTime("PutReady")
					'extend and retract Start!!
					Dim stratArm As Double = Controller.Timer
					theMoveEx.Loc(readyLoc, theProfileManager.GetProfile(readyLoc.Type, fast))
					
					theMoveEx.waitForAcceleratingUp(10)
					
					theMotionLoger.lastStage = stage
					theMotionLoger.lastIndex = 1
					
					theMoveEx.waitForAlmostEOM
					Dim elp As Double = Controller.Timer - stratArm
					MotionCountTimer.PutArmExtendTime = Format(elp,".##")
					MotionCountTimer.MotionElapsedTime("GetRetract")
					
				Catch ex
					Throw ex
				Finally
					If theSystem.crashDetectUse = 1 Then
						If putArm.isUseCrashDetectSensor() = True Then
							theMoveEx.waitForEOM
							putArm.crashDetectSensorOnOff(False)
						End If
					End If
					
					If theSystem.demoMode = 0 Then
						If putArm.realtimeSlipCheckSensor <> 0 Then
							theMoveEx.waitForEOM
							putArm.realtimeSlipCheckStarted = False
						End If
						If getArm.realtimeSlipCheckSensor <> 0 Then
							theMoveEx.waitForEOM
							getArm.realtimeSlipCheckStarted = False
						End If
					End If
				End Try
						
			Else
			
'				Move.WaitForEOM 'for next overlap
'				armRetract(getArm,GET_MODE)
'				theMoveEx.forceOverlap(100)				
'				armExtend(stage,putArm,PUT_MODE)
			
			End If
		End Sub
		
		Public Sub autoZTeachingPointScan(stage As Integer, arm As RobotArm)
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim slotPitch As Double = targetStation.slotPitch
			Dim sumOfZPosition As Double = 0
			Dim i As Integer
			Dim ex As Exception
			Dim curLoc As LocationEx = LocationEx.GetCurJointPos()
			Dim startLoc As LocationEx = curLoc.clone
			Dim tryCount As Integer = 3
				
			readyGripTypeSettiing(stage,arm)
		
			For i = 1 To tryCount
				armGrip(arm,True,True)
	
				curLoc.liftUp(slotPitch)
				theMoveEx.loc(curLoc, theProfileManager.getZProfile(True))
				robotIO.rapidDecelSensorIO = arm.getFingerSensorGripIO(1) 	
				
				Move.waitForEOM 'for check rapidDecelSensorIO stop
				
				robotIO.rapidDecelSensorIO = 0
				armGrip(arm,False,True)

				curLoc = LocationEx.GetCurJointPos()
				sumOfZPosition = sumOfZPosition + curLoc.getZPosition()
				
				theMoveEx.loc(startLoc, theProfileManager.getZProfile(False))
				theMoveEx.waitForEOM
			Next i
				
			armGrip(arm,True,True)

			curLoc.setZPosition(sumOfZPosition / tryCount)
			theMoveEx.loc(curLoc, theProfileManager.getZProfile(True))
			theMoveEx.waitForEOM
			
			armWaferCheck(arm,False,False)
			
		End Sub
		
		Public Sub readyGripTypeSettiing(stage As Integer, arm As RobotArm)
			Dim armList(1) As RobotArm
			armList(0) = arm
			readyGripTypeSettiing(stage,armList)
		End Sub
		
		Public Sub readyGripTypeSettiing(stage As Integer, armList() As RobotArm)
			Dim targetStation As Station = theStationManager.getStation(stage)
			
			Dim i As Integer
			For i = 0 To armList.getupperBound(0) - 1
				If armList(i).isCanFlip = True Then
					Dim targetLocation As LocationEx = targetStation.teachingLocation(1,armList(i),1)
					Dim targetFlipDirection As Integer = armList(i).checkFlipDirection(targetLocation)
					armList(i).SetGripTypeIndex(targetFlipDirection,targetStation.typeListIndex)
				ElseIf armList(i).totalGripTypeCount > 1 Then
					armList(i).SetGripTypeIndex(targetStation.typeListIndex)
				End If
			Next i
		End Sub
		
		Public Sub moveToMapReady(stage As Integer, slot As Integer, armList() As RobotArm, mode As Integer)
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim fast As Boolean = True
			
			allArmRetract()
			theMoveEx.wait()
   
			Dim readyLocation As LocationEx = targetStation.MapreadyLocation(slot,armList(0),mode)
			
			If targetStation.inSpecialSequence <> "" Then
				lookAtLocation(readyLocation, theProfileManager.getMapProfile(), targetStation.inSpecialSequence)
																										   
			ElseIf theMotionLoger.lastStage <> 0 Then
				Dim lastStation As Station = theStationManager.getStation(theMotionLoger.lastStage)
				lookAtLocation(readyLocation, theProfileManager.getMapProfile(), lastStation.outSpecialSequence)
			Else
				lookAtLocation(readyLocation, theProfileManager.getMapProfile())
			End If
			
			If theStationManager.getStation(stage).needSetArmCustomValue(armList(0)) = True Then
				setSelectedArmIndex(armList)
			End If
			
			Select mode
			Case PUT_MODE
				theMotionLoger.lastCommand = "PRDY"
			Case GET_MODE
				theMotionLoger.lastCommand = "GRDY"
			Case TARGET_MODE
				theMotionLoger.lastCommand = "TRDY"
			End Select
			theMotionLoger.lastStage = stage
			theMotionLoger.lastSlot = slot
			theMotionLoger.lastSelectedArmIndex = getSelectedArmIndex()
		End Sub
		
		Public Sub moveToReady(stage As Integer, slot As Integer, armNumber As Integer, mode As Integer)
			Dim robotArmList() As RobotArm
			getArmList(robotArmList,armNumber)
			moveToReady(stage,slot,robotArmList,mode)
		End Sub
		
		Public Sub moveToReady(stage As Integer, slot As Integer, arm As RobotArm, mode As Integer)
			Dim armList(1) As RobotArm
			armList(0) = arm
			moveToReady(stage,slot,armList,mode)
		End Sub
		
		Public Sub moveToReady(stage As Integer, slot As Integer, armList() As RobotArm, mode As Integer)
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim homeLoc As LocationEx = thePointDataManager.getLocation(HOME_POINT_INDEX)
			Dim fast As Boolean = True
			
			If theProfileManager.useOnOffSpeedToReadySpeed = True Then
				Select mode
				Case PUT_MODE
					fast = False
				Case GET_MODE
					fast = True
				Case CROSS_MODE
					fast = False
					mode = GET_MODE
				Case TARGET_MODE
					fast = True
				End Select
			Else
				Select mode
				Case PUT_MODE
					fast = True
				Case GET_MODE
					fast = True
				Case CROSS_MODE
					fast = True
					mode = GET_MODE
				Case TARGET_MODE
					fast = True
				End Select
			End If
			
			targetStation.checkSlotNumber(slot,armList)
			readyGripTypeSettiing(stage,armList)
			
			If waferCheckOnReadyMotion = True And onlyWaferCheckWhenArmRetract = False Then
				'check wafer
				If theSystem.demoMode = 0 Then
					Select mode
					Case PUT_MODE
						If armWaferCheck(armList,True,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
							throwError(ERR_NO_WAFER_BEFORE_PUT)
						End If
					Case GET_MODE
						If armWaferCheck(armList,False,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
							throwError(ERR_WAFER_BEFORE_GET)
						End If
					End Select
				End If
			End If
			
'			allArmRetract()
'			theMoveEx.wait()
			
			If waferCheckOnReadyMotion = True And onlyWaferCheckWhenArmRetract = True Then
				theMoveEx.waitForEOM()
				'check wafer
				If theSystem.demoMode = 0 Then
					Select mode
					Case PUT_MODE
						If armWaferCheck(armList,True,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
							throwError(ERR_NO_WAFER_BEFORE_PUT)
						End If
					Case GET_MODE
						If armWaferCheck(armList,False,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
							throwError(ERR_WAFER_BEFORE_GET)
						End If
					End Select
				End If
			End If
			
			If ContinuousMotionMode = False Or waitCommandCompleteOnContinousMode = True Then
				theMoveEx.waitForEOM() 'after retract completly
			End If
			
			If theSystem.demoMode = 0 Then
				If ContinuousMotionMode = False Or waitCommandCompleteOnContinousMode = True Then
					checkArmHomeSensor(theSystem.gripperMaximumTime)
					checkWaferSlipDetectingBar(theSystem.gripperMaximumTime)
				End If
			End If
			
			Dim readyLocation As LocationEx = targetStation.readyLocation(slot,armList(0),mode)
			Dim curPos As locationEx = LocationEx.getCurJointPos()
			Dim tempLoc As locationEx
			Dim otherArmList() As RobotArm
			
			myRobot(Robot.Selected-1).getOtherArmList(otherArmList,armList)
			homeLoc.loc.angle(controlAxis("Z")) = readyLocation.loc.angle(controlAxis("Z"))
			
			
			If curPos.loc.angle(controlAxis("E")) > -170 And readyLocation.loc.angle(controlAxis("E")) > -170 Then
				If curPos.loc.angle(armList(0).controlAxis) > -170 And readyLocation.loc.angle(armList(0).controlAxis) > -170 Then
					
				ElseIf curPos.loc.angle(armList(0).controlAxis) < -190 And readyLocation.loc.angle(armList(0).controlAxis) < -190 Then
				
				Else
					lookAtLocation(homeLoc, theProfileManager.getReadyProfile(fast), targetStation.inSpecialSequence)
					theMoveEx.motionOverlap(100)
				End If
			ElseIf curPos.loc.angle(controlAxis("E")) < -190 And readyLocation.loc.angle(controlAxis("E")) < -190 Then
				If curPos.loc.angle(armList(0).controlAxis) > -170 And readyLocation.loc.angle(armList(0).controlAxis) > -170 Then
					
				ElseIf curPos.loc.angle(armList(0).controlAxis) < -190 And readyLocation.loc.angle(armList(0).controlAxis) < -190 Then
				
				Else
					lookAtLocation(homeLoc, theProfileManager.getReadyProfile(fast), targetStation.inSpecialSequence)
					theMoveEx.motionOverlap(100)
				End If
			Else
				lookAtLocation(homeLoc, theProfileManager.getReadyProfile(fast), targetStation.inSpecialSequence)
				theMoveEx.motionOverlap(100)
			End If
			
			If targetStation.inSpecialSequence <> "" Then
				lookAtLocation(readyLocation, theProfileManager.getReadyProfile(fast), targetStation.inSpecialSequence)
			ElseIf theMotionLoger.lastStage <> 0 Then
				Dim lastStation As Station = theStationManager.getStation(theMotionLoger.lastStage)
				lookAtLocation(readyLocation, theProfileManager.getReadyProfile(fast), lastStation.outSpecialSequence)
			Else
				lookAtLocation(readyLocation, theProfileManager.getReadyProfile(fast))
			End If
				  
			If theStationManager.getStation(stage).needSetArmCustomValue(armList(0)) = True Then
				setSelectedArmIndex(armList)
			End If

			Select mode
			Case PUT_MODE
				theMotionLoger.lastCommand = "PRDY"
			Case GET_MODE
				theMotionLoger.lastCommand = "GRDY"
			Case TARGET_MODE
				theMotionLoger.lastCommand = "TRDY"
			End Select
			theMotionLoger.lastStage = stage
			theMotionLoger.lastSlot = slot
			theMotionLoger.lastSelectedArmIndex = getSelectedArmIndex()
		End Sub
		
  
		Public Sub getWafer(stage As Integer, slot As Integer, armNumber As Integer)
			
			Dim robotArmList() As RobotArm
			getArmList(robotArmList,armNumber)
			getWafer(stage,slot,robotArmList)
		End Sub
		
		Public Sub getWafer(stage As Integer, slot As Integer, arm As RobotArm)
			Dim armList(1) As RobotArm
			armList(0) = arm
			getWafer(stage,slot,armList)
		End Sub
		
		Public Sub getWafer(stage As Integer, slot As Integer, armlist() As RobotArm)
			getWafer(stage,slot,armList,0)
		End Sub
		
		Public Sub getWafer(stage As Integer, slot As Integer, armList() As RobotArm, Offset As Double)
			Dim returnError As Integer = 0
			Dim i As Integer = 0
			
			MotionCountTimer.MtionStartTimer()
			
			multipleArmCheck(armList)
			
			readyGripTypeSettiing(stage,armList)
			
			If waferCheckOnReadyMotion = False And onlyWaferCheckWhenArmRetract = False Then
				'check wafer
				If theSystem.demoMode = 0 Then
					'bowon 150624
					'bowon 150819
					For i = 0 To armList.getUpperBound(0) - 1
						If armlist(i).waferPresenceSensorSpecialCheckIO <> 0 Then
							If (armWaferCheck(armList,False,checkForAllGripType,theSystem.gripperMaximumTime) = False) Or (waferPresenceSensorSpecialCheck(armList) = True) Then
								throwError(ERR_WAFER_BEFORE_GET)
							End If
						Else
							If armWaferCheck(armList,False,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
								throwError(ERR_WAFER_BEFORE_GET)
							End If
						End If
					Next i
				End If
			End If
			
									  
			moveToReady(stage,slot,armList,GET_MODE)
			
			If waitMoveReadyCompleteOnContinousMode = True Then
				theMoveEx.waitForEOM()			
			Else
				theMoveEx.motionOverlap(0,30)
				theMoveEx.wait()			
			End If
			
			If waferCheckOnReadyMotion = False And onlyWaferCheckWhenArmRetract = True Then
			'check wafer
				If theSystem.demoMode = 0 Then
					'bowon 150624
					'bowon 150819
					For i = 0 To armList.getUpperBound(0) - 1
						If armlist(i).waferPresenceSensorSpecialCheckIO <> 0 Then
							If (armWaferCheck(armList,False,checkForAllGripType,theSystem.gripperMaximumTime) = False) Or (waferPresenceSensorSpecialCheck(armList) = True) Then
								throwError(ERR_WAFER_BEFORE_GET)
							End If
						Else
							If armWaferCheck(armList,False,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
										   
								throwError(ERR_WAFER_BEFORE_GET)
																			   
										  
							End If
						End If
					Next i
				End If
			End If
			
			MotionCountTimer.MotionElapsedTime("GetReady")
			
			MotionCountTimer.MtionStartTimer()
			
			armGrip(armList,False,False)
			'2016-12-16 PJH add pusher home sensor check
			If theSystem.demoMode = 0 And ExtendGripWaitFlg = True Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
						throwError(ERR_CANNOT_UNGRIP)
					End If
				Next i					 
			End If
			extraGuideGrip(armList,False)			
			
			If offset = 0 Then
				armExtend(stage,armList,GET_MODE)
			Else
				armExtend(stage,armList,GET_MODE,offset)
			End If
			
'			theMoveEx.wait()
			MotionCountTimer.MotionElapsedTime("GetArmExtend")
			
			MotionCountTimer.MtionStartTimer()
			
			returnError = armList(0).getWafer(stage,armList)
			
'			theMoveEx.wait()
			MotionCountTimer.MotionElapsedTime("GetUp")

			MotionCountTimer.Grip = GripTimer.Grip
			
			MotionCountTimer.MtionStartTimer()
			If stopWhenGetPutError = True Then
				If returnError <> 0 Then
					throwError(returnError)
				End If
			End If
			
			If returnError <> 0 Then
				armRetract(armList,PUT_MODE)
			Else				
				armRetract(armList,GET_MODE)
			End If			
'			theMoveEx.wait()
			
			theMotionLoger.lastCommand = "GET"
			MotionCountTimer.MotionElapsedTime("GetRetract")
			
			For i = 0 To armList.getUpperBound(0) - 1
				armList(i).afterRetractArm(GET_MODE)
			Next i
			
			If returnError <> 0 Then
				throwError(returnError)
			End If
			
			If ContinuousMotionMode = False Or waitCommandCompleteOnContinousMode = True Then
				theMoveEx.waitForEOM() 'after retract completly
			End If
			
			If theSystem.demoMode = 0 Then
				'bowon 150819
				For i = 0 To armList.getUpperBound(0) - 1
					If armlist(i).waferPresenceSensorSpecialCheckIO <> 0 Then
						If (armWaferCheck_checkStep(armList,True,checkForAllGripType,theSystem.gripperMaximumTime) = False) And (waferPresenceSensorSpecialCheck(armList) = False) Then
							throwError(ERR_NO_WAFER_AFTER_GET)
						End If
					Else
						If armWaferCheck_checkStep(armList,True,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
							throwError(ERR_NO_WAFER_AFTER_GET)
						End If
					End If
				Next i
				If ContinuousMotionMode = False Or waitCommandCompleteOnContinousMode = True Then
					checkArmHomeSensor(theSystem.gripperMaximumTime)
					checkWaferSlipDetectingBar(theSystem.gripperMaximumTime)
				End If
			End If
			theMotionLoger.lastStage = stage
		End Sub
		
		Public Sub getExtendWafer(stage As Integer, slot As Integer, armList() As RobotArm, gripNow As Boolean)
			getExtendWafer(stage, slot, armList, gripNow, 0)
		End Sub
						
		Public Sub getExtendWafer(stage As Integer, slot As Integer, armList() As RobotArm, gripNow As Boolean, offset As Double)
			Dim returnError As Integer = 0
			Dim i As Integer = 0
			multipleArmCheck(armList)
			
			readyGripTypeSettiing(stage,armList)
			
			If waferCheckOnReadyMotion = False And onlyWaferCheckWhenArmRetract = False Then
				'check wafer
				If theSystem.demoMode = 0 Then
					'bowon 150624
					'bowon 150819
					For i = 0 To armList.getUpperBound(0) - 1
						If armlist(i).waferPresenceSensorSpecialCheckIO <> 0 Then
							If (armWaferCheck(armList,False,checkForAllGripType,theSystem.gripperMaximumTime) = False) Or (waferPresenceSensorSpecialCheck(armList) = True) Then
								throwError(ERR_WAFER_BEFORE_GET)
							End If
						Else
							If armWaferCheck(armList,False,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
								throwError(ERR_WAFER_BEFORE_GET)
							End If
						End If
					Next i 
				End If
			End If
			
			moveToReady(stage,slot,armList,GET_MODE)
			If waitMoveReadyCompleteOnContinousMode = True Then
				theMoveEx.waitForEOM()
			Else
				theMoveEx.wait()
			End If
			
			If waferCheckOnReadyMotion = False And onlyWaferCheckWhenArmRetract = True Then
				'check wafer
				
				If theSystem.demoMode = 0 Then
					'bowon 150624
					'bowon 150819
					For i = 0 To armList.getUpperBound(0) - 1
						If armlist(i).waferPresenceSensorSpecialCheckIO <> 0 Then
							If (armWaferCheck(armList,False,checkForAllGripType,theSystem.gripperMaximumTime) = False) Or (waferPresenceSensorSpecialCheck(armList) = True) Then
								throwError(ERR_WAFER_BEFORE_GET)
							End If
						Else
							If armWaferCheck(armList,False,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
								throwError(ERR_WAFER_BEFORE_GET)
							End If
						End If
					Next i 
				End If
			End If
			
			armGrip(armList,False,False)
			extraGuideGrip(armList,False)
			If offset = 0 Then
				armExtend(stage,armList,GET_MODE)
			Else
				armExtend(stage,armList,GET_MODE,offset)
			End If
			theMoveEx.wait()
			
			returnError = armList(0).getWafer(stage,armList,EXTA_STEP,gripNow)
			
			theMoveEx.wait()
			
			theMotionLoger.lastCommand = "GAEXTA"
			
			If returnError <> 0 Then
				throwError(returnError)
			End If
		End Sub
		
		Public Sub getRetractWafer(stage As Integer, slot As Integer, armList() As RobotArm)
			Dim mode As Integer = RETA_STEP
			getRetractWafer(stage, slot, armlist, mode)
		End Sub
		
		Public Sub getRetractWafer(stage As Integer, slot As Integer, armList() As RobotArm, mode As Integer)
			Dim returnError As Integer = 0
			Dim i As Integer = 0
			
			If theMotionLoger.lastCommand = "GAEXTA" And theMotionLoger.lastStage = stage Then
			Else
				ThrowError(ERR_INTERLOCK)
			End If
			
			returnError = armList(0).getWafer(stage,armList,mode,False)
'			theMoveEx.wait()
			
			armRetract(armList,GET_MODE)
'			theMoveEx.wait()
			
			theMotionLoger.lastCommand = "GET"
			
			If mode = RECO_STEP Then
			Else
				For i = 0 To armList.getUpperBound(0) - 1
					armList(i).afterRetractArm(GET_MODE)
				Next i
			End If
			
			If returnError <> 0 Then
				throwError(returnError)
			End If
			
			If ContinuousMotionMode = False Or waitCommandCompleteOnContinousMode = True Then
				theMoveEx.waitForEOM() 'after retract completly
			End If
			
			If theSystem.demoMode = 0 And mode <> RECO_STEP Then
				'bowon 150819
				For i = 0 To armList.getUpperBound(0) - 1
					If armlist(i).waferPresenceSensorSpecialCheckIO <> 0 Then
						If (armWaferCheck_checkStep(armList,True,checkForAllGripType,theSystem.gripperMaximumTime) = False) And (waferPresenceSensorSpecialCheck(armList) = False) Then
							throwError(ERR_NO_WAFER_AFTER_GET)
						End If
					Else
						If armWaferCheck_checkStep(armList,True,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
							throwError(ERR_NO_WAFER_AFTER_GET)
						End If
					End If
				Next i 
				If ContinuousMotionMode = False Or waitCommandCompleteOnContinousMode = True Then
					checkArmHomeSensor(theSystem.gripperMaximumTime)
					checkWaferSlipDetectingBar(theSystem.gripperMaximumTime)
				End If
			End If
		End Sub
		
		Public Sub putWafer(stage As Integer, slot As Integer, armNumber As Integer)
			Dim robotArmList() As RobotArm
			getArmList(robotArmList,armNumber)
			putWafer(stage,slot,robotArmList,False,0)
		End Sub
		Public Sub putWafer(stage As Integer, slot As Integer, arm As RobotArm)
			Dim armList(1) As RobotArm
			armList(0) = arm
			putWafer(stage,slot,armList,False,0)
		End Sub
		
		Public Sub putWafer(stage As Integer, slot As Integer, armNumber As Integer, useUpsideMotion As Boolean)
			Dim robotArmList() As RobotArm
			getArmList(robotArmList,armNumber)
			putWafer(stage,slot,robotArmList,useUpsideMotion,0)
		End Sub
		
		Public Sub putWafer(stage As Integer, slot As Integer, arm As RobotArm, useUpsideMotion As Boolean)
			Dim armList(1) As RobotArm
			armList(0) = arm
			putWafer(stage,slot,armList,useUpsideMotion,0)
		End Sub
		
		Public Sub putWafer(stage As Integer, slot As Integer, armList() As RobotArm)
			putWafer(stage,slot,armList,False,0)
		End Sub
		
		Public Sub putWafer(stage As Integer, slot As Integer, armList() As RobotArm, useUpsidemotion As Boolean)
			putWafer(stage,slot,armList,False,0)
		End Sub
		
		Public Sub putWafer(stage As Integer, slot As Integer, armList() As RobotArm, useUpsideMotion As Boolean, Offset As Double)
			Dim returnError As Integer = 0
			Dim i As Integer = 0
			
			MotionCountTimer.MtionStartTimer()
			
			multipleArmCheck(armList)
			
			readyGripTypeSettiing(stage,armList)
							 
			
			If waferCheckOnReadyMotion = False And onlyWaferCheckWhenArmRetract = False Then
				'check wafer
				If theSystem.demoMode = 0 Then
					'bowon 150819
					For i = 0 To armList.getUpperBound(0) - 1
						If armlist(i).waferPresenceSensorSpecialCheckIO <> 0 Then
							If (armWaferCheck(armList,True,checkForAllGripType,theSystem.gripperMaximumTime) = False) And (waferPresenceSensorSpecialCheck(armList) = False) Then
								throwError(ERR_NO_WAFER_BEFORE_PUT)
							End If					
						Else
							If armWaferCheck(armList,True,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
								throwError(ERR_NO_WAFER_BEFORE_PUT)
							End If
						End If
					Next i 
				End If
			End If
			moveToReady(stage,slot,armList,PUT_MODE)
			If waitMoveReadyCompleteOnContinousMode = True Then
				theMoveEx.waitForEOM()
			Else
'				theMoveEx.wait()
				theMoveEx.motionOverlap(0,30)
			End If
			
			
			If waferCheckOnReadyMotion = False And onlyWaferCheckWhenArmRetract = False Then
				'check wafer
				If theSystem.demoMode = 0 Then
					'bowon 150819
					For i = 0 To armList.getUpperBound(0) - 1
						If armlist(i).waferPresenceSensorSpecialCheckIO <> 0 Then
							If (armWaferCheck(armList,True,checkForAllGripType,theSystem.gripperMaximumTime) = False) And (waferPresenceSensorSpecialCheck(armList) = False) Then
								throwError(ERR_NO_WAFER_BEFORE_PUT)
							End If					
						Else
							If armWaferCheck(armList,True,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
								throwError(ERR_NO_WAFER_BEFORE_PUT)
							End If
						End If
					Next i 
				End If
			End If
			
			MotionCountTimer.MotionElapsedTime("PutReady")
			MotionCountTimer.MtionStartTimer()
			If offset = 0 Then
				armExtend(stage,armList,PUT_MODE)
			Else
				armExtend(stage,armList,PUT_MODE,offset)
			End If
			
'			theMoveEx.wait()
			MotionCountTimer.MotionElapsedTime("PutArmExtend")
			MotionCountTimer.MtionStartTimer()
			returnError = armList(0).putWafer(stage,armList,ALL_STEP,useUpsideMotion)
'			theMoveEx.wait()
			MotionCountTimer.Ungrip = GripTimer.Ungrip
			
			If stopWhenGetPutError = True Then
				If returnError <> 0 Then
					throwError(returnError)
				End If
			End If
			
			MotionCountTimer.MotionElapsedTime("PutDown")	
			
			MotionCountTimer.MtionStartTimer()
			If returnError <> 0 Then
				armRetract(armList,GET_MODE)
			Else
				armRetract(armList,PUT_MODE)
			End If			
'			theMoveEx.wait()
			
			MotionCountTimer.MotionElapsedTime("PutRetract")
			armGrip(armList,True,False)
			For i = 0 To armList.getUpperBound(0) - 1
				armList(i).afterRetractArm(PUT_MODE)
			Next i
			
			theMotionLoger.lastCommand = "PUT"
			
			
			If returnError <> 0 Then
				throwError(returnError)
			End If
			
			If ContinuousMotionMode = False Or waitCommandCompleteOnContinousMode = True Then
				theMoveEx.waitForEOM() 'after retract completly
			End If
			
			If theSystem.demoMode = 0 Then
				'bowon 150624
				'bowon 150819
				For i = 0 To armList.getUpperBound(0) - 1
					If armlist(i).waferPresenceSensorSpecialCheckIO <> 0 Then
						If (waferPresenceSensorSpecialCheck(armList) = True) Or (armWaferCheck_checkStep(armList,False,checkForAllGripType,theSystem.gripperMaximumTime) = False) Then
							throwError(ERR_WAFER_AFTER_PUT)
						End If
					Else
						If armWaferCheck_checkStep(armList,False,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
							throwError(ERR_WAFER_AFTER_PUT)
						End If
					End If 
				Next i 
				If ContinuousMotionMode = False Or waitCommandCompleteOnContinousMode = True Then
					checkArmHomeSensor(theSystem.gripperMaximumTime)
					checkWaferSlipDetectingBar(theSystem.gripperMaximumTime)
				End If
			End If
			
		End Sub
		
		Public Sub putExtendWafer(stage As Integer, slot As Integer, armList() As RobotArm, useUpsideMotion As Boolean)
			putExtendWafer(stage, slot, armList, useUpsideMotion,0)	
		End Sub
		
		Public Sub putExtendWafer(stage As Integer, slot As Integer, armList() As RobotArm, useUpsideMotion As Boolean, offset As Double)
			putExtendWafer(stage, slot, armList, useUpsideMotion,0, False)	
		End Sub
		
		Public Sub putExtendWafer(stage As Integer, slot As Integer, armList() As RobotArm, useUpsideMotion As Boolean, offset As Double, gripnow As Boolean)
			Dim returnError As Integer = 0
			Dim i As Integer = 0
			multipleArmCheck(armList)
			
			readyGripTypeSettiing(stage,armList)
			
			If waferCheckOnReadyMotion = False And onlyWaferCheckWhenArmRetract = False Then
				'check wafer
				If theSystem.demoMode = 0 Then
					'bowon 150819
					For i = 0 To armList.getUpperBound(0) - 1
						If armlist(i).waferPresenceSensorSpecialCheckIO <> 0 Then
							If (armWaferCheck(armList,True,checkForAllGripType,theSystem.gripperMaximumTime) = False) And (waferPresenceSensorSpecialCheck(armList) = False) Then
								throwError(ERR_NO_WAFER_BEFORE_PUT)
							End If	
						Else
							If armWaferCheck(armList,True,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
								throwError(ERR_NO_WAFER_BEFORE_PUT)
							End If
						End If 
					Next i
				End If
			End If
			
			moveToReady(stage,slot,armList,PUT_MODE)
			If waitMoveReadyCompleteOnContinousMode = True Then
				theMoveEx.waitForEOM()
			Else
				theMoveEx.wait()
			End If
			
			If waferCheckOnReadyMotion = False And onlyWaferCheckWhenArmRetract = False Then
				'check wafer
				If theSystem.demoMode = 0 Then
					'bowon 150819
					For i = 0 To armList.getUpperBound(0) - 1
						If armlist(i).waferPresenceSensorSpecialCheckIO <> 0 Then
							If (armWaferCheck(armList,True,checkForAllGripType,theSystem.gripperMaximumTime) = False) And (waferPresenceSensorSpecialCheck(armList) = False) Then
								throwError(ERR_NO_WAFER_BEFORE_PUT)
							End If	
						Else
							If armWaferCheck(armList,True,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
								throwError(ERR_NO_WAFER_BEFORE_PUT)
							End If
						End If 
					Next i
				End If
			End If
			
			If offset = 0 Then
				armExtend(stage,armList,PUT_MODE)
			Else
				armExtend(stage,armList,PUT_MODE,offset)
			End If
			theMoveEx.wait()
			
			returnError = armList(0).putWafer(stage,armList,EXTA_STEP,useUpsideMotion,gripnow)
			
			theMoveEx.wait()
			
			theMotionLoger.lastCommand = "PAEXTA"
			
			If returnError <> 0 Then
				throwError(returnError)
			End If
		End Sub
		
		Public Sub putRetractWafer(stage As Integer, slot As Integer, armList() As RobotArm, useUpsideMotion As Boolean)
			Dim mode As Integer = RETA_STEP
			putRetractWafer(stage, slot, armlist, useUpsideMotion, mode)
		End Sub
		
		Public Sub putRetractWafer(stage As Integer, slot As Integer, armList() As RobotArm, useUpsideMotion As Boolean, mode As Integer)
			Dim returnError As Integer = 0
			Dim i As Integer = 0
			
			If theMotionLoger.lastCommand = "PAEXTA" And theMotionLoger.lastStage = stage Then
			Else
				ThrowError(ERR_INTERLOCK)
			End If
			
			returnError = armList(0).putWafer(stage,armList,mode,useUpsideMotion)
			theMoveEx.wait()
			
			armRetract(armList,PUT_MODE)
			theMoveEx.wait()
			
			theMotionLoger.lastCommand = "PUT"
			
			If mode = RECO_STEP Then
			Else
				For i = 0 To armList.getUpperBound(0) - 1
					armList(i).afterRetractArm(PUT_MODE)
				Next i
			End If
			
			If returnError <> 0 Then
				throwError(returnError)
			End If
			
			If ContinuousMotionMode = False Or waitCommandCompleteOnContinousMode = True Then
				theMoveEx.waitForEOM() 'after retract completly
			End If
			
			If theSystem.demoMode = 0 And mode <> RECO_STEP Then
				'bowon 150624 
				'bowon 150819
				For i = 0 To armList.getUpperBound(0) - 1
					If armlist(i).waferPresenceSensorSpecialCheckIO <> 0 Then
						If (waferPresenceSensorSpecialCheck(armList) = True) Or (armWaferCheck_checkStep(armList,False,checkForAllGripType,theSystem.gripperMaximumTime) = False) Then
							throwError(ERR_WAFER_AFTER_PUT)
						End If
					Else
						If armWaferCheck_checkStep(armList,False,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
							throwError(ERR_WAFER_AFTER_PUT)
						End If
					End If 
				Next i
				If ContinuousMotionMode = False Or waitCommandCompleteOnContinousMode = True Then
					checkArmHomeSensor(theSystem.gripperMaximumTime)
					checkWaferSlipDetectingBar(theSystem.gripperMaximumTime)
				End If
			End If
		End Sub
		
		Public Sub crossWafer(stage As Integer, slot As Integer, getArm As RobotArm)
			Dim putArm As RobotArm
			If armCount <= getArm.armIndex Then
				putArm = m_arm((getArm.armIndex-1)-1) 'the other arm
			Else
				putArm = m_arm((getArm.armIndex+1)-1) 'the other arm
			End If
			
			crossWafer(stage,slot,getArm,putArm)
		End Sub
		
		Public Sub crossWafer(stage As Integer, slot As Integer, getArm As RobotArm, putArm As RobotArm)			
			If getArm.fingerCount > 1 Or putArm.fingerCount > 1 Then
				throwError(ERR_INVALID_HAND_TYPE)
			End If
			
			MotionCountTimer.MtionStartTimer()
			
			getArm.selectedFingerIndex = 1
			putArm.selectedFingerIndex = 1
			
			Dim armList(2) As RobotArm
			armList(0) = getArm
			armList(1) = putArm
		
			Dim getSensorCheckResult As Boolean = True
			Dim putSensorCheckResult As Boolean = True
			Dim getReturnError As Integer = 0
			Dim putReturnError As Integer = 0
			Dim targetstation As station = thestationManager.getstation(stage)
			Dim i As Integer
			Dim start As Double
			Dim elap As Double
			
			readyGripTypeSettiing(stage,armList)
			
			If onlyWaferCheckWhenArmRetract = False Then
				'check wafer
				If theSystem.demoMode = 0 Then
					armWaferCheck_gripStep(getArm,False,False,checkForAllGripType)
					armWaferCheck_gripStep(putArm,True,True,checkForAllGripType)
					getSensorCheckResult = armWaferCheck(getArm,False,checkForAllGripType,theSystem.gripperMaximumTime)
					putSensorCheckResult = armWaferCheck(putArm,True,checkForAllGripType,theSystem.gripperMaximumTime)
					If getSensorCheckResult = False Then
						throwError(ERR_WAFER_BEFORE_GET)
					End If
					If putSensorCheckResult = False Then
						throwError(ERR_NO_WAFER_BEFORE_PUT)
					End If
				End If
			End If
			theMoveEx.MotionOverlap(0,60)
			moveToReady(stage,slot,getArm,CROSS_MODE) 'for slow speed CROSS_MODE because other side hand has wafer
'			If waitMoveReadyCompleteOnContinousMode = True Then
'				theMoveEx.waitForEOM()
'			Else
'				theMoveEx.wait()
'			End If
			MotionCountTimer.MotionElapsedTime("GetReady")
			
			MotionCountTimer.MtionStartTimer()
			
			If onlyWaferCheckWhenArmRetract = True Then
				'check wafer
				If theSystem.demoMode = 0 Then
					armWaferCheck_gripStep(getArm,False,False,checkForAllGripType)
					armWaferCheck_gripStep(putArm,True,True,checkForAllGripType)
					getSensorCheckResult = armWaferCheck(getArm,False,checkForAllGripType,theSystem.gripperMaximumTime)
					putSensorCheckResult = armWaferCheck(putArm,True,checkForAllGripType,theSystem.gripperMaximumTime)
					If getSensorCheckResult = False Then
						throwError(ERR_WAFER_BEFORE_GET)
					End If
					If putSensorCheckResult = False Then
						throwError(ERR_NO_WAFER_BEFORE_PUT)
					End If
				End If
			End If
			
			armGrip(getArm,False,False)
			
			armExtend(stage,getArm,GET_MODE)
'			theMoveEx.wait()
			
			MotionCountTimer.MotionElapsedTime("GetArmExtend")
			
			
			Dim loc As LocationEx = LocationEx.GetDestJointPos()
			Dim putReadyLoc As LocationEx = theStationManager.getStation(stage).readyLocation(slot,putArm,PUT_MODE)

			'first exchange , and next Z down
			MotionCountTimer.MtionStartTimer()
			getReturnError = getArm.getWafer(stage,getArm)
			MotionCountTimer.Grip = GripTimer.Grip
'			theMoveEx.wait()
			
			MotionCountTimer.MotionElapsedTime("GetUp")
		
			If getReturnError <> 0 Then
				If stopWhenGetPutError = False Then
					armRetract(getArm,GET_MODE)
					theMoveEx.waitForEOM()
				End If
				throwError(getReturnError)
			End If
			''''''''''''''''''''''''''''''''''''''''''''''''''''''
			'armExchange(stage,getArm,putArm)
			armRetract(getArm,CROSS_MODE)
			theMoveEx.MotionOverlap(30)
		
			getArm.afterRetractArm(GET_MODE)
			
			
			
			If theSystem.demoMode = 0 Then
				If armWaferCheck(getArm,True,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
					If stopWhenGetPutError = False Then
						armRetract(putArm,GET_MODE)
						theMoveEx.waitForEOM()
					End If
					throwError(ERR_NO_WAFER_AFTER_GET)
				End If
			End If
			
			loc = LocationEx.GetDestJointPos(False)
			loc.setZPosition(putReadyLoc.getZPosition())
			
			loc.loc.angle(putarm.controlaxis) = putreadyLoc.loc.angle(putarm.controlaxis)
			loc.loc.angle(getarm.controlaxis) = putreadyLoc.loc.angle(getarm.controlaxis)
			theMoveEx.Loc(loc, theProfileManager.GetProfile(loc.Type,False))
			theMoveEx.waitForEOM()
			moveToReady(stage,slot,putArm,PUT_MODE)
			theMoveEx.MotionOverlap(100)
			armExtend(stage,putArm,PUT_MODE)
			theMoveEx.wait()
			
			If theSystem.demoMode = 0 Then
				If armWaferCheck(getArm,True,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
					If stopWhenGetPutError = False Then
						armRetract(putArm,GET_MODE)
						theMoveEx.waitForEOM()
					End If
					throwError(ERR_NO_WAFER_AFTER_GET)
				End If
			End If
			
			' --- second put
			MotionCountTimer.MtionStartTimer()
			putReturnError = putArm.putWafer(stage,putArm)
			MotionCountTimer.Ungrip = GripTimer.Ungrip
			
'			theMoveEx.wait()
			MotionCountTimer.MotionElapsedTime("PutDown")
			
			MotionCountTimer.MtionStartTimer()
			If stopWhenGetPutError = True Then
				If putReturnError <> 0 Then
					throwError(putReturnError)
				End If
			End If
			
			If putReturnError <> 0 Then
				armRetract(putArm,GET_MODE)
			Else
				armRetract(putArm,PUT_MODE)
			End If
'			theMoveEx.wait()
			
			MotionCountTimer.MotionElapsedTime("PutRetract")
			theMotionLoger.lastCommand = "PUT"	
			
			putArm.afterRetractArm(PUT_MODE)
			
			If putReturnError <> 0 Then
				theMoveEx.waitForEOM()
				throwError(putReturnError)
			End If
			' second put ---			
					
			If ContinuousMotionMode = False Or waitCommandCompleteOnContinousMode = True Then
				theMoveEx.waitForEOM() 'after retract completly
				MotionCountTimer.MotionElapsedTime("PutRetract")
			End If
			
			If theSystem.demoMode = 0 Then
				If armWaferCheck(putArm, False, checkForAllGripType,theSystem.gripperMaximumTime) = False Then
					throwError(ERR_WAFER_AFTER_PUT)
				End If
				If armWaferCheck(getArm,True,checkForAllGripType,theSystem.gripperMaximumTime) = False Then
					throwError(ERR_NO_WAFER_AFTER_GET)
				End If
				If ContinuousMotionMode = False Or waitCommandCompleteOnContinousMode = True Then
					checkArmHomeSensor(theSystem.gripperMaximumTime)
					checkWaferSlipDetectingBar(theSystem.gripperMaximumTime)
				End If
			End If			
		End Sub

		Public Function waferPresenceSensorSpecialCheck(armList() As RobotArm) As Boolean
		'bowon 150624
			Dim i As Integer
			Dim presenceCheckResult As Boolean = False
			For i = 0 To armList.getUpperBound(0) - 1
					If robotIO.getDIO(armlist(i).waferPresenceSensorSpecialCheckIO) = True Then	
						presenceCheckResult = True
					End If
			Next i
		Return presenceCheckResult
		End Function
		
		'Position Check before Arm extend 151214 bwjung
		Public Sub PositionCheck(loc As LocationEx, Axis As String)
			If ControlAxis(Axis) <> -1 And ContinuousMotionMode = False And Controller.PDB(116) = "1" Then
				Dim PositionCheckloc As Location = Nothing
				PositionCheckloc = Robot.WhereAngles()
				
				If (Math.Abs(loc.loc.angle(ControlAxis(Axis)) - PositionCheckloc.Angle(ControlAxis(Axis))) >= 5 ) Then
					MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot " + CStr(robotIndex) + " Axis : " + Axis +  " Position Error " + CStr(Math.Abs(loc.loc.angle(ControlAxis(Axis)) - PositionCheckloc.Angle(ControlAxis(Axis)))))
					ThrowError(ERR_POSITION_CHECK)
				End If
			Else
				'MyConsole.WriteLine(TimeStamp.CurrentTimeString() + " : Robot " + CStr(robotIndex) + " No Axis : " + CStr(Axis))	
		  
			End If 
		End Sub
		
		Public Function FindNeedRetractArm() As Integer
			Dim temploc As locationEx
			Dim calcresult() As Double
			Dim currentHand As Integer = theMotionLoger.lastIndex
			Dim i As Integer
			Dim MaxIndex As Integer
			ReDim calcresult(armCount) 
			
			For i = 1 To armCount
				setSelectedArmIndex(i)
				temploc = locationEx.GetCurCartPos()
				myconsole.writeLine(" X : " + CStr(temploc.loc.X) + " , Y : " + CStr(temploc.loc.Y))
				calcresult(i-1) = Math.Sqrt(Math.Pow(temploc.loc.X,2) + Math.Pow(temploc.loc.Y,2))
				If i >= 2 Then
					If calcresult(i-1) > calcresult(i-2) Then
						MaxIndex = i
					End If
				Else
					MaxIndex = 1
				End If
			Next i 
						  
			setSelectedArmIndex(MaxIndex)
			Return MaxIndex
		End Function
	
	'CheckMotorState
		Public Const TRACKING_ERROR As Integer = 12320
		Public Const DUTY_CYCLE_VALUE As Integer = 12608
		Public Dim dutyValue(MAX_AXIS_COUNT) As Double
		Public Dim TrackingValue(MAX_AXIS_COUNT) As Double
		Public Dim CheckMotorStateThread As New Thread("RNDRobot.CalcMotorState",,"CalcMotorState")
			
		
		Public Sub CheckMotorStateThreadStart()
			If CheckMotorStateThread.ThreadState <=0 Then
				CheckMotorStateThread.Start()
			End If
		End Sub
	
		Shared Public Sub CalcMotorState()
			Dim i As Integer
			Dim tempduty As Double
			Dim temptracking As Double
			Dim dutyCycleLimit As Double 
			While True
					For i = 1 To myRobot(Robot.Selected-1).axisCount
						'Console.WriteLine("i:" + CStr(i))
						dutyCycleLimit = Controller.PDbNum(10623,,,i)
						tempduty = Math.sqrt(Controller.PDbNum(DUTY_CYCLE_VALUE,1,1,i))*10*dutyCycleLimit/100
						temptracking = Math.Abs(Controller.PDbNum(TRACKING_ERROR,1,1,i))
						
						If myRobot(Robot.Selected-1).dutyValue(i-1) < tempduty Then 
							myRobot(Robot.Selected-1).dutyValue(i-1) = tempduty
						End If 
						
						If myRobot(Robot.Selected-1).trackingValue(i-1) < temptracking Then
							myRobot(Robot.Selected-1).trackingValue(i-1) = temptracking
						End If
						'Console.WriteLine("DutyValue" + CStr(i-1) + ":" + CStr(myRobot(Robot.Selected-1).dutyValue(i-1)))
						'Console.WriteLine("TrackingValue" + CStr(i-1) + ":" + CStr(myRobot(Robot.Selected-1).TrackingValue(i-1)))
					Next i
					Thread.Sleep(10)
			End While
		End Sub

		Public Function ReadMotorState(flag As Integer,axis As Integer) As Double
			If  flag = 1 Then
				Return myRobot(Robot.Selected-1).DutyValue(axis-1)
			ElseIf flag = 2 Then
				Return myRobot(Robot.Selected-1).TrackingValue(axis-1)
			End If
		End Function
		
		Public Sub clearMotorState(flag As Integer)
			Dim i As Integer
			For i = 0 To myRobot(Robot.Selected-1).m_axisCount
				If flag = 1 Then
					myRobot(Robot.Selected-1).DutyValue(i) = 0
				ElseIf flag = 2 Then
					myRobot(Robot.Selected-1).TrackingValue(i) = 0
				Else
					myRobot(Robot.Selected-1).dutyValue(i) = 0
					myRobot(Robot.Selected-1).TrackingValue(i) = 0
				End If 
			Next i 
		End Sub 
		
		'AUTO TUNING
		Public Const OUTPUT_TORQUE As Integer = 12304
		Public Const FF_TORQUE As Integer = 12340
		Public Const GRAVITY_TORQUE As Integer = 10349
		Public Const FRICTION_TORQUE As Integer = 10347
		Public Const VELOCITY_TORQUE As Integer = 10337
		Public Const ACCEL_TORQUE As Integer = 10336
		Public Const VELOCITY_COMMAND As Integer = 12402
		Public Const ACCEL_COMMAND As Integer = 12403
		
		Public Sub AutoGainTuning(axisName As String, movelength As Double) 
			If axisName = "Z" Or (Asc("2") <= Asc(axisName) And Asc(axisName) <= Asc("9")) Then
				AutoGainTuningFunction(controlAxis(axisName),movelength,True,100,10,50)
			ElseIf AxisName = "T" Then
				AutoGainTuningFunction(controlAxis(axisName),movelength,False,0,10,50)
			Else
				AutoGainTuningFunction(controlAxis(axisName),movelength,False,100,10,50)
			End If
'			DataFile.SaveReservationThreadStart()
		End Sub
		
		Public Sub AutoGainTuning(axisName As String, movelength As Double,FrictionRate As Integer) 
			If axisName = "Z" Or (Asc("2") <= Asc(axisName) And Asc(axisName) <= Asc("9")) Then
				AutoGainTuningFunction(controlAxis(axisName),movelength,True,FrictionRate,10,50)
			Else
				AutoGainTuningFunction(controlAxis(axisName),movelength,False,FrictionRate,10,50)
			End If
'			DataFile.SaveReservationThreadStart()
		End Sub
		
		Public Sub AutoGainTuning(axisName As String, movelength As Double,FirstSpeed As Integer,SecondSpeed As Integer) 
			If axisName = "Z" Or (Asc("2") <= Asc(axisName) And Asc(axisName) <= Asc("9")) Then
				AutoGainTuningFunction(controlAxis(axisName),movelength,True,100,FirstSpeed,SecondSpeed)
			ElseIf AxisName = "T" Then
				AutoGainTuningFunction(controlAxis(axisName),movelength,False,0,FirstSpeed,SecondSpeed)
			Else
				AutoGainTuningFunction(controlAxis(axisName),movelength,False,100,FirstSpeed,SecondSpeed)
			End If
'			DataFile.SaveReservationThreadStart()
		End Sub
		
		Public Sub AutoGainTuning(axisName As String, movelength As Double,FrictionRate As Integer,FirstSpeed As Integer,SecondSpeed As Integer) 
			If axisName = "Z" Or (Asc("2") <= Asc(axisName) And Asc(axisName) <= Asc("9")) Then
				AutoGainTuningFunction(controlAxis(axisName),movelength,True,FrictionRate,FirstSpeed,SecondSpeed)
			Else
				AutoGainTuningFunction(controlAxis(axisName),movelength,False,FrictionRate,FirstSpeed,SecondSpeed)
			End If
'			DataFile.SaveReservationThreadStart()
		End Sub
		
		Public Sub AutoGainTuning(axisName As String, movelength As Double, UpdateGravityFeedforwardFlag As Boolean,FrictionRate As Integer,FirstSpeed As Integer,SecondSpeed As Integer)
			AutoGainTuningFunction(controlAxis(axisName),movelength,UpdateGravityFeedforwardFlag,FrictionRate,FirstSpeed,SecondSpeed)
		End Sub
		
		Public Sub AutoGainTuningFunction(axis As Integer, movelength As Double, UpdateGravityFeedforwardFlag As Boolean,FrictionRate As Integer,FirstSpeed As Integer,SecondSpeed As Integer)
			Dim ViscosityConpensator As Double
			Dim FrictionCompensator As Double
			Dim GravityCompensator As Double
			Dim baseloc As locationEx = LocationEx.GetCurJointPos()
			Dim moveloc As locationEx = baseloc.clone
			Dim pf As profileEx = theProfileManager.getProfile(COORD_JOINT,False)
			moveloc.loc.angle(axis) = baseloc.loc.angle(axis) + movelength
			FindeFeedForwardGain(axis,movelength,FirstSpeed,SecondSpeed,FrictionCompensator,ViscosityConpensator,GravityCompensator)
			If UpdateGravityFeedforwardFlag = True Then
				thePDBManager.setPDB(GRAVITY_TORQUE,axis,CInt(GravityCompensator))
			End If
			If FrictionRate >=100 Then
				FrictionRate = 100
			ElseIf FrictionRate <=0 Then
				FrictionRate = 0
			End If
			thePDBManager.setPDB(FRICTION_TORQUE,axis,CInt(FrictionCompensator)*FrictionRate/100)
			thePDBManager.setPDB(VELOCITY_TORQUE,axis,CInt(ViscosityConpensator*1000)/1000)	
			pf.pf.speed = 100
			theMoveEx.Loc(moveloc, pf)
			theMoveEx.WaitForEOM
			theMoveEx.Loc(baseloc, pf)
			theMoveEx.WaitForEOM
		End Sub

		Public Sub SerchFunction(axisName As String, movelength As Double, ByRef FrictionCompensator As Double, ByRef ViscosityConpensator As Double, ByRef GravityCompensator As Double)
			SerchFunction(axisName,movelength,10,50,FrictionCompensator,ViscosityConpensator,GravityCompensator)
		End Sub
		
		Public Sub SerchFunction(axisName As String, movelength As Double,FirstSpeed As Integer,SecondSpeed As Integer, _
									ByRef FrictionCompensator As Double, ByRef ViscosityConpensator As Double, ByRef GravityCompensator As Double)
			FindeFeedForwardGain(controlAxis(axisName),movelength,FirstSpeed,SecondSpeed,FrictionCompensator,ViscosityConpensator,GravityCompensator)						
		End Sub
		
		Public Sub FindeFeedForwardGain(axis As Integer, movelength As Double,FirstSpeed As Integer,SecondSpeed As Integer, _
									ByRef FrictionCompensator As Double, ByRef ViscosityConpensator As Double, ByRef GravityCompensator As Double)
			Dim CWValue As Double = 0
			Dim CCWValue As Double = 0
			Dim Cmd_Vel(2) As Integer
			Dim Low_VelValue As Double
			Dim High_VelValue As Double

			
			Dim curValue As Double = 0
			Dim count As Integer = 0 
			Dim i As Integer = 0 
			
			
			Dim ExGravityTorque As String = thePDBManager.getPDB(GRAVITY_TORQUE)
			Dim ExFrictionTorque As String = thePDBManager.getPDB(FRICTION_TORQUE)
			Dim ExVelocityTorque As String = thePDBManager.getPDB(VELOCITY_TORQUE)
			Dim ExAccelTorque As String = thePDBManager.getPDB(ACCEL_TORQUE)
			Dim ex As Exception
			
			If FirstSpeed > SecondSpeed Then
				throwerror(ERR_INVALID_FORMAT)
			End If
			
			Try
				thePDBManager.setPDB(GRAVITY_TORQUE,axis,0)
				thePDBManager.setPDB(FRICTION_TORQUE,axis,0)
				thePDBManager.setPDB(VELOCITY_TORQUE,axis,0)
				thePDBManager.setPDB(ACCEL_TORQUE,axis,0)
				
				Dim baseloc As locationEx = LocationEx.GetCurJointPos()
				Dim moveloc As locationEx = baseloc.clone
				Dim pf As profileEx = theProfileManager.getProfile(COORD_JOINT,False)
			
			
				moveloc.loc.angle(axis) = baseloc.loc.angle(axis) + movelength
				theMoveEx.Loc(baseloc, pf)
				theMoveEx.WaitForEOM
			
				pf.pf.speed = FirstSpeed
				pf.pf.Accel = 100
				pf.pf.Decel = 100
				theMoveEx.Loc(moveloc, pf)
			
				count = 0 
				Dim temploc As locationEx = LocationEx.GetCurJointPos()
				While (Math.Abs(temploc.loc.angle(axis) - moveloc.loc.angle(axis)) > 1) And (count < 1000) 
					If CInt(thePDBManager.getPDB(ACCEL_COMMAND,axis)) = 0 Then
						CCWValue += thePDBManager.getPDB(OUTPUT_TORQUE,axis)
						Cmd_Vel(0) += thePDBManager.getPDB(VELOCITY_COMMAND,axis)
						count = count + 1 
					End If 
					temploc = LocationEx.GetCurJointPos()
					Thread.sleep(10)
				End While 
				CCWValue = CCWValue/count
				Cmd_Vel(0) = Cmd_Vel(0)/count
				theMoveEx.WaitForEOM
			
				theMoveEx.Loc(baseloc, pf)
			
				count = 0 
				temploc = LocationEx.GetCurJointPos()
				While (Math.Abs(temploc.loc.angle(axis) - baseloc.loc.angle(axis)) > 1) And (count < 1000) 
					If Math.Abs(CInt(thePDBManager.getPDB(ACCEL_COMMAND,axis))) = 0 Then
						CWValue += thePDBManager.getPDB(OUTPUT_TORQUE,axis)
						count = count + 1 
					End If 
					temploc = LocationEx.GetCurJointPos()
					Thread.sleep(10)
				End While 
				CWValue = CWValue/count
				theMoveEx.WaitForEOM
			
				Console.WriteLine("Gravity_Value : " + CStr((CWValue+CCWValue)/2))
				GravityCompensator = ((CWValue+CCWValue)/2)
				thePDBManager.setPDB(GRAVITY_TORQUE,axis,(CWValue+CCWValue)/2)
				thePDBManager.setPDB(FRICTION_TORQUE,axis,Math.Abs(CWValue-CCWValue)/2)
				Low_VelValue = Math.Abs(CWValue-CCWValue)/2
			
				pf.pf.speed = SecondSpeed
				theMoveEx.Loc(moveloc, pf)
			
				count = 0 
				temploc = LocationEx.GetCurJointPos()
				While (Math.Abs(temploc.loc.angle(axis) - moveloc.loc.angle(axis)) > 1) And (count < 1000)
					If CInt(thePDBManager.getPDB(ACCEL_COMMAND,axis)) = 0 Then
						CCWValue += thePDBManager.getPDB(OUTPUT_TORQUE,axis)
						Cmd_Vel(1) += thePDBManager.getPDB(VELOCITY_COMMAND,axis)
						count = count + 1 
					End If 
					temploc = LocationEx.GetCurJointPos()
					Thread.sleep(10)
				End While 
				CCWValue = CCWValue/count
				Cmd_Vel(1) = Cmd_Vel(1)/count
				theMoveEx.WaitForEOM
			
				theMoveEx.Loc(baseloc, pf)
				Thread.Sleep(100)
			
				count = 0 
				temploc = LocationEx.GetCurJointPos()
				While (Math.Abs(temploc.loc.angle(axis) - baseloc.loc.angle(axis)) > 1) And (count < 1000)
					If Math.Abs(CInt(thePDBManager.getPDB(ACCEL_COMMAND,axis))) = 0 Then
						CWValue += thePDBManager.getPDB(OUTPUT_TORQUE,axis)
						count = count + 1 
					End If 
					temploc = LocationEx.GetCurJointPos()
					Thread.sleep(10)
				End While 
				CWValue = CWValue/count
				theMoveEx.WaitForEOM
			
				High_VelValue = Math.Abs(CWValue-CCWValue)/2
				ViscosityConpensator = Math.Abs((High_VelValue - Low_VelValue)*1000/(Cmd_Vel(1)-Cmd_Vel(0)))
				FrictionCompensator = (Math.Abs((CWValue-CCWValue)/2) - ViscosityConpensator*Cmd_Vel(1)/1000)	
				
			Finally
				thePDBManager.setPDB_str(GRAVITY_TORQUE,ExGravityTorque)
				thePDBManager.setPDB_str(FRICTION_TORQUE,ExFrictionTorque)
				thePDBManager.setPDB_str(VELOCITY_TORQUE,ExVelocityTorque)
				thePDBManager.setPDB_str(ACCEL_TORQUE,ExAccelTorque)
			End Try
		End Sub
		
	End Class
End Module
'Created: 10/21/2013 9:29:09 AM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module RobotMotionLogerModule
    Public Class RobotMotionLoger
		
		Public Dim lastStage As Integer = 0
		Public Dim lastSlot As Integer = 0
		'Public Dim lastHand As Integer = 0
		Public Dim lastIndex As Integer = 0
		Public Dim lastSelectedArmIndex As Integer = 0
		Public Dim lastCommand As String = ""
		
		Public Sub clearLastMotionLog()
			lastStage = 0
			lastSlot = 0
			'lastHand = 0
			lastIndex = 0
			lastSelectedArmIndex = 0
			lastCommand = ""
		End Sub
		
    End Class 
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module BackEdgeGripArmSequenceModule

	Public Class BackEdgeGripSequence
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public ReadOnly Property defaultGripStage As Boolean
		 	Get
	            Return True
	        End Get
	    End Property
		
		Public ReadOnly Property isBackSide As Boolean
		 	Get
	            Return True
	        End Get
	    End Property
		
		Public ReadOnly Property isUseextraGuideGrip As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Private m_gripOnRetractArmPercent As Integer = 10
		Public Property gripOnRetractArmPercent As Integer
		 	Get
	            Return m_gripOnRetractArmPercent
	        End Get
			Set (value As Integer)
				m_gripOnRetractArmPercent = value
			End Set
	    End Property
		
		Private m_magneticWaferDetectSensor As Boolean = False ' for magnatic wafer detect sensor
		Public Property magneticWaferDetectSensor As Boolean
		 	Get
	            Return m_magneticWaferDetectSensor
	        End Get
			Set (value As Boolean)
				m_magneticWaferDetectSensor = value
			End Set
	    End Property
		
		Private Dim singleActer As SingleAct = Nothing
		Private Dim inverseSingleActer As InverseSingleAct = Nothing
		Private Dim multiActer As MultiAct = Nothing
		
		Private Dim m_homeSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer 
		Private Dim m_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_ungripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_reverse_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer

		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(singleActer As SingleAct)
			Me.singleActer = singleActer
		End Sub
		
		Public Sub New(inverseSingleActer As InverseSingleAct)
			Me.inverseSingleActer = inverseSingleActer
		End Sub
		
		Public Sub New(multiActer As MultiAct)
			Me.multiActer = multiActer
		End Sub
		
		Public Sub setFinger(fingerIndex As Integer, homeSensorIO As Integer, gripSensorIO As Integer, ungripSensorIO As Integer)
			m_homeSensorIO(fingerIndex-1) = homeSensorIO
			m_gripSensorIO(fingerIndex-1) = gripSensorIO
			m_ungripSensorIO(fingerIndex-1) = ungripSensorIO
			m_reverse_gripSensorIO(fingerIndex-1) = -1 * gripSensorIO
		End Sub
		
		Public Function isGrip() As Boolean
			Dim result As Boolean = False
			
			If Not(singleActer Is Nothing) Then
				result = singleActer.isGrip()
			ElseIf Not(inverseSingleActer Is Nothing) Then
				result = inverseSingleActer.isGrip()
			ElseIf Not(multiActer Is Nothing) Then
				result = multiActer.isGrip()
			End If
			
			Return result
		End Function
		
		Public Function isExtraGuideGrip() As Boolean
			Return False
		End Function
		
		Public Sub grip(flag As Boolean)
			If Not(singleActer Is Nothing) Then
				singleActer.grip(flag)
			ElseIf Not(inverseSingleActer Is Nothing) Then
				inverseSingleActer.grip(flag)
			ElseIf Not(multiActer Is Nothing) Then
				multiActer.grip(flag)
			End If
		End Sub
		
		Public Sub extraGuideGrip(flag As Boolean)
		End Sub
		
		Public Function pusherGripTimeTest(flag As Boolean, fullStroke As Boolean) As Double
			Dim gripTimer As New TimeStamp
			gripTimer.startTimer()
			If flag = True Then
				grip(True)
				If fullStroke = True Then
					myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,True,m_ungripSensorIO)
				Else
					myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,True,m_gripSensorIO)
				End If
			Else
				grip(False)
				myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,False,m_homeSensorIO)
			End If
			Return gripTimer.elapsedTime()
		End Function
		
		Public Function fingerSensorCheck(fingerIndex As Integer) As Boolean
			If m_gripSensorIO(fingerIndex-1) <> 0 Then	
				Return robotIO.getDIO(m_gripSensorIO(fingerIndex-1))
			Else
				Return False
			End If
		End Function
		
		Public Function fingerHomeCheck(fingerIndex As Integer) As Boolean
			If m_homeSensorIO(fingerIndex-1) <> 0 Then	
				Return robotIO.getDIO(m_homeSensorIO(fingerIndex-1))
			Else
				Return True
			End If
		End Function
		
		Public Function getFingerSensorGripIO(fingerIndex As Integer) As Integer
			Return m_gripSensorIO(fingerIndex-1)
		End Function
		
		
		
		
		
		
		' prepare arm motion
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			If mode = PUT_MODE Then
				If targetStation.isUseSmartMotion() = True Then
					loc.liftBack(arm,targetStation.putOffset,targetStation.teachingLocation(arm,2))
				Else
					loc.liftBack(arm,targetStation.putOffset)
				End If
	  		ElseIf mode = GET_MODE Then
				If targetStation.isUseSmartMotion() = True Then
					loc.liftFront(arm,targetStation.getOffset,targetStation.teachingLocation(arm,2))
				Else
					loc.liftFront(arm,targetStation.getOffset)
				End If
	  		End If
			Return loc
		End Function
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer, offset As Double) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim distance As Double
			If mode = PUT_MODE Then
				distance = targetStation.putOffset - offset
				If targetStation.isUseSmartMotion() = True Then
					loc.liftBack(arm,distance,targetStation.teachingLocation(arm,2))
				Else
					loc.liftBack(arm,distance)
				End If
	  		ElseIf mode = GET_MODE Then
				distance = targetStation.getOffset + offset
				If targetStation.isUseSmartMotion() = True Then
					loc.liftFront(arm,distance,targetStation.teachingLocation(arm,2))
				Else
					loc.liftFront(arm,distance)
				End If
	  		End If
			Return loc
		End Function
		
		Public Sub prepareRetractArm(arm As RobotArm, mode As Integer)
			If mode = GET_MODE Or mode = PUT_MODE Then
				RobotArm.AddArmEventList(arm,RobotArm.EVENT_ARM_GRIP)
				Move.Trigger(0, gripOnRetractArmPercent, RobotArm.ArmEventThread, RobotArm.EVENT_ARM_GRIP)
			End If
		End Sub
		
		Public Sub afterRetractArm(arm As RobotArm, mode As Integer)
			Dim i As Integer
			If mode = PUT_MODE Then
				If theSystem.demoMode = 0 Then
					myRobot(Robot.selected-1).armGripWaitSignal_and(theSystem.suctionOnTime+theSystem.gripperMaximumTime,Nothing,True,m_ungripSensorIO,m_reverse_gripSensorIO)
				Else
					myRobot(Robot.selected-1).armGripWaitSignal_and(theSystem.suctionOnTime,Nothing,True,m_ungripSensorIO,m_reverse_gripSensorIO)
				End If
			End If
		End Sub
		
		
		' get/put motion
		
		Public Function getWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim retry As Integer
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim retryCount As Integer = theSystem.retryCount
			
			Dim loc As LocationEx
			Dim zUpProfile As ProfileEx = myRobot(Robot.Selected-1).theProfileManager.getZProfile(True)
			Dim zDownProfile As ProfileEx = myRobot(Robot.Selected-1).theProfileManager.getZProfile(False)
			If targetStation.isUseSmartMotion() = True Then
				loc = LocationEx.getDestCartPos()
				zUpProfile.pf.Straight = True
				zDownProfile.pf.Straight = True
			Else
				loc = LocationEx.getDestJointPos()
			End If
			
			If motionStep <> ALL_STEP Then
				retryCount = 0
			End If
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
			If theSystem.demoMode = 0 Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
						Return ERR_CANNOT_UNGRIP
					End If
				Next i
			End If
			
			For retry = 0 To theSystem.retryCount
		
				sensorCheckResult = 0
				
STEP1:

				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.getDownOffset)) '1.5mm -> %
				End If
				
				loc.liftDown(targetStation.getDownOffset)
				theMoveEx.loc(loc,zDownProfile)

				theMoveEx.motionOverlap(1, 2)
				
				For i = 0 To armList.GetUpperBound(0)-1
					If targetStation.isUseSmartMotion() = True Then
						loc.liftBack(armList(i),targetStation.getOffset,targetStation.teachingLocation(armList(0),2))
					Else
						loc.liftBack(armList(i),targetStation.getOffset)
					End If
				Next i
				theMoveEx.loc(loc,zDownProfile)
				
				theMoveEx.wait()

				If motionStep = EXTA_STEP Then
					Goto STEP_END
				End If
				
				If motionStep = CROSS_STEP Then
					Goto STEP_END
				End If
STEP2:				
						
				myRobot(Robot.selected-1).armGrip(armList,True,True,True)
				If theSystem.demoMode = 0 Then
					If armList(0).gripHalfStrokeTime_ms < theSystem.gripperMinimumTime Then
						sensorCheckResult = ERR_PUSHER_SPEED_HIGH
					End If
				End If
				
				If theSystem.demoMode = 0 Then
					Dim ret As Integer
					For i = 0 To armList.GetUpperBound(0) - 1
						ret = armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime)
						If ret = SENSOR_CHECK_RESULT_NOWAFER Then
							sensorCheckResult = ERR_NO_WAFER_DURING_GET
							Exit For
						ElseIf ret = SENSOR_CHECK_RESULT_OVERWAFER Then
							sensorCheckResult = OVER_WAFER_DURING_GET
							Exit For
						End If
					Next i
				End If

STEP3:
				If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
					myRobot(Robot.selected-1).armGrip(armList,False,True)
					For i = 0 To armList.GetUpperBound(0)-1
						If targetStation.isUseSmartMotion() = True Then
							loc.liftFront(armList(i),targetStation.getOffset,targetStation.teachingLocation(armList(0),2))
						Else
							loc.liftFront(armList(i),targetStation.getOffset)
						End If
					Next i
					theMoveEx.loc(loc,zDownProfile)
					theMoveEx.motionOverlap(1, 2)
				End If
				
				loc.liftUp(targetStation.getUpOffset)
				theMoveEx.loc(loc,zUpProfile)
				
				theMoveEx.wait()
				
				If sensorCheckResult = 0 Then
					Exit For
				End If
			Next retry
			
STEP_END:

			Return sensorCheckResult
		End Function
		
		Public Function putWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim targetStation As Station = theStationManager.getStation(stage)
			
			Dim loc As LocationEx
			Dim zUpProfile As ProfileEx = myRobot(Robot.Selected-1).theProfileManager.getZProfile(True)
			Dim zDownProfile As ProfileEx = myRobot(Robot.Selected-1).theProfileManager.getZProfile(False)
			If targetStation.isUseSmartMotion() = True Then
				loc = LocationEx.getDestCartPos()
				zUpProfile.pf.Straight = True
				zDownProfile.pf.Straight = True
			Else
				loc = LocationEx.getDestJointPos()
			End If
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
STEP1:

			If theSystem.demoMode = 0 Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime) = SENSOR_CHECK_RESULT_NOWAFER Then
						sensorCheckResult = ERR_NO_WAFER_DURING_PUT
						Exit For
					End If
				Next i
			End If
			
			If sensorCheckResult <> 0 Then
				Return sensorCheckResult
			End If
			
			If targetStation.putDownOffset > targetStation.putUpOffset Then
				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.putUpOffset)) '1.5mm -> %
				End If
				loc.liftDown(targetStation.putUpOffset)
			Else
				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.putDownOffset)) '1.5mm -> %
				End If
				loc.liftDown(targetStation.putDownOffset)
			End If
			theMoveEx.loc(loc,zDownProfile)
			
			theMoveEx.waitForEOM()
		
			If motionStep = EXTA_STEP Then
				Goto STEP_END
			End If
STEP2:			
			
			If theSystem.demoMode = 0 Then
				myRobot(Robot.selected-1).armGrip(armList,False,False,True)
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
						sensorCheckResult = ERR_CANNOT_UNGRIP
						Exit For
					End If
				Next i
			Else
				myRobot(Robot.selected-1).armGrip(armList,False,True,True)
			End If

STEP3:			
			If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
				myRobot(Robot.selected-1).armGrip(armList,True,True)
				
				loc.liftUp(targetStation.putDownOffset)
				theMoveEx.loc(loc,zUpProfile)
				
				theMoveEx.wait()
				
				Return sensorCheckResult
			End If
			
			For i = 0 To armList.GetUpperBound(0)-1
				If targetStation.isUseSmartMotion() = True Then
					loc.liftFront(armList(i),targetStation.getOffset,targetStation.teachingLocation(armList(0),2))
				Else
					loc.liftFront(armList(i),targetStation.getOffset)
				End If
			Next i
			theMoveEx.loc(loc,zDownProfile)
			
			theMoveEx.motionOverlap(1, 2)
			
			loc.liftUp(targetStation.putDownOffset)
			theMoveEx.loc(loc,zUpProfile)
			
			theMoveEx.wait()
			
STEP_END:

			Return sensorCheckResult
		End Function
		
	End Class
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module BackTongsArmSequenceModule

	Public Class BackTongsGripSequence
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public ReadOnly Property defaultGripStage As Boolean
		 	Get
	            Return True
	        End Get
	    End Property
		
		Public ReadOnly Property isBackSide As Boolean
		 	Get
	            Return True
	        End Get
	    End Property
		
		Public ReadOnly Property isUseextraGuideGrip As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Private m_gripOnRetractArmPercent As Integer = 10
		Public Property gripOnRetractArmPercent As Integer
		 	Get
	            Return m_gripOnRetractArmPercent
	        End Get
			Set (value As Integer)
				m_gripOnRetractArmPercent = value
			End Set
	    End Property
		
		Private m_magneticWaferDetectSensor As Boolean = False ' for magnatic wafer detect sensor
		Public Property magneticWaferDetectSensor As Boolean
		 	Get
	            Return m_magneticWaferDetectSensor
	        End Get
			Set (value As Boolean)
				m_magneticWaferDetectSensor = value
			End Set
	    End Property

		Private Dim singleActer As SingleAct = Nothing
		Private Dim inverseSingleActer As InverseSingleAct = Nothing
		Private Dim multiActer As MultiAct = Nothing
		
		Private Dim m_homeSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer 
		Private Dim m_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_ungripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_reverse_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer

		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(singleActer As SingleAct)
			Me.singleActer = singleActer
		End Sub
		
		Public Sub New(inverseSingleActer As InverseSingleAct)
			Me.inverseSingleActer = inverseSingleActer
		End Sub
		
		Public Sub New(multiActer As MultiAct)
			Me.multiActer = multiActer
		End Sub
		
		Public Sub setFinger(fingerIndex As Integer, homeSensorIO As Integer, gripSensorIO As Integer, ungripSensorIO As Integer)
			m_homeSensorIO(fingerIndex-1) = homeSensorIO
			m_gripSensorIO(fingerIndex-1) = gripSensorIO
			m_ungripSensorIO(fingerIndex-1) = ungripSensorIO
			m_reverse_gripSensorIO(fingerIndex-1) = -1 * gripSensorIO
		End Sub
		
		Public Function isGrip() As Boolean
			Dim result As Boolean = False
			
			If Not(singleActer Is Nothing) Then
				result = singleActer.isGrip()
			ElseIf Not(inverseSingleActer Is Nothing) Then
				result = inverseSingleActer.isGrip()
			ElseIf Not(multiActer Is Nothing) Then
				result = multiActer.isGrip()
			End If
			
			Return result
		End Function
		
		Public Function isExtraGuideGrip() As Boolean
			Return False
		End Function
		
		Public Sub grip(flag As Boolean)
			If Not(singleActer Is Nothing) Then
				singleActer.grip(flag)
			ElseIf Not(inverseSingleActer Is Nothing) Then
				inverseSingleActer.grip(flag)
			ElseIf Not(multiActer Is Nothing) Then
				multiActer.grip(flag)
			End If
		End Sub
		
		Public Sub extraGuideGrip(flag As Boolean)
		End Sub
		
		Public Function pusherGripTimeTest(flag As Boolean, fullStroke As Boolean) As Double
			Dim gripTimer As New TimeStamp
			gripTimer.startTimer()
			If flag = True Then
				grip(True)
				If fullStroke = True Then
					myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,True,m_ungripSensorIO)
				Else
					myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,True,m_gripSensorIO)
				End If
			Else
				grip(False)
				myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,False,m_homeSensorIO)
			End If
			Return gripTimer.elapsedTime()
		End Function
		
		Public Function fingerSensorCheck(fingerIndex As Integer) As Boolean
			If m_gripSensorIO(fingerIndex-1) <> 0 Then	
				Return robotIO.getDIO(m_gripSensorIO(fingerIndex-1))
			Else
				Return False
			End If
		End Function
		
		Public Function fingerHomeCheck(fingerIndex As Integer) As Boolean
			If m_homeSensorIO(fingerIndex-1) <> 0 Then	
				Return robotIO.getDIO(m_homeSensorIO(fingerIndex-1))
			Else
				Return True
			End If
		End Function
		
		Public Function getFingerSensorGripIO(fingerIndex As Integer) As Integer
			Return m_gripSensorIO(fingerIndex-1)
		End Function
		
		
		
		
		
		' prepare arm motion
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			If mode = PUT_MODE Then
				If targetStation.isUseSmartMotion() = True Then
					loc.liftBack(arm,targetStation.putOffset,targetStation.teachingLocation(arm,2))
				Else
					loc.liftBack(arm,targetStation.putOffset)
				End If
	  		End If
			Return loc
		End Function
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer, offset As Double) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim distance As Double
			If mode = PUT_MODE Then
				distance = targetStation.putOffset - offset
			Else
				distance =  -offset 
			End If
			If targetStation.isUseSmartMotion() = True Then
				loc.liftBack(arm,distance,targetStation.teachingLocation(arm,2))
			Else
				loc.liftBack(arm,distance*100)
			End If
			Return loc
		End Function
		
		Public Sub prepareRetractArm(arm As RobotArm, mode As Integer)
			If mode = GET_MODE Or mode = PUT_MODE Then
				RobotArm.AddArmEventList(arm,RobotArm.EVENT_ARM_GRIP)
				Move.Trigger(0, gripOnRetractArmPercent, RobotArm.ArmEventThread, RobotArm.EVENT_ARM_GRIP)
			End If
		End Sub
		
		Public Sub afterRetractArm(arm As RobotArm, mode As Integer)
			Dim i As Integer
			If mode = PUT_MODE Then
				If theSystem.demoMode = 0 Then
					myRobot(Robot.selected-1).armGripWaitSignal_and(theSystem.suctionOnTime+theSystem.gripperMaximumTime,Nothing,True,m_ungripSensorIO,m_reverse_gripSensorIO)
				Else
					myRobot(Robot.selected-1).armGripWaitSignal_and(theSystem.suctionOnTime,Nothing,True,m_ungripSensorIO,m_reverse_gripSensorIO)
				End If
			End If
		End Sub
		
		
		
		' get/put motion
		
		Public Function getWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim retry As Integer = 0
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim loc As LocationEx = LocationEx.getDestJointPos()
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim retryCount As Integer = theSystem.retryCount
			
			If motionStep <> ALL_STEP Then
				retryCount = 0
			End If
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
			If theSystem.demoMode = 0 Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
						Return ERR_CANNOT_UNGRIP
					End If
				Next i
			End If
			
			For retry = 0 To retryCount
			
				sensorCheckResult = 0
				
STEP1:

				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.getDownOffset)) '1.5mm -> %
				End If

				loc.liftDown(targetStation.getDownOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
				
				theMoveEx.waitForEOM()

				If motionStep = EXTA_STEP Then
					Goto STEP_END
				End If
				
				If motionStep = CROSS_STEP Then
					Goto STEP_END
				End If
STEP2:
				
				myRobot(Robot.selected-1).armGrip(armList,True,True,True)
				If theSystem.demoMode = 0 Then
					If armList(0).gripHalfStrokeTime_ms < theSystem.gripperMinimumTime Then
						sensorCheckResult = ERR_PUSHER_SPEED_HIGH
					End If
				End If
				
				If theSystem.demoMode = 0 Then
					Dim ret As Integer
					For i = 0 To armList.GetUpperBound(0) - 1
						ret = armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime)
						If ret = SENSOR_CHECK_RESULT_NOWAFER Then
							sensorCheckResult = ERR_NO_WAFER_DURING_GET
							Exit For
						ElseIf ret = SENSOR_CHECK_RESULT_OVERWAFER Then
							sensorCheckResult = OVER_WAFER_DURING_GET
							Exit For
						End If
					Next i
				End If

STEP3:
				If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
					myRobot(Robot.selected-1).armGrip(armList,False,True)
				End If
				
				loc.liftUp(targetStation.getUpOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
				
				theMoveEx.wait()
			
				If sensorCheckResult = 0 Then
					Exit For
				End If
			Next retry
			
STEP_END:

			Return sensorCheckResult
		End Function
		
		Public Function putWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim loc As LocationEx = LocationEx.getDestJointPos()
			Dim targetStation As Station = theStationManager.getStation(stage)

			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
STEP1:

			If theSystem.demoMode = 0 Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime) = SENSOR_CHECK_RESULT_NOWAFER Then
						sensorCheckResult = ERR_NO_WAFER_DURING_PUT
						Exit For
					End If
				Next i
			End If
			
			If sensorCheckResult <> 0 Then
				Return sensorCheckResult
			End If
			
			If targetStation.putDownOffset > targetStation.putUpOffset Then
				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.putUpOffset)) '1.5mm -> %
				End If
				loc.liftDown(targetStation.putUpOffset)
			Else
				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.putDownOffset)) '1.5mm -> %
				End If
				loc.liftDown(targetStation.putDownOffset)
			End If
			theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
			
			theMoveEx.waitForEOM()
			
STEP2:

			If theSystem.demoMode = 0 Then
				myRobot(Robot.selected-1).armGrip(armList,False,False,True)
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
						sensorCheckResult = ERR_CANNOT_UNGRIP
						Exit For
					End If
				Next i
			Else
				myRobot(Robot.selected-1).armGrip(armList,False,True,True)
			End If

STEP3:			
			If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
				myRobot(Robot.selected-1).armGrip(armList,True,True)
			End If
			
			loc.liftUp(targetStation.putDownOffset)
			theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
			
			theMoveEx.wait()

STEP_END:

			Return sensorCheckResult
		End Function
		
	End Class
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module BackVaccumEdgeGuideArmSequenceModule

	Public Class BackVaccumEdgeGuideGripSequence
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public ReadOnly Property defaultGripStage As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Public ReadOnly Property isBackSide As Boolean
		 	Get
	            Return True
	        End Get
	    End Property
		
		Public ReadOnly Property isUseextraGuideGrip As Boolean
		 	Get
	            Return True
	        End Get
	    End Property
		
		Private m_guideFirstRelease As Boolean = True
		Public Property guideFirstRelease As Boolean
		 	Get
	            Return m_guideFirstRelease
	        End Get
			Set (value As Boolean)
				m_guideFirstRelease = value
			End Set
	    End Property
		
		Private m_vaccumOnAfterZUpWhenGET As Boolean = True
		Public Property vaccumOnAfterZUpWhenGET As Boolean
		 	Get
	            Return m_vaccumOnAfterZUpWhenGET
	        End Get
			Set (value As Boolean)
				m_vaccumOnAfterZUpWhenGET = value
			End Set
	    End Property
		
		Private m_magneticWaferDetectSensor As Boolean = False ' for magnatic wafer detect sensor
		Public Property magneticWaferDetectSensor As Boolean
		 	Get
	            Return m_magneticWaferDetectSensor
	        End Get
			Set (value As Boolean)
				m_magneticWaferDetectSensor = value
			End Set
	    End Property
		
		Private m_externalUngripGuidSensorIO As Integer = 0 ' guid ungrip check sensor
		Public Property externalUngripGuidSensorIO As Integer
		 	Get
	            Return m_externalUngripGuidSensorIO
	        End Get
			Set (value As Integer)
				m_externalUngripGuidSensorIO = value
			End Set
	    End Property
	
		Private Dim singleActer As SingleAct = Nothing
		Private Dim inverseSingleActer As InverseSingleAct = Nothing
		Private Dim multiActer As MultiAct = Nothing
		
		Private Dim singleActer_guide As SingleAct = Nothing
		Private Dim inverseSingleActer_guide As InverseSingleAct = Nothing
		Private Dim multiActer_guide As MultiAct = Nothing
		
		Private Dim m_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_guideOnSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_guideOffSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_reverse_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		
		Private Dim gripTimer As New TimeStamp
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(singleActer As SingleAct, singleActer_guide As SingleAct)
			Me.singleActer = singleActer
			Me.singleActer_guide = singleActer_guide
		End Sub
		
		Public Sub New(inverseSingleActer As InverseSingleAct, inverseSingleActer_guide As InverseSingleAct)
			Me.inverseSingleActer = inverseSingleActer
			Me.inverseSingleActer_guide = inverseSingleActer_guide
		End Sub
		
		Public Sub New(multiActer As MultiAct, multiActer_guide As MultiAct)
			Me.multiActer = multiActer
			Me.multiActer_guide = multiActer_guide
		End Sub
		
		Public Sub setFinger(fingerIndex As Integer, gripSensorIO As Integer, guideOnSensorIO As Integer, guideOffSensorIO As Integer)
			m_gripSensorIO(fingerIndex-1) = gripSensorIO
			m_guideOnSensorIO(fingerIndex-1) = guideOnSensorIO
			m_guideOffSensorIO(fingerIndex-1) = guideOffSensorIO
			m_reverse_gripSensorIO(fingerIndex-1) = -1 * gripSensorIO
		End Sub
		
		Public Function isGrip() As Boolean
			Dim result As Boolean = False
			
			If Not(singleActer Is Nothing) Then
				result = singleActer.isGrip()
			ElseIf Not(inverseSingleActer Is Nothing) Then
				result = inverseSingleActer.isGrip()
			ElseIf Not(multiActer Is Nothing) Then
				result = multiActer.isGrip()
			End If
			
			Return result
		End Function
		
		Public Function isExtraGuideGrip() As Boolean
			Dim result As Boolean = False
			
			If Not(singleActer_guide Is Nothing) Then
				result = singleActer_guide.isGrip()
			ElseIf Not(inverseSingleActer_guide Is Nothing) Then
				result = inverseSingleActer_guide.isGrip()
			ElseIf Not(multiActer_guide Is Nothing) Then
				result = multiActer_guide.isGrip()
			End If
			
			Return result
		End Function
		
		Public Sub grip(flag As Boolean)
			If Not(singleActer Is Nothing) Then
				singleActer.grip(flag)
			ElseIf Not(inverseSingleActer Is Nothing) Then
				inverseSingleActer.grip(flag)
			ElseIf Not(multiActer Is Nothing) Then
				multiActer.grip(flag)
			End If
		End Sub
		
		Public Sub extraGuideGrip(flag As Boolean)
			If Not(singleActer_guide Is Nothing) Then
				singleActer_guide.grip(flag)
			ElseIf Not(inverseSingleActer_guide Is Nothing) Then
				inverseSingleActer_guide.grip(flag)
			ElseIf Not(multiActer_guide Is Nothing) Then
				multiActer_guide.grip(flag)
			End If
		End Sub
		
		Public Function pusherGripTimeTest(flag As Boolean, fullStroke As Boolean) As Double
			Dim gripTimer As New TimeStamp
			gripTimer.startTimer()
			If flag = True Then
				grip(True)
				myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,True,m_gripSensorIO)
			Else
				grip(False)
				myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,False,m_reverse_gripSensorIO)
			End If
			Return gripTimer.elapsedTime()
		End Function
		
		Public Function fingerSensorCheck(fingerIndex As Integer) As Boolean
			Dim result As Boolean
			If m_gripSensorIO(fingerIndex-1) <> 0 Then
				result = robotIO.getDIO(m_gripSensorIO(fingerIndex-1))
			Else
				result = False
			End If
			
			If externalUngripGuidSensorIO <> 0 Then
				If isExtraGuideGrip() = True Then
					result = result And (Not robotIO.getDIO(externalUngripGuidSensorIO))
				End If
			End If
			
			Return result
		End Function
		
		Public Function fingerHomeCheck(fingerIndex As Integer) As Boolean
			Dim result As Boolean
			If m_gripSensorIO(fingerIndex-1) <> 0 Then	
				result = Not(robotIO.getDIO(m_gripSensorIO(fingerIndex-1)))
				If m_guideOffSensorIO(fingerIndex-1) <> 0 Then
					result = result And robotIO.getDIO(m_guideOffSensorIO(fingerIndex-1))
				End If
			Else
				result = True
			End If
			
			Return result
		End Function
		
		Public Function getFingerSensorGripIO(fingerIndex As Integer) As Integer
			Return m_gripSensorIO(fingerIndex-1)
		End Function
		
		
		
		
		
		
		
		
		' prepare arm motion
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			If mode = PUT_MODE Then
				If targetStation.isUseSmartMotion() = True Then
					loc.liftBack(arm,targetStation.putOffset,targetStation.teachingLocation(arm,2))
				Else
					loc.liftBack(arm,targetStation.putOffset)
				End If
	  		End If
			Return loc
		End Function
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer, offset As Double) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim distance As Double
			If mode = PUT_MODE Then
				distance = targetStation.putOffset - offset
			Else
				distance =  -offset 
			End If
			If targetStation.isUseSmartMotion() = True Then
				loc.liftBack(arm,distance,targetStation.teachingLocation(arm,2))
			Else
				loc.liftBack(arm,distance*100)
			End If
			Return loc
		End Function
		
		Public Sub prepareRetractArm(arm As RobotArm, mode As Integer)
		End Sub
		
		Public Sub afterRetractArm(arm As RobotArm, mode As Integer)
		End Sub
		

		
		
		
		' get/put motion
		
		Public Function getWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim retry As Integer = 0
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim loc As LocationEx = LocationEx.getDestJointPos()
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim retryCount As Integer = theSystem.retryCount
			
			If motionStep <> ALL_STEP Then
				retryCount = 0
			End If
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
			For retry = 0 To retryCount

				sensorCheckResult = 0
				
STEP1:

				If vaccumOnAfterZUpWhenGET = False Then
					myRobot(Robot.selected-1).armGrip(armList,True,False)
					gripTimer.startTimer()
				End If

				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.getDownOffset)) '1.5mm -> %
				End If

				loc.liftDown(targetStation.getDownOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))				
				
				theMoveEx.waitForEOM()
				
				If vaccumOnAfterZUpWhenGET = False Then
					gripTimer.assertTimeDelay(theSystem.suctionOnTime)
				Else
					myRobot(Robot.selected-1).armGrip(armList,True,True)
				End If

				If motionStep = EXTA_STEP Then
					Goto STEP_END
				End If
				
				If motionStep = CROSS_STEP Then
					Goto STEP_END
				End If
				
STEP2:

				If theSystem.demoMode = 0 Then
					Dim ret As Integer
					For i = 0 To armList.GetUpperBound(0) - 1
						ret = armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime)
						If ret = SENSOR_CHECK_RESULT_NOWAFER Then
							sensorCheckResult = ERR_NO_WAFER_DURING_GET
							Exit For
						ElseIf ret = SENSOR_CHECK_RESULT_OVERWAFER Then
							sensorCheckResult = OVER_WAFER_DURING_GET
							Exit For
						End If
					Next i
				End If

STEP3:				
				If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
					myRobot(Robot.selected-1).armGrip(armList,False,True)
				Else	
					myRobot(Robot.selected-1).extraGuideGrip(armList,True)
					If theSystem.demoMode = 0 Then
						If externalUngripGuidSensorIO <> 0 Then
							If robotIO.getDIO(externalUngripGuidSensorIO) = True Then
								sensorCheckResult = ERR_NO_WAFER_DURING_GET
								myRobot(Robot.selected-1).extraGuideGrip(armList,False)
							End If
						End If
					End If
				End If
				
				loc.liftUp(targetStation.getUpOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
				
				theMoveEx.wait()
				
				If sensorCheckResult = 0 Then
					Exit For
				End If
				
			Next retry
			
STEP_END:
			
			Return sensorCheckResult
		End Function

		Public Function putWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim loc As LocationEx = LocationEx.getDestJointPos()
			Dim targetStation As Station = theStationManager.getStation(stage)
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
STEP1:			
			
			If theSystem.demoMode = 0 Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime) = SENSOR_CHECK_RESULT_NOWAFER Then
						sensorCheckResult = ERR_NO_WAFER_DURING_PUT
						Exit For
					End If
				Next i
			End If
			
			If sensorCheckResult <> 0 Then
				Return sensorCheckResult
			End If
			
			If targetStation.putDownOffset > targetStation.putUpOffset Then
				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.putUpOffset)) '1.5mm -> %
				End If
				loc.liftDown(targetStation.putUpOffset)
			Else
				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.putDownOffset)) '1.5mm -> %
				End If
				loc.liftDown(targetStation.putDownOffset)
			End If
			theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
			
			theMoveEx.waitForEOM()
			
			If motionStep = EXTA_STEP Then
				Goto STEP_END
			End If
STEP2:

			If guideFirstRelease = True Then
				myRobot(Robot.selected-1).extraGuideGrip(armList,False)
				myRobot(Robot.selected-1).armGrip(armList,False,True)
			Else
				myRobot(Robot.selected-1).armGrip(armList,False,True)
				myRobot(Robot.selected-1).extraGuideGrip(armList,False)
			End If

			If theSystem.demoMode = 0 And magneticWaferDetectSensor = False Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
						sensorCheckResult = ERR_CANNOT_UNGRIP
						Exit For
					End If
				Next i
			End If

STEP3:			
			If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
				myRobot(Robot.selected-1).armGrip(armList,True,True)
				myRobot(Robot.selected-1).extraGuideGrip(armList,True)
			End If
			
			loc.liftUp(targetStation.putDownOffset)
			theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
			
			theMoveEx.wait()
			
STEP_END:

			Return sensorCheckResult
		End Function
		
	End Class
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module BackVaccumGripArmSequenceModule

	Public Class BackVaccumGripSequence
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public ReadOnly Property defaultGripStage As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Public ReadOnly Property isBackSide As Boolean
		 	Get
	            Return True
	        End Get
	    End Property
		
		Public ReadOnly Property isUseextraGuideGrip As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Private m_vaccumOnAfterZUpWhenGET As Boolean = False
		Public Property vaccumOnAfterZUpWhenGET As Boolean
		 	Get
	            Return m_vaccumOnAfterZUpWhenGET
	        End Get
			Set (value As Boolean)
				m_vaccumOnAfterZUpWhenGET = value
			End Set
	    End Property
		
		Private m_magneticWaferDetectSensor As Boolean = False ' for magnatic wafer detect sensor
		Public Property magneticWaferDetectSensor As Boolean
		 	Get
	            Return m_magneticWaferDetectSensor
	        End Get
			Set (value As Boolean)
				m_magneticWaferDetectSensor = value
			End Set
	    End Property
		
		Private Dim singleActer As SingleAct = Nothing
		Private Dim inverseSingleActer As InverseSingleAct = Nothing
		Private Dim multiActer As MultiAct = Nothing
		Private Dim tripleActer As TripleAct = Nothing
		
		Private Dim m_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_reverse_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer

		Private Dim gripTimer As New TimeStamp
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(singleActer As SingleAct)
			Me.singleActer = singleActer
		End Sub
		
		Public Sub New(inverseSingleActer As InverseSingleAct)
			Me.inverseSingleActer = inverseSingleActer
		End Sub
		
		Public Sub New(multiActer As MultiAct)
			Me.multiActer = multiActer
		End Sub
		
		Public Sub New(tripleActer As TripleAct)
			Me.tripleActer = tripleActer
		End Sub
		
		Public Sub setFinger(fingerIndex As Integer, gripSensorIO As Integer)
			m_gripSensorIO(fingerIndex-1) = gripSensorIO
			m_reverse_gripSensorIO(fingerIndex-1) = -1 * gripSensorIO
		End Sub
		
		Public Function isGrip() As Boolean
			Dim result As Boolean = False
			
			If Not(singleActer Is Nothing) Then
				result = singleActer.isGrip()
			ElseIf Not(inverseSingleActer Is Nothing) Then
				result = inverseSingleActer.isGrip()
			ElseIf Not(multiActer Is Nothing) Then
				result = multiActer.isGrip()
			ElseIf Not(tripleActer Is Nothing) Then
				result = tripleActer.isGrip()
			End If
			
			Return result
		End Function
		
		Public Function isExtraGuideGrip() As Boolean
			Return False
		End Function
		
		Public Sub grip(flag As Boolean)
			If Not(singleActer Is Nothing) Then
				singleActer.grip(flag)
			ElseIf Not(inverseSingleActer Is Nothing) Then
				inverseSingleActer.grip(flag)
			ElseIf Not(multiActer Is Nothing) Then
				multiActer.grip(flag)
			ElseIf Not(tripleActer Is Nothing) Then
				tripleActer.grip(flag)
			End If
		End Sub
		
		Public Sub extraGuideGrip(flag As Boolean)
		End Sub
		
		Public Function pusherGripTimeTest(flag As Boolean, fullStroke As Boolean) As Double
			Dim gripTimer As New TimeStamp
			gripTimer.startTimer()
			If flag = True Then
				grip(True)
				myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,False,m_gripSensorIO)
			Else
				grip(False)
				myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,False,m_reverse_gripSensorIO)
			End If
			Return gripTimer.elapsedTime()
		End Function
		
		Public Function fingerSensorCheck(fingerIndex As Integer) As Boolean
			If m_gripSensorIO(fingerIndex-1) <> 0 Then	
				Return robotIO.getDIO(m_gripSensorIO(fingerIndex-1))
			Else
				Return False
			End If
		End Function
		
		Public Function fingerHomeCheck(fingerIndex As Integer) As Boolean
			Return Not(fingerSensorCheck(fingerIndex))
		End Function
		
		Public Function getFingerSensorGripIO(fingerIndex As Integer) As Integer
			Return m_gripSensorIO(fingerIndex-1)
		End Function
		
		
		
		
		
		
		' prepare arm motion
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			If mode = PUT_MODE Then
				If targetStation.isUseSmartMotion() = True Then
					loc.liftBack(arm,targetStation.putOffset,targetStation.teachingLocation(arm,2))
				Else
					loc.liftBack(arm,targetStation.putOffset)
				End If
	  		End If
			Return loc
		End Function
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer, offset As Double) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim distance As Double
			If mode = PUT_MODE Then
				distance = targetStation.putOffset - offset
			Else
				distance =  -offset 
			End If
			If targetStation.isUseSmartMotion() = True Then
				loc.liftBack(arm,distance,targetStation.teachingLocation(arm,2))
			Else
				loc.liftBack(arm,distance*100)
			End If
			
			Return loc
		End Function
		
		Public Sub prepareRetractArm(arm As RobotArm, mode As Integer)
		End Sub
		
		Public Sub afterRetractArm(arm As RobotArm, mode As Integer)

		End Sub
		
		
		
		
		' get/put motion

		Public Function getWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim retry As Integer = 0
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim loc As LocationEx = LocationEx.getDestJointPos()
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim retryCount As Integer = theSystem.retryCount
			
			If motionStep <> ALL_STEP Then
				retryCount = 0
			End If
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
			For retry = 0 To retryCount

				sensorCheckResult = 0
				
STEP1:

				If vaccumOnAfterZUpWhenGET = False Then
					myRobot(Robot.selected-1).armGrip(armList,True,False)
					gripTimer.startTimer()
				End If

				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.getDownOffset)) '1.5mm -> %
				End If
				
				loc.liftDown(targetStation.getDownOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
				
				theMoveEx.waitForEOM()
				
				If vaccumOnAfterZUpWhenGET = False Then
					gripTimer.assertTimeDelay(theSystem.suctionOnTime)
				Else
					myRobot(Robot.selected-1).armGrip(armList,True,True)
				End If
	
				If motionStep = EXTA_STEP Then
					Goto STEP_END
				End If
				
				If motionStep = CROSS_STEP Then
					Goto STEP_END
				End If
				
STEP2:

				If theSystem.demoMode = 0 Then
					Dim ret As Integer
					For i = 0 To armList.GetUpperBound(0) - 1
						ret = armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime)
						If ret = SENSOR_CHECK_RESULT_NOWAFER Then
							sensorCheckResult = ERR_NO_WAFER_DURING_GET
							Exit For
						ElseIf ret = SENSOR_CHECK_RESULT_OVERWAFER Then
							sensorCheckResult = OVER_WAFER_DURING_GET
							Exit For
						End If
					Next i
				End If

STEP3:
				If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
					myRobot(Robot.selected-1).armGrip(armList,False,True)
				End If
				
				loc.liftUp(targetStation.getUpOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
				
				theMoveEx.wait()
				
				If sensorCheckResult = 0 Then
					Exit For
				End If
				
			Next retry
			
STEP_END:
			
			Return sensorCheckResult
		End Function

		Public Function putWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim loc As LocationEx = LocationEx.getDestJointPos()
			Dim targetStation As Station = theStationManager.getStation(stage)
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
STEP1:			
			
			If theSystem.demoMode = 0 Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime) = SENSOR_CHECK_RESULT_NOWAFER Then
						sensorCheckResult = ERR_NO_WAFER_DURING_PUT
						Exit For
					End If
				Next i
			End If
			
			If sensorCheckResult <> 0 Then
				Return sensorCheckResult
			End If
			
			If targetStation.putDownOffset > targetStation.putUpOffset Then
				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.putUpOffset)) '1.5mm -> %
				End If
				loc.liftDown(targetStation.putUpOffset)
			Else
				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.putDownOffset)) '1.5mm -> %
				End If
				loc.liftDown(targetStation.putDownOffset)
			End If
			theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
			
			theMoveEx.waitForEOM()
			
			If motionStep = EXTA_STEP Then
				Goto STEP_END
			End If
STEP2:

			myRobot(Robot.selected-1).armGrip(armList,False,True)
			
			If theSystem.demoMode = 0 And magneticWaferDetectSensor = False Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
						sensorCheckResult = ERR_CANNOT_UNGRIP
						Exit For
					End If
				Next i
			End If

STEP3:
			If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
				myRobot(Robot.selected-1).armGrip(armList,True,True)
			End If
			
			loc.liftUp(targetStation.putDownOffset)
			theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
			
			theMoveEx.wait()
			
STEP_END:

			Return sensorCheckResult
		End Function
		
	End Class
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module EdgeGripArmSequenceModule

	Public Class EdgeGripSequence
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public ReadOnly Property defaultGripStage As Boolean
		 	Get
	            Return True
	        End Get
	    End Property
		
		Public ReadOnly Property isBackSide As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Public ReadOnly Property isUseextraGuideGrip As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Private m_useJustTeachingLocationOffset As Boolean = False
		Public Property useJustTeachingLocationOffset As Boolean
		 	Get
	            Return m_useJustTeachingLocationOffset
	        End Get
			Set (value As Boolean)
				m_useJustTeachingLocationOffset = value
			End Set
	    End Property
		
		Private m_useClampGetMotion As Boolean = False
		Public Property useClampGetMotion As Boolean
		 	Get
	            Return m_useClampGetMotion
	        End Get
			Set (value As Boolean)
				m_useClampGetMotion = value
			End Set
	    End Property
		
		Private m_useCheckUngrip As Boolean = True
		Public Property useCheckUngrip As Boolean
		 	Get
	            Return m_useCheckUngrip
	        End Get
			Set (value As Boolean)
				m_useCheckUngrip = value
			End Set
	    End Property
		
		Private m_gripOnRetractArmPercent As Integer = 10
		Public Property gripOnRetractArmPercent As Integer
		 	Get
	            Return m_gripOnRetractArmPercent
	        End Get
			Set (value As Integer)
				m_gripOnRetractArmPercent = value
			End Set
	    End Property
		
		Private m_magneticWaferDetectSensor As Boolean = False ' for magnatic wafer detect sensor
		Public Property magneticWaferDetectSensor As Boolean
		 	Get
	            Return m_magneticWaferDetectSensor
	        End Get
			Set (value As Boolean)
				m_magneticWaferDetectSensor = value
			End Set
	    End Property
		
		Private Dim singleActer As SingleAct = Nothing
		Private Dim inverseSingleActer As InverseSingleAct = Nothing
		Private Dim multiActer As MultiAct = Nothing
		
		Private Dim m_homeSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_ungripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_reverse_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(singleActer As SingleAct)
			Me.singleActer = singleActer
		End Sub
		
		Public Sub New(inverseSingleActer As InverseSingleAct)
			Me.inverseSingleActer = inverseSingleActer
		End Sub
		
		Public Sub New(multiActer As MultiAct)
			Me.multiActer = multiActer
		End Sub
		
		Public Sub setFinger(fingerIndex As Integer, homeSensorIO As Integer, gripSensorIO As Integer, ungripSensorIO As Integer)
			m_homeSensorIO(fingerIndex-1) = homeSensorIO
			m_gripSensorIO(fingerIndex-1) = gripSensorIO
			m_ungripSensorIO(fingerIndex-1) = ungripSensorIO
			m_reverse_gripSensorIO(fingerIndex-1) = -1 * gripSensorIO
		End Sub
		
		Public Function isGrip() As Boolean
			Dim result As Boolean = False
			
			If Not(singleActer Is Nothing) Then
				result = singleActer.isGrip()
			ElseIf Not(inverseSingleActer Is Nothing) Then
				result = inverseSingleActer.isGrip()
			ElseIf Not(multiActer Is Nothing) Then
				result = multiActer.isGrip()
			End If
			
			Return result
		End Function
		
		Public Function isExtraGuideGrip() As Boolean
			Return False
		End Function
		
		Public Sub grip(flag As Boolean)
			If Not(singleActer Is Nothing) Then
				singleActer.grip(flag)
			ElseIf Not(inverseSingleActer Is Nothing) Then
				inverseSingleActer.grip(flag)
			ElseIf Not(multiActer Is Nothing) Then
				multiActer.grip(flag)
			End If
		End Sub
		
		Public Sub extraGuideGrip(flag As Boolean)
		End Sub
		
		Public Function pusherGripTimeTest(flag As Boolean, fullStroke As Boolean,armList() As RobotArm) As Double
			Dim gripTimer As New TimeStamp
			gripTimer.startTimer()
			If flag = True Then
				grip(True)
				If fullStroke = True Then
					myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,True,m_ungripSensorIO)
				Else
					myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,True,m_gripSensorIO)
				End If
			Else
				grip(False)
				myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,False,m_homeSensorIO)
			End If
				
			Return gripTimer.elapsedTime()
		End Function
		
		Public Function fingerSensorCheck(fingerIndex As Integer) As Boolean
			If m_gripSensorIO(fingerIndex-1) <> 0 Then	
				Return robotIO.getDIO(m_gripSensorIO(fingerIndex-1))
			Else
				Return False
			End If
		End Function
		
		Public Function fingerHomeCheck(fingerIndex As Integer) As Boolean
			If m_homeSensorIO(fingerIndex-1) <> 0 Then
				Return robotIO.getDIO(m_homeSensorIO(fingerIndex-1))
			Else
				Return True
			End If
		End Function
		
		Public Function getFingerSensorGripIO(fingerIndex As Integer) As Integer
			Return m_gripSensorIO(fingerIndex-1)
		End Function
		
		
		
		
		
		
		
		' prepare arm motion
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			If mode = PUT_MODE Then
				If targetStation.isUseSmartMotion() = True Then
					loc.liftBack(arm,targetStation.putOffset,targetStation.teachingLocation(arm,2))
				Else
					loc.liftBack(arm,targetStation.putOffset)
				End If
	  		ElseIf mode = GET_MODE Then
				If targetStation.isUseSmartMotion() = True Then
					loc.liftFront(arm,targetStation.getOffset,targetStation.teachingLocation(arm,2))
				Else
					loc.liftFront(arm,targetStation.getOffset)
				End If
	  		End If
			Return loc
		End Function
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer, offset As Double) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim distance As Double
			If mode = PUT_MODE Then
				distance = targetStation.putOffset - offset
				If targetStation.isUseSmartMotion() = True Then
					loc.liftBack(arm,distance,targetStation.teachingLocation(arm,2))
				Else
					loc.liftBack(arm,distance)
				End If
	  		ElseIf mode = GET_MODE Then
				distance = targetStation.getOffset + offset
				If targetStation.isUseSmartMotion() = True Then
					loc.liftFront(arm,distance,targetStation.teachingLocation(arm,2))
				Else
					loc.liftFront(arm,distance)
				End If
	  		End If
			Return loc
		End Function
		
		Public Sub prepareRetractArm(arm As RobotArm, mode As Integer)

		End Sub
		
		Public Sub afterRetractArm(arm As RobotArm, mode As Integer)
			Dim i As Integer
			If mode = PUT_MODE Then
				If theSystem.demoMode = 0 Then
					myRobot(Robot.selected-1).armGripWaitSignal_and(theSystem.suctionOnTime+theSystem.gripperMaximumTime,Nothing,True,m_ungripSensorIO,m_reverse_gripSensorIO)
				Else
					myRobot(Robot.selected-1).armGripWaitSignal_and(theSystem.suctionOnTime,Nothing,True,m_ungripSensorIO,m_reverse_gripSensorIO)
				End If
			End If
		End Sub
		
		
		
		
		' get/put motion
		
		Public Function getWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim retry As Integer = 0
			
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim retryCount As Integer = theSystem.retryCount
			If retryCount < 0 Then
				retryCount = 0
			End If
			
			Dim downOffset As Double
			Dim upOffset As Double
			If useJustTeachingLocationOffset = True Then
				downOffset = targetStation.getDownOffset
				upOffset = targetStation.getUpOffset
			Else
				If targetStation.getUpOffset >= 0 Then
					If useClampGetMotion = True Then
						downOffset = (targetStation.getDownOffset+targetStation.getUpOffset)*0.40
						upOffset = (targetStation.getDownOffset+targetStation.getUpOffset)*0.60
					Else
						downOffset = (targetStation.getDownOffset+targetStation.getUpOffset)*0.75
						upOffset = (targetStation.getDownOffset+targetStation.getUpOffset)*0.25
					End If
				Else
					downOffset = targetStation.getDownOffset
					upOffset = targetStation.getUpOffset	
				End If
			End If
			
			Dim loc As LocationEx
			Dim zUpProfile As ProfileEx = myRobot(Robot.Selected-1).theProfileManager.getZProfile(True)
			Dim zDownProfile As ProfileEx = myRobot(Robot.Selected-1).theProfileManager.getZProfile(False)
			If targetStation.isUseSmartMotion() = True Then
				loc = LocationEx.getDestCartPos(False)
				zUpProfile.pf.Straight = True
				zDownProfile.pf.Straight = True
			Else
				loc = LocationEx.getDestJointPos()
			End If
			
			If motionStep <> ALL_STEP Then
				retryCount = 0
			End If
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
			If theSystem.demoMode = 0 And useCheckUngrip = True Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
						Return ERR_CANNOT_UNGRIP
					End If
				Next i
			End If
			
			For retry = 0 To retryCount

				sensorCheckResult = 0
				
STEP1:
				
				If motionStep = EXTA_STEP Then
					If ContinuousMotionMode = True Then
						theMoveEx.motionOverlap(0,(1.5*100/targetStation.getDownOffset)) '1.5mm -> %
					End If
					loc.liftUp(targetStation.getDownOffset)
				Else
					If ContinuousMotionMode = True Then
						theMoveEx.motionOverlap(0,(1.5*100/downOffset)) '1.5mm -> %
					End If
					loc.liftUp(downOffset)
				End If
				theMoveEx.loc(loc,zUpProfile)
				
				If upOffset < 0 Or useClampGetMotion = True Then
					theMoveEx.wait()
					For i = 0 To armList.GetUpperBound(0)-1
						If targetStation.isUseSmartMotion() = True Then
							loc.liftBack(armList(i),targetStation.getOffset,targetStation.teachingLocation(armList(0),2))
						Else
							loc.liftBack(armList(i),targetStation.getOffset)
						End If
					Next i
					theMoveEx.loc(loc,zUpProfile)
				End If
				
				theMoveEx.waitForEOM()
				
				If motionStep = EXTA_STEP Then
					Goto STEP_END
				End If
				
STEP2:
				
				If motionStep = RETA_STEP And upOffset >= 0 And useClampGetMotion = False Then
					loc.liftUp(downOffset - targetStation.getDownOffset)
					theMoveEx.loc(loc,zUpProfile)
					theMoveEx.wait()
				End If
				
				If upOffset >= 0 Then
					If useClampGetMotion = True Then
						loc.liftUp(upOffset)
					Else
						For i = 0 To armList.GetUpperBound(0)-1
							If targetStation.isUseSmartMotion() = True Then
								loc.liftBack(armList(i),targetStation.getOffset+targetStation.putOffset,targetStation.teachingLocation(armList(0),2))
							Else
								loc.liftBack(armList(i),targetStation.getOffset+targetStation.putOffset)
							End If
						Next i
						loc.liftUp(upOffset)
					End If
					theMoveEx.loc(loc,zUpProfile)
					theMoveEx.wait()
				End If
				
				If motionStep = CROSS_STEP Then
					Goto STEP_END
				End If
				MotionCountTimer.MotionElapsedTime("GetUp")
				
				GripTimer.MtionStartTimer()
				myRobot(Robot.selected-1).armGrip(armList,True,True,True)
				
				If theSystem.demoMode = 0 Then
					If armList(0).gripHalfStrokeTime_ms < theSystem.gripperMinimumTime Then
						sensorCheckResult = ERR_PUSHER_SPEED_HIGH
					End If

					Dim ret As Integer
					For i = 0 To armList.GetUpperBound(0) - 1
						ret = armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime)
						If ret = SENSOR_CHECK_RESULT_NOWAFER Then
							sensorCheckResult = ERR_NO_WAFER_DURING_GET
							Exit For
						ElseIf ret = SENSOR_CHECK_RESULT_OVERWAFER Then
							sensorCheckResult = OVER_WAFER_DURING_GET
							Exit For
						End If
					Next i
				End If

STEP3:				
				If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
					If upOffset >= 0 Then
						myRobot(Robot.selected-1).armGrip(armList,False,True)
						
						If useClampGetMotion = True Then
							loc.liftDown(upOffset)
							theMoveEx.loc(loc,zDownProfile)
							theMoveEx.waitForEOM()
							
							For i = 0 To armList.GetUpperBound(0)-1
								If targetStation.isUseSmartMotion() = True Then
									loc.liftFront(armList(i),targetStation.getOffset+targetStation.putOffset,targetStation.teachingLocation(armList(0),2))
								Else
									loc.liftFront(armList(i),targetStation.getOffset+targetStation.putOffset)
								End If
							Next i
							theMoveEx.loc(loc,zDownProfile)
							theMoveEx.waitForEOM()
						Else
							For i = 0 To armList.GetUpperBound(0)-1
								If targetStation.isUseSmartMotion() = True Then
									loc.liftFront(armList(i),targetStation.getOffset+targetStation.putOffset,targetStation.teachingLocation(armList(0),2))
								Else
									loc.liftFront(armList(i),targetStation.getOffset+targetStation.putOffset)
								End If
							Next i
							loc.liftDown(upOffset)
							theMoveEx.loc(loc,zDownProfile)
							theMoveEx.waitForEOM()
						End If
						loc.liftDown(downOffset)
						theMoveEx.loc(loc,zDownProfile)
						theMoveEx.wait()
					Else
						ThrowError(ERR_NO_WAFER_DURING_GET)
					End If

				Else
				
					GripTimer.MotionElapsedTime("Grip")
					If upOffset < 0 Then
						loc.liftUp(upOffset)
					
						theMoveEx.loc(loc,zDownProfile)
						theMoveEx.wait()
					End If
					
					Exit For
				End If
			Next retry

STEP_END:

			Return sensorCheckResult
		End Function
		
		Public Function putWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim targetStation As Station = theStationManager.getStation(stage)
			
			Dim downOffset As Double
			Dim upOffset As Double		
			
			If useJustTeachingLocationOffset = True Then
				downOffset = targetStation.putDownOffset
				upOffset = targetStation.putUpOffset
			Else
				If targetStation.putUpOffset >= 0 Then
					If useClampGetMotion = True Then
						downOffset = (targetStation.putDownOffset+targetStation.putUpOffset)*0.40
						upOffset = (targetStation.putDownOffset+targetStation.putUpOffset)*0.60
					Else
						downOffset = (targetStation.putDownOffset+targetStation.putUpOffset)*0.40
						upOffset = (targetStation.putDownOffset+targetStation.putUpOffset)*0.60
					End If
				Else
					downOffset = targetStation.putDownOffset
					upOffset = targetStation.putUpOffset
				End If
			End If
			
			Dim loc As LocationEx
			Dim zUpProfile As ProfileEx = myRobot(Robot.Selected-1).theProfileManager.getZProfile(True)
			Dim zDownProfile As ProfileEx = myRobot(Robot.Selected-1).theProfileManager.getZProfile(False)
			If targetStation.isUseSmartMotion() = True Then
				loc = LocationEx.getDestCartPos()
				zUpProfile.pf.Straight = True
				zDownProfile.pf.Straight = True
			Else
				loc = LocationEx.getDestJointPos(False)
			End If
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
STEP1:

			If theSystem.demoMode = 0 Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime) = SENSOR_CHECK_RESULT_NOWAFER Then
						sensorCheckResult = ERR_NO_WAFER_DURING_PUT
						Exit For
					End If
				Next i
			End If
			
			If sensorCheckResult <> 0 Then
				Return sensorCheckResult
			End If
'			
'			If ContinuousMotionMode = True Then
'				theMoveEx.motionOverlap(0,(1.5*100/upOffset)) '1.5mm -> %
'			End If
			
			If motionStep = EXTA_STEP Then
				If targetStation.putUpOffset >= 0 Then
					loc.liftDown(targetStation.putUpOffset)
					theMoveEx.loc(loc,zDownProfile)
				Else
					loc.liftDown(targetStation.putUpOffset)
					theMoveEx.loc(loc,zUpProfile)
				End If
			Else
				If upOffset >= 0 Then
					loc.liftDown(upOffset)
					theMoveEx.loc(loc,zDownProfile)
				Else
					loc.liftDown(upOffset)
					theMoveEx.loc(loc,zUpProfile)
				End If
				
			End If
			
			If motionStep = EXTA_STEP Then
				theMoveEx.waitForEOM()
				Goto STEP_END
			End If

STEP2:
			GripTimer.MtionStartTimer()
			If theSystem.demoMode = 0 And useCheckUngrip = True Then
				myRobot(Robot.selected-1).armGrip(armList,False,False,True)
					For i = 0 To armList.GetUpperBound(0) - 1
						If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
							sensorCheckResult = ERR_CANNOT_UNGRIP
							Exit For
						End If
					Next i
			Else
				myRobot(Robot.selected-1).armGrip(armList,False,True,True)
			End If
			GripTimer.MotionElapsedTime("Ungrip")
			'Console.WriteLine("Ungrinp Real time : " &CStr(GripTimer.Ungrip))
			theMoveEx.waitForEOM()

STEP3:
			If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
				If upOffset >= 0 Then
					loc.liftUp(upOffset)
					theMoveEx.loc(loc,zUpProfile)
					
					theMoveEx.wait()
					
					myRobot(Robot.selected-1).armGrip(armList,True,True)
					
					Return sensorCheckResult
				Else
					ThrowError(ERR_CANNOT_UNGRIP)
				End If
			End If
			
			
			
			If motionStep = RETA_STEP Or motionStep = RECO_STEP Then
				loc.liftDown(upOffset - targetStation.putUpOffset)
				theMoveEx.loc(loc,zDownProfile)
				theMoveEx.waitForEOM()
			End If

			For i = 0 To armList.GetUpperBound(0)-1
				If targetStation.isUseSmartMotion() = True Then
					loc.liftFront(armList(i),targetStation.getOffset,targetStation.teachingLocation(armList(0),2))
				Else
					loc.liftFront(armList(i),targetStation.getOffset)
				End If
			Next i
			
			If upOffset < 0 Then
				theMoveEx.loc(loc,zDownProfile)
				theMoveEx.motionOverlap(1, 2)
			End If
			
			loc.liftDown(downOffset)
			theMoveEx.loc(loc,zDownProfile)
			
			theMoveEx.wait()
	
STEP_END:

			Return sensorCheckResult
		End Function
		
	End Class
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module PocketGripArmSequenceModule

	Public Class PocketGripSequence
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public ReadOnly Property defaultGripStage As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Public ReadOnly Property isBackSide As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Public ReadOnly Property isUseextraGuideGrip As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Private m_isUseTwoStepMotion As Boolean = True
		Public Property isUseTwoStepMotion As Boolean
		 	Get
	            Return m_isUseTwoStepMotion
	        End Get
			Set (value As Boolean)
				m_isUseTwoStepMotion = value
			End Set
	    End Property
		
		Private m_magneticWaferDetectSensor As Boolean = True
		Public Property magneticWaferDetectSensor As Boolean
		 	Get
	            Return m_magneticWaferDetectSensor
	        End Get
			Set (value As Boolean)
				m_magneticWaferDetectSensor = value
			End Set
	    End Property
	
		Private Dim m_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_reverse_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
	
	
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New()
		End Sub
		
		Public Sub setFinger(fingerIndex As Integer, gripSensorIO As Integer)
			m_gripSensorIO(fingerIndex-1) = gripSensorIO
			m_reverse_gripSensorIO(fingerIndex-1) = -1 * gripSensorIO
		End Sub
		
		Public Function isGrip() As Boolean
			Return False
		End Function
		
		Public Function isExtraGuideGrip() As Boolean
			Return False
		End Function
		
		Public Sub grip(flag As Boolean)
		End Sub
		
		Public Sub extraGuideGrip(flag As Boolean)
		End Sub
		
		Public Function pusherGripTimeTest(flag As Boolean, fullStroke As Boolean) As Double
			Return 0
		End Function
		
		Public Function fingerSensorCheck(fingerIndex As Integer) As Boolean
			If m_gripSensorIO(fingerIndex-1) <> 0 Then	
				Return robotIO.getDIO(m_gripSensorIO(fingerIndex-1))
			Else
				Return False
			End If
		End Function
		
		Public Function fingerHomeCheck(fingerIndex As Integer) As Boolean
			Return True
		End Function
		
		Public Function getFingerSensorGripIO(fingerIndex As Integer) As Integer
			Return m_gripSensorIO(fingerIndex-1)
		End Function
		
		
		
	
		
		
		' prepare arm motion
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			If mode = PUT_MODE Then
				If targetStation.isUseSmartMotion() = True Then
					loc.liftBack(arm,targetStation.putOffset,targetStation.teachingLocation(arm,2))
				Else
					loc.liftBack(arm,targetStation.putOffset)
				End If
	  		ElseIf mode = GET_MODE Then
				If targetStation.isUseSmartMotion() = True Then
					loc.liftFront(arm,targetStation.getOffset,targetStation.teachingLocation(arm,2))
				Else
					loc.liftFront(arm,targetStation.getOffset)
				End If
	  		End If
			Return loc
		End Function
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer, offset As Double) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim distance As Double
			If mode = PUT_MODE Then
				distance = targetStation.putOffset - offset
				If targetStation.isUseSmartMotion() = True Then
					loc.liftBack(arm,distance,targetStation.teachingLocation(arm,2))
				Else
					loc.liftBack(arm,distance)
				End If
	  		ElseIf mode = GET_MODE Then
				distance = targetStation.getOffset + offset
				If targetStation.isUseSmartMotion() = True Then
					loc.liftFront(arm,distance,targetStation.teachingLocation(arm,2))
				Else
					loc.liftFront(arm,distance)
				End If
	  		End If
			Return loc
		End Function
		
		
		Public Sub prepareRetractArm(arm As RobotArm, mode As Integer)
		End Sub
		
		Public Sub afterRetractArm(arm As RobotArm, mode As Integer)
		End Sub
		
		
		
		
		
		' get/put motion
		
		Public Function getWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim retry As Integer = 0
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim loc As LocationEx = LocationEx.getDestJointPos()
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim retryCount As Integer = theSystem.retryCount
			
			If motionStep <> ALL_STEP Then
				retryCount = 0
			End If
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			For retry = 0 To retryCount

				sensorCheckResult = 0
				
STEP1:

				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.getDownOffset)) '1.5mm -> %
				End If
				
				loc.liftUp(targetStation.getDownOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
				
				If isUseTwoStepMotion = True Then
					theMoveEx.waitForEOM()
				End If

				If motionStep = EXTA_STEP Then
					Goto STEP_END
				End If
				
				If motionStep = CROSS_STEP Then
					Goto STEP_END
				End If
				
STEP2:

				loc.liftUp(targetStation.getUpOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
				
				theMoveEx.wait()

				If theSystem.demoMode = 0 And myRobot(Robot.Selected-1).onlyWaferCheckWhenArmRetract = False Then
					Dim ret As Integer
					For i = 0 To armList.GetUpperBound(0) - 1
						ret = armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime)
						If ret = SENSOR_CHECK_RESULT_NOWAFER Then
							sensorCheckResult = ERR_NO_WAFER_DURING_GET
							Exit For
						ElseIf ret = SENSOR_CHECK_RESULT_OVERWAFER Then
							sensorCheckResult = OVER_WAFER_DURING_GET
							Exit For
						End If
					Next i
				End If

				If sensorCheckResult <> 0 Then
					loc.liftDown(targetStation.getUpOffset)
					theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
					
					theMoveEx.waitForEOM()
					
					loc.liftDown(targetStation.getDownOffset)
					theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
					
					theMoveEx.wait()
					
				Else
					Exit For
				End If
			Next retry

STEP_END:

			Return sensorCheckResult
		End Function
		
		Public Function putWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim loc As LocationEx = LocationEx.getDestJointPos()
			Dim targetStation As Station = theStationManager.getStation(stage)
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
STEP1:

			If theSystem.demoMode = 0 And myRobot(Robot.Selected-1).onlyWaferCheckWhenArmRetract = False Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime) = SENSOR_CHECK_RESULT_NOWAFER Then
						sensorCheckResult = ERR_NO_WAFER_DURING_PUT
						Exit For
					End If
				Next i
			End If
			
			If sensorCheckResult <> 0 Then
				Return sensorCheckResult
			End If
			
'			If ContinuousMotionMode = True Then
'				theMoveEx.motionOverlap(0,(1.5*100/targetStation.putUpOffset)) '1.5mm -> %
'			End If
			
			loc.liftDown(targetStation.putUpOffset)
			theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
			
			If isUseTwoStepMotion = True Then
				theMoveEx.waitForEOM()
			End If
			
			If motionStep = EXTA_STEP Then
				Goto STEP_END
			End If
			
STEP2:

			loc.liftDown(targetStation.putDownOffset)
			theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
			
			theMoveEx.wait()
			
STEP_END:

			Return sensorCheckResult
		End Function
		
	End Class
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module SemiEdgeArmSequenceModule

	Public Class SemiEdgeGripSequence
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public ReadOnly Property defaultGripStage As Boolean
		 	Get
	            Return True
	        End Get
	    End Property
		
		Public ReadOnly Property isBackSide As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Public ReadOnly Property isUseextraGuideGrip As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Private m_gripOnRetractArmPercent As Integer = 10
		Public Property gripOnRetractArmPercent As Integer
		 	Get
	            Return m_gripOnRetractArmPercent
	        End Get
			Set (value As Integer)
				m_gripOnRetractArmPercent = value
			End Set
	    End Property
		
		Private m_magneticWaferDetectSensor As Boolean = False ' for magnatic wafer detect sensor
		Public Property magneticWaferDetectSensor As Boolean
		 	Get
	            Return m_magneticWaferDetectSensor
	        End Get
			Set (value As Boolean)
				m_magneticWaferDetectSensor = value
			End Set
	    End Property

		Private Dim singleActer As SingleAct = Nothing
		Private Dim inverseSingleActer As InverseSingleAct = Nothing
		Private Dim multiActer As MultiAct = Nothing
		
		Private Dim m_homeSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer 
		Private Dim m_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_ungripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_reverse_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer

		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(singleActer As SingleAct)
			Me.singleActer = singleActer
		End Sub
		
		Public Sub New(inverseSingleActer As InverseSingleAct)
			Me.inverseSingleActer = inverseSingleActer
		End Sub
		
		Public Sub New(multiActer As MultiAct)
			Me.multiActer = multiActer
		End Sub
		
		Public Sub setFinger(fingerIndex As Integer, homeSensorIO As Integer, gripSensorIO As Integer, ungripSensorIO As Integer)
			m_homeSensorIO(fingerIndex-1) = homeSensorIO
			m_gripSensorIO(fingerIndex-1) = gripSensorIO
			m_ungripSensorIO(fingerIndex-1) = ungripSensorIO
			m_reverse_gripSensorIO(fingerIndex-1) = -1 * gripSensorIO
		End Sub
		
		Public Function isGrip() As Boolean
			Dim result As Boolean = False
			
			If Not(singleActer Is Nothing) Then
				result = singleActer.isGrip()
			ElseIf Not(inverseSingleActer Is Nothing) Then
				result = inverseSingleActer.isGrip()
			ElseIf Not(multiActer Is Nothing) Then
				result = multiActer.isGrip()
			End If
			
			Return result
		End Function
		
		Public Function isExtraGuideGrip() As Boolean
			Return False
		End Function
		
		Public Sub grip(flag As Boolean)
			If Not(singleActer Is Nothing) Then
				singleActer.grip(flag)
			ElseIf Not(inverseSingleActer Is Nothing) Then
				inverseSingleActer.grip(flag)
			ElseIf Not(multiActer Is Nothing) Then
				multiActer.grip(flag)
			End If
		End Sub
		
		Public Sub extraGuideGrip(flag As Boolean)
		End Sub
		
		Public Function pusherGripTimeTest(flag As Boolean, fullStroke As Boolean) As Double
			Dim gripTimer As New TimeStamp
			gripTimer.startTimer()
			If flag = True Then
				grip(True)
				If fullStroke = True Then
					myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,True,m_ungripSensorIO)
				Else
					myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,True,m_gripSensorIO)
				End If
			Else
				grip(False)
				myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,False,m_homeSensorIO)
			End If
			Return gripTimer.elapsedTime()
		End Function
		
		Public Function fingerSensorCheck(fingerIndex As Integer) As Boolean
			If m_gripSensorIO(fingerIndex-1) <> 0 Then	
				Return robotIO.getDIO(m_gripSensorIO(fingerIndex-1))
			Else
				Return False
			End If
		End Function
		
		Public Function fingerHomeCheck(fingerIndex As Integer) As Boolean
			If m_homeSensorIO(fingerIndex-1) <> 0 Then	
				Return robotIO.getDIO(m_homeSensorIO(fingerIndex-1))
			Else
				Return True
			End If
		End Function
		
		Public Function getFingerSensorGripIO(fingerIndex As Integer) As Integer
			Return m_gripSensorIO(fingerIndex-1)
		End Function
		
		
		
		
		
		
		
		
		' prepare arm motion
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			If mode = PUT_MODE Then
				If targetStation.isUseSmartMotion() = True Then
					loc.liftBack(arm,targetStation.putOffset,targetStation.teachingLocation(arm,2))
				Else
					loc.liftBack(arm,targetStation.putOffset)
				End If
	  		End If
			Return loc
		End Function
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer, offset As Double) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim distance As Double
			If mode = PUT_MODE Then
				distance = targetStation.putOffset - offset
			Else
				distance = -offset
			End If
			If targetStation.isUseSmartMotion() = True Then
				loc.liftBack(arm,distance,targetStation.teachingLocation(arm,2))
			Else
				loc.liftBack(arm,distance)
			End If
			Return loc
		End Function
		
		Public Sub prepareRetractArm(arm As RobotArm, mode As Integer)
			If mode = GET_MODE Or mode = PUT_MODE Then
				RobotArm.AddArmEventList(arm,RobotArm.EVENT_ARM_GRIP)
				Move.Trigger(0, gripOnRetractArmPercent, RobotArm.ArmEventThread, RobotArm.EVENT_ARM_GRIP)
			End If
		End Sub
		
		Public Sub afterRetractArm(arm As RobotArm, mode As Integer)
			Dim i As Integer
			If mode = PUT_MODE Then
				If theSystem.demoMode = 0 Then
					myRobot(Robot.selected-1).armGripWaitSignal_and(theSystem.suctionOnTime+theSystem.gripperMaximumTime,Nothing,True,m_ungripSensorIO,m_reverse_gripSensorIO)
				Else
					myRobot(Robot.selected-1).armGripWaitSignal_and(theSystem.suctionOnTime,Nothing,True,m_ungripSensorIO,m_reverse_gripSensorIO)
				End If
			End If
		End Sub
		
		
		
		' get/put motion
		
		Public Function getWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim retry As Integer = 0
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim retryCount As Integer = theSystem.retryCount
			If retryCount < 0 Then
				retryCount = 0
			End If
			
			Dim downOffset As Double = targetStation.getDownOffset
			Dim upOffset As Double = targetStation.getUpOffset
			
			Dim loc As LocationEx
			Dim zUpProfile As ProfileEx = myRobot(Robot.Selected-1).theProfileManager.getZProfile(True)
			Dim zDownProfile As ProfileEx = myRobot(Robot.Selected-1).theProfileManager.getZProfile(False)
			If targetStation.isUseSmartMotion() = True Then
				loc = LocationEx.getDestCartPos()
				zUpProfile.pf.Straight = True
				zDownProfile.pf.Straight = True
			Else
				loc = LocationEx.getDestJointPos()
			End If
			
			If motionStep <> ALL_STEP Then
				retryCount = 0
			End If
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
			If theSystem.demoMode = 0 Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
						Return ERR_CANNOT_UNGRIP
					End If
				Next i
			End If
			
			For retry = 0 To retryCount
				
				sensorCheckResult = 0
				
STEP1:
				
				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/downOffset)) '1.5mm -> %
				End If
				
				loc.liftUp(downOffset)
				theMoveEx.loc(loc,zUpProfile)

				theMoveEx.waitForEOM()
				
				If upOffset < 0 Then
					For i = 0 To armList.GetUpperBound(0)-1
						If targetStation.isUseSmartMotion() = True Then
							loc.liftBack(armList(i),targetStation.getOffset,targetStation.teachingLocation(armList(0),2))
						Else
							loc.liftBack(armList(i),targetStation.getOffset)
						End If
					Next i
					
					theMoveEx.loc(loc,zUpProfile)
					theMoveEx.wait()
				End If
				
				If motionStep = EXTA_STEP Then
					Goto STEP_END
				End If
				
STEP2:

				If upOffset >= 0 Then
					For i = 0 To armList.GetUpperBound(0)-1
						If targetStation.isUseSmartMotion() = True Then
							loc.liftBack(armList(i),targetStation.getOffset+targetStation.putOffset,targetStation.teachingLocation(armList(0),2))
						Else
							loc.liftBack(armList(i),targetStation.getOffset+targetStation.putOffset)
						End If
					Next i
	
					loc.liftUp(upOffset)
					
					theMoveEx.loc(loc,zUpProfile)
					theMoveEx.wait()
				End If
				
				If motionStep = CROSS_STEP Then
					Goto STEP_END
				End If
				
				myRobot(Robot.selected-1).armGrip(armList,True,True,True)
				If theSystem.demoMode = 0 Then
					If armList(0).gripHalfStrokeTime_ms < theSystem.gripperMinimumTime Then
						sensorCheckResult = ERR_PUSHER_SPEED_HIGH
					End If
				End If
				
				If theSystem.demoMode = 0 Then
					Dim ret As Integer
					For i = 0 To armList.GetUpperBound(0) - 1
						ret = armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime)
						If ret = SENSOR_CHECK_RESULT_NOWAFER Then
							sensorCheckResult = ERR_NO_WAFER_DURING_GET
							Exit For
						ElseIf ret = SENSOR_CHECK_RESULT_OVERWAFER Then
							sensorCheckResult = OVER_WAFER_DURING_GET
							Exit For
						End If
					Next i
				End If

STEP3:				
				If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
					If upOffset >= 0 Then
						myRobot(Robot.selected-1).armGrip(armList,False,True)
						
						For i = 0 To armList.GetUpperBound(0)-1
							If targetStation.isUseSmartMotion() = True Then
								loc.liftFront(armList(i),targetStation.getOffset+targetStation.putOffset,targetStation.teachingLocation(armList(0),2))
							Else
								loc.liftFront(armList(i),targetStation.getOffset+targetStation.putOffset)
							End If
						Next i
						
						loc.liftDown(upOffset)
						theMoveEx.loc(loc,zDownProfile)
						
						theMoveEx.waitForEOM()
						
						loc.liftDown(downOffset)
						theMoveEx.loc(loc,zDownProfile)
						
						theMoveEx.wait()
						
					Else
						ThrowError(ERR_NO_WAFER_DURING_GET)
					End If

				Else
				
					If upOffset < 0 Then
						loc.liftUp(upOffset)
					
						theMoveEx.loc(loc,zDownProfile)
						theMoveEx.wait()
					End If
					
					Exit For
				End If
			Next retry

STEP_END:

			Return sensorCheckResult
		End Function
		
		Public Function putWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim loc As LocationEx = LocationEx.getDestJointPos()
			Dim targetStation As Station = theStationManager.getStation(stage)
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If

STEP1:

			If theSystem.demoMode = 0 Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime) = SENSOR_CHECK_RESULT_NOWAFER Then
						sensorCheckResult = ERR_NO_WAFER_DURING_PUT
						Exit For
					End If
				Next i
			End If
			
			If sensorCheckResult <> 0 Then
				Return sensorCheckResult
			End If
			
'			If ContinuousMotionMode = True Then
'				theMoveEx.motionOverlap(0,(1.5*100/targetStation.putUpOffset)) '1.5mm -> %
'			End If
			
			If targetStation.putUpOffset >= 0 Then
				loc.liftDown(targetStation.putUpOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
			Else
				loc.liftDown(targetStation.putUpOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
			End If
			
			If motionStep = EXTA_STEP Then
				theMoveEx.waitForEOM()
				Goto STEP_END
			End If
			
STEP2:

			If theSystem.demoMode = 0 Then
				myRobot(Robot.selected-1).armGrip(armList,False,False,True)
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
						sensorCheckResult = ERR_CANNOT_UNGRIP
						Exit For
					End If
				Next i
			Else
				myRobot(Robot.selected-1).armGrip(armList,False,True,True)
			End If

			theMoveEx.waitForEOM()

STEP3:
			If sensorCheckResult <> 0 Or motionStep = RECO_STEP Then
				If targetStation.putUpOffset >= 0 Then
					loc.liftUp(targetStation.putUpOffset)
					theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
					
					theMoveEx.wait()
					
					myRobot(Robot.selected-1).armGrip(armList,True,True)
					
					Return sensorCheckResult
				Else
					ThrowError(ERR_CANNOT_UNGRIP)
				End If
			End If

			loc.liftDown(targetStation.putDownOffset)
			theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
			
			theMoveEx.wait()
	
STEP_END:

			Return sensorCheckResult
		End Function
		
	End Class
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module TongsArmSequenceModule

	Public Class TongsGripSequence
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public ReadOnly Property defaultGripStage As Boolean
		 	Get
	            Return True
	        End Get
	    End Property
		
		Public ReadOnly Property isBackSide As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Public ReadOnly Property isUseextraGuideGrip As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Private m_gripOnRetractArmPercent As Integer = 10
		Public Property gripOnRetractArmPercent As Integer
		 	Get
	            Return m_gripOnRetractArmPercent
	        End Get
			Set (value As Integer)
				m_gripOnRetractArmPercent = value
			End Set
	    End Property
		
		Private m_magneticWaferDetectSensor As Boolean = False ' for magnatic wafer detect sensor
		Public Property magneticWaferDetectSensor As Boolean
		 	Get
	            Return m_magneticWaferDetectSensor
	        End Get
			Set (value As Boolean)
				m_magneticWaferDetectSensor = value
			End Set
	    End Property
		
		Private Dim singleActer As SingleAct = Nothing
		Private Dim inverseSingleActer As InverseSingleAct = Nothing
		Private Dim multiActer As MultiAct = Nothing
		
		Private Dim m_homeSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer 
		Private Dim m_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_ungripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_reverse_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer

		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(singleActer As SingleAct)
			Me.singleActer = singleActer
		End Sub
		
		Public Sub New(inverseSingleActer As InverseSingleAct)
			Me.inverseSingleActer = inverseSingleActer
		End Sub
		
		Public Sub New(multiActer As MultiAct)
			Me.multiActer = multiActer
		End Sub
		
		Public Sub setFinger(fingerIndex As Integer, homeSensorIO As Integer, gripSensorIO As Integer, ungripSensorIO As Integer)
			m_homeSensorIO(fingerIndex-1) = homeSensorIO
			m_gripSensorIO(fingerIndex-1) = gripSensorIO
			m_ungripSensorIO(fingerIndex-1) = ungripSensorIO
			m_reverse_gripSensorIO(fingerIndex-1) = -1 * gripSensorIO
		End Sub
		
		Public Function isGrip() As Boolean
			Dim result As Boolean = False
			
			If Not(singleActer Is Nothing) Then
				result = singleActer.isGrip()
			ElseIf Not(inverseSingleActer Is Nothing) Then
				result = inverseSingleActer.isGrip()
			ElseIf Not(multiActer Is Nothing) Then
				result = multiActer.isGrip()
			End If
			
			Return result
		End Function
		
		Public Function isExtraGuideGrip() As Boolean
			Return False
		End Function
		
		Public Sub grip(flag As Boolean)
			If Not(singleActer Is Nothing) Then
				singleActer.grip(flag)
			ElseIf Not(inverseSingleActer Is Nothing) Then
				inverseSingleActer.grip(flag)
			ElseIf Not(multiActer Is Nothing) Then
				multiActer.grip(flag)
			End If
		End Sub
		
		Public Sub extraGuideGrip(flag As Boolean)
		End Sub
		
		Public Function pusherGripTimeTest(flag As Boolean, fullStroke As Boolean) As Double
			Dim gripTimer As New TimeStamp
			gripTimer.startTimer()
			If flag = True Then
				grip(True)
				If fullStroke = True Then
					myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,True,m_ungripSensorIO)
				Else
					myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,True,m_gripSensorIO)
				End If
			Else
				grip(False)
				myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,False,m_homeSensorIO)
			End If
			Return gripTimer.elapsedTime()
		End Function
		
		Public Function fingerSensorCheck(fingerIndex As Integer) As Boolean
			If m_gripSensorIO(fingerIndex-1) <> 0 Then	
				Return robotIO.getDIO(m_gripSensorIO(fingerIndex-1))
			Else
				Return False
			End If
		End Function
		
		Public Function fingerHomeCheck(fingerIndex As Integer) As Boolean
			If m_homeSensorIO(fingerIndex-1) <> 0 Then	
				Return robotIO.getDIO(m_homeSensorIO(fingerIndex-1))
			Else
				Return True
			End If
		End Function
		
		Public Function getFingerSensorGripIO(fingerIndex As Integer) As Integer
			Return m_gripSensorIO(fingerIndex-1)
		End Function
		
		
		
		
		
		
		
		
		' prepare arm motion
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			If mode = PUT_MODE Then
				If targetStation.isUseSmartMotion() = True Then
					loc.liftBack(arm,targetStation.putOffset,targetStation.teachingLocation(arm,2))
				Else
					loc.liftBack(arm,targetStation.putOffset)
				End If
	  		End If
			Return loc
		End Function
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer, offset As Double) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim distance As Double
			If mode = PUT_MODE Then
				distance = targetStation.putOffset - offset
			Else
				distance = -offset
			End If
			If targetStation.isUseSmartMotion() = True Then
				loc.liftBack(arm,distance,targetStation.teachingLocation(arm,2))
			Else
				loc.liftBack(arm,distance)
			End If

			Return loc
		End Function
		
		Public Sub prepareRetractArm(arm As RobotArm, mode As Integer)
			If mode = GET_MODE Or mode = PUT_MODE Then
				RobotArm.AddArmEventList(arm,RobotArm.EVENT_ARM_GRIP)
				Move.Trigger(0, gripOnRetractArmPercent, RobotArm.ArmEventThread, RobotArm.EVENT_ARM_GRIP)
			End If
		End Sub
		
		Public Sub afterRetractArm(arm As RobotArm, mode As Integer)
			Dim i As Integer
			If mode = PUT_MODE Then
				If theSystem.demoMode = 0 Then
					myRobot(Robot.selected-1).armGripWaitSignal_and(theSystem.suctionOnTime+theSystem.gripperMaximumTime,Nothing,True,m_ungripSensorIO,m_reverse_gripSensorIO)
				Else
					myRobot(Robot.selected-1).armGripWaitSignal_and(theSystem.suctionOnTime,Nothing,True,m_ungripSensorIO,m_reverse_gripSensorIO)
				End If
			End If
		End Sub
		
		
		
		' get/put motion
		
		Public Function getWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim retry As Integer = 0
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim loc As LocationEx = LocationEx.getDestJointPos()
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim retryCount As Integer = theSystem.retryCount
			
			If motionStep <> ALL_STEP Then
				retryCount = 0
			End If
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
			If theSystem.demoMode = 0 Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
						Return ERR_CANNOT_UNGRIP
					End If
				Next i
			End If
			
			For retry = 0 To retryCount
				
				sensorCheckResult = 0
				
STEP1:
				
				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.getDownOffset)) '1.5mm -> %
				End If

				loc.liftUp(targetStation.getDownOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
				
				theMoveEx.waitForEOM()			

				If motionStep = EXTA_STEP Then
					Goto STEP_END
				End If

STEP2:

				myRobot(Robot.selected-1).armGrip(armList,True,True,True)
				
				If motionStep = CROSS_STEP Then
					Goto STEP_END
				End If
				
				If theSystem.demoMode = 0 Then
					If armList(0).gripHalfStrokeTime_ms < theSystem.gripperMinimumTime Then
						sensorCheckResult = ERR_PUSHER_SPEED_HIGH
					End If
				End If

				If theSystem.demoMode = 0 Then
					Dim ret As Integer
					For i = 0 To armList.GetUpperBound(0) - 1
						ret = armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime)
						If ret = SENSOR_CHECK_RESULT_NOWAFER Then
							sensorCheckResult = ERR_NO_WAFER_DURING_GET
							Exit For
						ElseIf ret = SENSOR_CHECK_RESULT_OVERWAFER Then
							sensorCheckResult = OVER_WAFER_DURING_GET
							Exit For
						End If
					Next i
				End If

STEP3:
				If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
					myRobot(Robot.selected-1).armGrip(armList,False,True)

					loc.liftDown(targetStation.getDownOffset)
					theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
					
					theMoveEx.wait()
				Else
					loc.liftUp(targetStation.getUpOffset)
					theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
					
					theMoveEx.wait()
					
					Exit For
				End If
				
			Next retry

STEP_END:

			Return sensorCheckResult
		End Function
		
		Public Function putWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim loc As LocationEx = LocationEx.getDestJointPos()
			Dim targetStation As Station = theStationManager.getStation(stage)
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If


STEP1:

			If theSystem.demoMode = 0 Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime) = SENSOR_CHECK_RESULT_NOWAFER Then
						sensorCheckResult = ERR_NO_WAFER_DURING_PUT
						Exit For
					End If
				Next i
			End If
			
			If sensorCheckResult <> 0 Then
				Return sensorCheckResult
			End If
			
			If ContinuousMotionMode = True Then
				theMoveEx.motionOverlap(0,(1.5*100/targetStation.putUpOffset)) '1.5mm -> %
			End If
			
			loc.liftDown(targetStation.putUpOffset)
			theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
			
			theMoveEx.waitForEOM()
			
			If motionStep = EXTA_STEP Then
				Goto STEP_END
			End If
			
STEP2:
			
			If theSystem.demoMode = 0 Then
				myRobot(Robot.selected-1).armGrip(armList,False,False,True)
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
						sensorCheckResult = ERR_CANNOT_UNGRIP
						Exit For
					End If
				Next i
			Else
				myRobot(Robot.selected-1).armGrip(armList,False,True,True)
			End If

STEP3:			
			If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
				myRobot(Robot.selected-1).armGrip(armList,True,True)
				
				loc.liftUp(targetStation.putUpOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
				
				theMoveEx.wait()

				Return sensorCheckResult
			End If

			loc.liftDown(targetStation.putDownOffset)
			theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
			
			theMoveEx.wait()
	
STEP_END:

			Return sensorCheckResult
		End Function
		
	End Class
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module TwoStepClampGripArmSequenceModule

	Public Class TwoStepClampGripSequence
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public ReadOnly Property defaultGripStage As Boolean
		 	Get
	            Return True
	        End Get
	    End Property
		
		Public ReadOnly Property isBackSide As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Public ReadOnly Property isUseextraGuideGrip As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Private m_gripOnRetractArmPercent As Integer = 10
		Public Property gripOnRetractArmPercent As Integer
		 	Get
	            Return m_gripOnRetractArmPercent
	        End Get
			Set (value As Integer)
				m_gripOnRetractArmPercent = value
			End Set
	    End Property
		
		Private m_magneticWaferDetectSensor As Boolean = False ' for magnatic wafer detect sensor
		Public Property magneticWaferDetectSensor As Boolean
		 	Get
	            Return m_magneticWaferDetectSensor
	        End Get
			Set (value As Boolean)
				m_magneticWaferDetectSensor = value
			End Set
	    End Property
		
		Private Dim singleActer As SingleAct = Nothing
		Private Dim inverseSingleActer As InverseSingleAct = Nothing
		Private Dim multiActer As MultiAct = Nothing
		
		Private Dim m_homeSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_ungripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_reverse_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_reverse_ungripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(singleActer As SingleAct)
			Me.singleActer = singleActer
		End Sub
		
		Public Sub New(inverseSingleActer As InverseSingleAct)
			Me.inverseSingleActer = inverseSingleActer
		End Sub
		
		Public Sub New(multiActer As MultiAct)
			Me.multiActer = multiActer
		End Sub
		
		Public Sub setFinger(fingerIndex As Integer, homeSensorIO As Integer, gripSensorIO As Integer, ungripSensorIO As Integer)
			m_homeSensorIO(fingerIndex-1) = homeSensorIO
			m_gripSensorIO(fingerIndex-1) = gripSensorIO
			m_ungripSensorIO(fingerIndex-1) = ungripSensorIO
			m_reverse_gripSensorIO(fingerIndex-1) = -1 * gripSensorIO
			m_reverse_ungripSensorIO(fingerIndex-1) = -1 * ungripSensorIO
		End Sub
		
		Public Function isGrip() As Boolean
			Dim result As Boolean = False
			
			If Not(singleActer Is Nothing) Then
				result = singleActer.isGrip()
			ElseIf Not(inverseSingleActer Is Nothing) Then
				result = inverseSingleActer.isGrip()
			ElseIf Not(multiActer Is Nothing) Then
				result = multiActer.isGrip()
			End If
			
			Return result
		End Function
		
		Public Function isExtraGuideGrip() As Boolean
			Return False
		End Function
		
		Public Sub grip(flag As Boolean)
			If Not(singleActer Is Nothing) Then
				singleActer.grip(flag)
			ElseIf Not(inverseSingleActer Is Nothing) Then
				inverseSingleActer.grip(flag)
			ElseIf Not(multiActer Is Nothing) Then
				multiActer.grip(flag)
			End If
		End Sub
		
		Public Sub extraGuideGrip(flag As Boolean)
		End Sub
		
		Public Function pusherGripTimeTest(flag As Boolean, fullStroke As Boolean) As Double
			Dim gripTimer As New TimeStamp
			gripTimer.startTimer()
			If flag = True Then
				grip(True)
				If fullStroke = True Then
					myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,True,m_ungripSensorIO)
				Else
					myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,True,m_gripSensorIO)
				End If
			Else
				grip(False)
				myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,False,m_homeSensorIO)
			End If
			Return gripTimer.elapsedTime()
		End Function
		
		Public Function fingerSensorCheck(fingerIndex As Integer) As Boolean
			If m_gripSensorIO(fingerIndex-1) <> 0 Then	
				Return robotIO.getDIO(m_gripSensorIO(fingerIndex-1))
			Else
				Return False
			End If
		End Function
		
		Public Function fingerHomeCheck(fingerIndex As Integer) As Boolean
			If m_homeSensorIO(fingerIndex-1) <> 0 Then
				Return robotIO.getDIO(m_homeSensorIO(fingerIndex-1))
			Else
				Return True
			End If
		End Function
		
		Public Function getFingerSensorGripIO(fingerIndex As Integer) As Integer
			Return m_gripSensorIO(fingerIndex-1)
		End Function
		

		' prepare arm motion
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			If mode = PUT_MODE Then
				If targetStation.isUseSmartMotion() = True Then
					loc.liftFront(arm,targetStation.getOffset,targetStation.teachingLocation(arm,2),0)
				Else
					loc.liftFront(arm,targetStation.getOffset,Nothing,0)
				End If
	  		End If
			Return loc
		End Function
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer, offset As Double) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim distance As Double
			If mode = PUT_MODE Then
				distance = targetStation.getOffset + offset
			Else
				distance = offset
			End If
			
			If targetStation.isUseSmartMotion() = True Then
				loc.liftFront(arm,distance,targetStation.teachingLocation(arm,2))
			Else
				loc.liftFront(arm,distance)
			End If

			Return loc
		End Function
		
		Public Sub prepareRetractArm(arm As RobotArm, mode As Integer)
			If mode = GET_MODE Or mode = PUT_MODE Then
				RobotArm.AddArmEventList(arm,RobotArm.EVENT_ARM_GRIP)
				Move.Trigger(0, gripOnRetractArmPercent, RobotArm.ArmEventThread, RobotArm.EVENT_ARM_GRIP)
			End If
		End Sub
		
		Public Sub afterRetractArm(arm As RobotArm, mode As Integer)
			Dim i As Integer
			If mode = PUT_MODE Then
				If theSystem.demoMode = 0 Then
					myRobot(Robot.selected-1).armGripWaitSignal_and(theSystem.suctionOnTime+theSystem.gripperMaximumTime,Nothing,True,m_ungripSensorIO,m_reverse_gripSensorIO)
				Else
					myRobot(Robot.selected-1).armGripWaitSignal_and(theSystem.suctionOnTime,Nothing,True,m_ungripSensorIO,m_reverse_gripSensorIO)
				End If
			End If
		End Sub
		
		
		
		
		' get/put motion
		
		Public Function getWafer(stage As Integer, armList() As RobotArm, motionStep As Integer, gripNow As Boolean) As Integer
			Dim i As Integer
			Dim retry As Integer = 0
			
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim retryCount As Integer = theSystem.retryCount
			If retryCount < 0 Then
				retryCount = 0
			End If
			
			Dim downOffset As Double
			Dim upOffset As Double
			downOffset = targetStation.getDownOffset
			upOffset = targetStation.getUpOffset
			
			Dim loc As LocationEx
			Dim zUpProfile As ProfileEx = myRobot(Robot.Selected-1).theProfileManager.getZProfile(True)
			Dim zDownProfile As ProfileEx = myRobot(Robot.Selected-1).theProfileManager.getZProfile(False)
			If targetStation.isUseSmartMotion() = True Then
				loc = LocationEx.getDestCartPos()
				zUpProfile.pf.Straight = True
				zDownProfile.pf.Straight = True
			Else
				loc = LocationEx.getDestJointPos()
			End If
			
			If motionStep <> ALL_STEP Then
				retryCount = 0
			End If
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
			'160609 joosh fiber sensor clamp select
			'160808 system -> robot_Arm
			If theSystem.demoMode = 0 And armList(i).useFiberSensorClamp = False Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
						Return ERR_CANNOT_UNGRIP
					End If
				Next i
			End If
			
			For retry = 0 To retryCount

				sensorCheckResult = 0
				
STEP1:
				
				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/downOffset)) '1.5mm -> %
				End If
				loc.liftUp(downOffset)
				theMoveEx.loc(loc,zUpProfile)
				
				theMoveEx.waitForEOM()
				
				If gripNow = True Then
					myRobot(Robot.selected-1).armGrip(armList,True,False,False)
				End If
				
				If motionStep = EXTA_STEP Then
					Goto STEP_END
				End If
				
STEP2:

				myRobot(Robot.selected-1).armGrip(armList,True,True,True)
				
				If theSystem.demoMode = 0 Then
					If armList(0).gripHalfStrokeTime_ms < theSystem.gripperMinimumTime Then
						sensorCheckResult = ERR_PUSHER_SPEED_HIGH
					End If

					Dim ret As Integer
					For i = 0 To armList.GetUpperBound(0) - 1
						ret = armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime)
						If ret = SENSOR_CHECK_RESULT_NOWAFER Then
							sensorCheckResult = ERR_NO_WAFER_DURING_GET
							Exit For
						ElseIf ret = SENSOR_CHECK_RESULT_OVERWAFER Then
							sensorCheckResult = OVER_WAFER_DURING_GET
							Exit For
						End If
					Next i
				End If

STEP3:				
				If sensorCheckResult <> 0 Or motionStep = RECO_STEP Then
					myRobot(Robot.selected-1).armGrip(armList,False,True)		
					loc.liftDown(downOffset)
					theMoveEx.loc(loc,zDownProfile)
					theMoveEx.wait()
				Else
					For i = 0 To armList.GetUpperBound(0)-1
						If targetStation.isUseSmartMotion() = True Then
							loc.liftBack(armList(i),-1 * targetStation.getOffset,targetStation.teachingLocation(armList(0),2))
						Else
							loc.liftBack(armList(i),-1 * targetStation.getOffset,Nothing)
						End If
					Next i
					theMoveEx.loc(loc,zUpProfile)
					theMoveEx.waitForEOM()
								
					loc.liftUp(upOffset)
					theMoveEx.loc(loc,zUpProfile)
					
					Exit For
				End If
				
			Next retry

STEP_END:

			Return sensorCheckResult
		End Function
		
		Public Function putWafer(stage As Integer, armList() As RobotArm, motionStep As Integer, gripnow As Boolean) As Integer
			Dim i As Integer
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim targetStation As Station = theStationManager.getStation(stage)
			
			Dim downOffset As Double
			Dim upOffset As Double		
			downOffset = targetStation.putDownOffset
			upOffset = targetStation.putUpOffset
			
			Dim loc As LocationEx
			Dim zUpProfile As ProfileEx = myRobot(Robot.Selected-1).theProfileManager.getZProfile(True)
			Dim zDownProfile As ProfileEx = myRobot(Robot.Selected-1).theProfileManager.getZProfile(False)
			If targetStation.isUseSmartMotion() = True Then
				loc = LocationEx.getDestCartPos()
				zUpProfile.pf.Straight = True
				zDownProfile.pf.Straight = True
			Else
				loc = LocationEx.getDestJointPos()
			End If
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
STEP1:

			If theSystem.demoMode = 0 Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime) = SENSOR_CHECK_RESULT_NOWAFER Then
						sensorCheckResult = ERR_NO_WAFER_DURING_PUT
						Exit For
					End If
				Next i
			End If
			
			If sensorCheckResult <> 0 Then
				Return sensorCheckResult
			End If
			
			loc.liftDown(upOffset)
			theMoveEx.loc(loc,zDownProfile)
			theMoveEx.waitForEOM()
			
			For i = 0 To armList.GetUpperBound(0)-1
				If targetStation.isUseSmartMotion() = True Then
					loc.liftFront(armList(i),-1 * targetStation.getOffset - targetStation.putOffset,targetStation.teachingLocation(armList(0),2))
				Else
					loc.liftFront(armList(i),-1 * targetStation.getOffset - targetStation.putOffset,Nothing)
				End If
			Next i
			theMoveEx.loc(loc,zDownProfile)
			theMoveEx.waitForEOM()
			
			If gripnow = True Then
				myRobot(Robot.selected-1).armGrip(armList,False,False,False)
			End If
			
			If motionStep = EXTA_STEP Then
				Goto STEP_END
			End If

STEP2:
			For i = 0 To armList.GetUpperBound(0) - 1
				   If theSystem.demoMode = 0 And armList(i).useFiberSensorClamp = False Then
						  myRobot(Robot.selected-1).armGrip(armList,False,False,True)
						  If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
								sensorCheckResult = ERR_CANNOT_UNGRIP
								Exit For
						  End If
				   Else
						  myRobot(Robot.selected-1).armGrip(armList,False,True,True)
				   End If 
			Next i
			
			If sensorCheckResult <> 0 Then
				ThrowError(ERR_CANNOT_UNGRIP)
			End If
STEP3:
			loc.liftDown(downOffset)
			theMoveEx.loc(loc,zDownProfile)
			
			theMoveEx.wait()
	
STEP_END:

			Return sensorCheckResult
		End Function
		
	End Class
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module VaccumEdgeGuideArmSequenceModule

	Public Class VaccumEdgeGuideGripSequence
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public ReadOnly Property defaultGripStage As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Public ReadOnly Property isBackSide As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Public ReadOnly Property isUseextraGuideGrip As Boolean
		 	Get
	            Return True
	        End Get
	    End Property
		
		Private m_vaccumOnAfterZUpWhenGET As Boolean = True
		Public Property vaccumOnAfterZUpWhenGET As Boolean
		 	Get
	            Return m_vaccumOnAfterZUpWhenGET
	        End Get
			Set (value As Boolean)
				m_vaccumOnAfterZUpWhenGET = value
			End Set
	    End Property
		
		Private m_vaccumOffAfterZDownWhenPUT As Boolean = False
		Public Property vaccumOffAfterZDownWhenPUT As Boolean
		 	Get
	            Return m_vaccumOffAfterZDownWhenPUT
	        End Get
			Set (value As Boolean)
				m_vaccumOffAfterZDownWhenPUT = value
			End Set
	    End Property
		
		Private m_guideFirstRelease As Boolean = True
		Public Property guideFirstRelease As Boolean
		 	Get
	            Return m_guideFirstRelease
	        End Get
			Set (value As Boolean)
				m_guideFirstRelease = value
			End Set
	    End Property
		
		Private m_magneticWaferDetectSensor As Boolean = False ' for magnatic wafer detect sensor
		Public Property magneticWaferDetectSensor As Boolean
		 	Get
	            Return m_magneticWaferDetectSensor
	        End Get
			Set (value As Boolean)
				m_magneticWaferDetectSensor = value
			End Set
	    End Property
		
		Private m_externalUngripGuidSensorIO As Integer = 0 ' guid ungrip check sensor
		Public Property externalUngripGuidSensorIO As Integer
		 	Get
	            Return m_externalUngripGuidSensorIO
	        End Get
			Set (value As Integer)
				m_externalUngripGuidSensorIO = value
			End Set
	    End Property
		
		
		Private Dim singleActer As SingleAct = Nothing
		Private Dim inverseSingleActer As InverseSingleAct = Nothing
		Private Dim multiActer As MultiAct = Nothing
		
		Private Dim singleActer_guide As SingleAct = Nothing
		Private Dim inverseSingleActer_guide As InverseSingleAct = Nothing
		Private Dim multiActer_guide As MultiAct = Nothing
		
		Private Dim m_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_guideOnSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_guideOffSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_reverse_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		
		Private Dim gripTimer As New TimeStamp		
		
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(singleActer As SingleAct, singleActer_guide As SingleAct)
			Me.singleActer = singleActer
			Me.singleActer_guide = singleActer_guide
		End Sub
		
		Public Sub New(inverseSingleActer As InverseSingleAct, inverseSingleActer_guide As InverseSingleAct)
			Me.inverseSingleActer = inverseSingleActer
			Me.inverseSingleActer_guide = inverseSingleActer_guide
		End Sub
		
		Public Sub New(multiActer As MultiAct, multiActer_guide As MultiAct)
			Me.multiActer = multiActer
			Me.multiActer_guide = multiActer_guide
		End Sub
		
		Public Sub setFinger(fingerIndex As Integer, gripSensorIO As Integer, guideOnSensorIO As Integer, guideOffSensorIO As Integer)
			m_gripSensorIO(fingerIndex-1) = gripSensorIO
			m_guideOnSensorIO(fingerIndex-1) = guideOnSensorIO
			m_guideOffSensorIO(fingerIndex-1) = guideOffSensorIO
			m_reverse_gripSensorIO(fingerIndex-1) = -1 * gripSensorIO
		End Sub
		
		Public Function isGrip() As Boolean
			Dim result As Boolean = False
			
			If Not(singleActer Is Nothing) Then
				result = singleActer.isGrip()
			ElseIf Not(inverseSingleActer Is Nothing) Then
				result = inverseSingleActer.isGrip()
			ElseIf Not(multiActer Is Nothing) Then
				result = multiActer.isGrip()
			End If
			
			Return result
		End Function
		
		Public Function isExtraGuideGrip() As Boolean
			Dim result As Boolean = False
			
			If Not(singleActer_guide Is Nothing) Then
				result = singleActer_guide.isGrip()
			ElseIf Not(inverseSingleActer_guide Is Nothing) Then
				result = inverseSingleActer_guide.isGrip()
			ElseIf Not(multiActer_guide Is Nothing) Then
				result = multiActer_guide.isGrip()
			End If
			
			Return result
		End Function
		
		Public Sub grip(flag As Boolean)
			If Not(singleActer Is Nothing) Then
				singleActer.grip(flag)
			ElseIf Not(inverseSingleActer Is Nothing) Then
				inverseSingleActer.grip(flag)
			ElseIf Not(multiActer Is Nothing) Then
				multiActer.grip(flag)
			End If
		End Sub
		
		Public Sub extraGuideGrip(flag As Boolean)
			If Not(singleActer_guide Is Nothing) Then
				singleActer_guide.grip(flag)
			ElseIf Not(inverseSingleActer_guide Is Nothing) Then
				inverseSingleActer_guide.grip(flag)
			ElseIf Not(multiActer_guide Is Nothing) Then
				multiActer_guide.grip(flag)
			End If
		End Sub
		
		Public Function pusherGripTimeTest(flag As Boolean, fullStroke As Boolean) As Double
			Dim gripTimer As New TimeStamp
			gripTimer.startTimer()
			If flag = True Then
				grip(True)
				myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,True,m_gripSensorIO)
			Else
				grip(False)
				myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,False,m_reverse_gripSensorIO)
			End If
			Return gripTimer.elapsedTime()
		End Function
		
		Public Function fingerSensorCheck(fingerIndex As Integer) As Boolean
			Dim result As Boolean
			If m_gripSensorIO(fingerIndex-1) <> 0 Then
				result = robotIO.getDIO(m_gripSensorIO(fingerIndex-1))
			Else
				result = False
			End If
			
			If externalUngripGuidSensorIO <> 0 Then
				If isExtraGuideGrip() = True Then
					result = result And (Not robotIO.getDIO(externalUngripGuidSensorIO))
				End If
			End If
			
			Return result
		End Function
		
		Public Function fingerHomeCheck(fingerIndex As Integer) As Boolean
			Dim result As Boolean
			If m_gripSensorIO(fingerIndex-1) <> 0 Then	
				result = Not(robotIO.getDIO(m_gripSensorIO(fingerIndex-1)))
				If m_guideOffSensorIO(fingerIndex-1) <> 0 Then
					result = result And robotIO.getDIO(m_guideOffSensorIO(fingerIndex-1))
				End If
			Else
				result = True
			End If
			
			Return result
		End Function
		
		Public Function getFingerSensorGripIO(fingerIndex As Integer) As Integer
			Return m_gripSensorIO(fingerIndex-1)
		End Function
		
		
		
		
		
		
		
		
		' prepare arm motion
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			If mode = PUT_MODE Then
				If targetStation.isUseSmartMotion() = True Then
					loc.liftBack(arm,targetStation.putOffset,targetStation.teachingLocation(arm,2))
				Else
					loc.liftBack(arm,targetStation.putOffset)
				End If
	  		End If
			Return loc
		End Function
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer, offset As Double) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim distance As Double
			If mode = PUT_MODE Then
				distance = targetStation.putOffset - offset
			Else
				distance = -offset
			End If
			If targetStation.isUseSmartMotion() = True Then
				loc.liftBack(arm,distance,targetStation.teachingLocation(arm,2))
			Else
				loc.liftBack(arm,distance)
			End If
			
			Return loc
		End Function
		
		Public Sub prepareRetractArm(arm As RobotArm, mode As Integer)
		End Sub
		
		Public Sub afterRetractArm(arm As RobotArm, mode As Integer)

		End Sub
		
		
		
		
		' get/put motion
		
		Public Function getWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim retry As Integer = 0
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim loc As LocationEx = LocationEx.getDestJointPos()
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim retryCount As Integer = theSystem.retryCount
			
			If motionStep <> ALL_STEP Then
				retryCount = 0
			End If
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
			For retry = 0 To retryCount
			
				sensorCheckResult = 0
				
STEP1:

				If vaccumOnAfterZUpWhenGET = False Then
					myRobot(Robot.selected-1).armGrip(armList,True,False)
					gripTimer.startTimer()
				End If

				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.getDownOffset)) '1.5mm -> %
				End If
				
				loc.liftUp(targetStation.getDownOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
				
				theMoveEx.waitForEOM()
				
				If vaccumOnAfterZUpWhenGET = False Then
					gripTimer.assertTimeDelay(theSystem.suctionOnTime)
				Else
					myRobot(Robot.selected-1).armGrip(armList,True,True)
				End If
				
				If motionStep = EXTA_STEP Then
					Goto STEP_END
				End If
				
				If motionStep = CROSS_STEP Then
					Goto STEP_END
				End If
				
STEP2:

				loc.liftUp(targetStation.getUpOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
				
				theMoveEx.wait()
				
				If theSystem.demoMode = 0 Then
					Dim ret As Integer
					For i = 0 To armList.GetUpperBound(0) - 1
						ret = armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime)
						If ret = SENSOR_CHECK_RESULT_NOWAFER Then
							sensorCheckResult = ERR_NO_WAFER_DURING_GET
							Exit For
						ElseIf ret = SENSOR_CHECK_RESULT_OVERWAFER Then
							sensorCheckResult = OVER_WAFER_DURING_GET
							Exit For
						End If
					Next i
				End If

STEP3:				
				If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
					myRobot(Robot.selected-1).armGrip(armList,False,True)
					
					loc.liftDown(targetStation.getUpOffset)
					theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
					
					theMoveEx.waitForEOM()

					loc.liftDown(targetStation.getDownOffset)
					theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
					
					theMoveEx.wait()
				Else
					myRobot(Robot.selected-1).extraGuideGrip(armList,True)
					If theSystem.demoMode = 0 Then
						If externalUngripGuidSensorIO <> 0 Then
							If robotIO.getDIO(externalUngripGuidSensorIO) = True Then
								sensorCheckResult = ERR_NO_WAFER_DURING_GET
								myRobot(Robot.selected-1).extraGuideGrip(armList,False)
							End If
						End If
					End If
					
					Exit For
				End If
				
			Next retry
			
			
			
STEP_END:

			Return sensorCheckResult
		End Function
		
		Public Function putWafer(stage As Integer, armList() As RobotArm, motionStep As Integer) As Integer
			Dim i As Integer
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim loc As LocationEx = LocationEx.getDestJointPos()
			Dim targetStation As Station = theStationManager.getStation(stage)
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
STEP1:

			If theSystem.demoMode = 0 Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime) = SENSOR_CHECK_RESULT_NOWAFER Then
						sensorCheckResult = ERR_NO_WAFER_DURING_PUT
						Exit For
					End If
				Next i
			End If
			
			If sensorCheckResult <> 0 Then
				Return sensorCheckResult
			End If
			
			If ContinuousMotionMode = True Then
				theMoveEx.motionOverlap(0,(1.5*100/targetStation.putUpOffset)) '1.5mm -> %
			End If
			
			loc.liftDown(targetStation.putUpOffset)
			theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
			
			If guideFirstRelease = True Then
				myRobot(Robot.selected-1).extraGuideGrip(armList,False)
			End If

			If vaccumOffAfterZDownWhenPUT = False And motionStep = ALL_STEP Then
				myRobot(Robot.selected-1).armGrip(armList,False,True)
			End If
			
			theMoveEx.waitForEOM()
			
			If vaccumOffAfterZDownWhenPUT = False And motionStep = ALL_STEP Then
				If guideFirstRelease = False Then
					myRobot(Robot.selected-1).extraGuideGrip(armList,False)
				End If
			End If
			
			If motionStep = EXTA_STEP Then
				Goto STEP_END
			End If

STEP2:

			If vaccumOffAfterZDownWhenPUT = True Or motionStep <> ALL_STEP Then
				theMoveEx.waitForEOM() ' for two step touch
				myRobot(Robot.selected-1).armGrip(armList,False,True)
				
				If guideFirstRelease = False Then
					myRobot(Robot.selected-1).extraGuideGrip(armList,False)
				End If
			End If
		
			If theSystem.demoMode = 0 And magneticWaferDetectSensor = False Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
						sensorCheckResult = ERR_CANNOT_UNGRIP
						Exit For
					End If
				Next i
			End If

STEP3:			
			If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
				myRobot(Robot.selected-1).armGrip(armList,True,True)
				myRobot(Robot.selected-1).extraGuideGrip(armList,True)
				
				loc.liftUp(targetStation.putUpOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
				theMoveEx.wait()

				Return sensorCheckResult
			End If

			loc.liftDown(targetStation.putDownOffset)
			theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
			
			theMoveEx.wait()
			
			If theSystem.demoMode = 0 And magneticWaferDetectSensor = False Then
				Dim founded As Boolean = False
				myRobot(Robot.selected-1).armGrip(armList,True,True)
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_noWafer_code_untileOK(theSystem.gripperMaximumTime) = SENSOR_CHECK_RESULT_OK Then
						myRobot(Robot.selected-1).armGrip(armList(i),False,False)
					Else
						founded = True
					End If
				Next i
				If founded = True Then
					myRobot(Robot.selected-1).extraGuideGrip(armList,True)
				End If
			End If
			
STEP_END:

			Return sensorCheckResult
		End Function
		
	End Class
	
End Module

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module VaccumGripArmSequenceModule

	Public Class VaccumGripSequence
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public ReadOnly Property defaultGripStage As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Public ReadOnly Property isBackSide As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Public ReadOnly Property isUseextraGuideGrip As Boolean
		 	Get
	            Return False
	        End Get
	    End Property
		
		Private m_vaccumZUp1StepWhenGET As Boolean = True 'default 2step sequence
		Public Property vaccumZUp1StepWhenGET As Boolean
		 	Get
	            Return m_vaccumZUp1StepWhenGET
	        End Get
			Set (value As Boolean)
				m_vaccumZUp1StepWhenGET = value
			End Set
	    End Property
				
		Private m_vaccumZDown1StepWhenPut As Boolean = True
		Public Property vaccumZDown1StepWhenPut As Boolean
		 	Get
	            Return m_vaccumZDown1StepWhenPut
	        End Get
			Set (value As Boolean)
				m_vaccumZDown1StepWhenPut = value
			End Set
	    End Property
		
		Private m_vaccumOnAfterZUpWhenGET As Boolean = False
		Public Property vaccumOnAfterZUpWhenGET As Boolean
		 	Get
	            Return m_vaccumOnAfterZUpWhenGET
	        End Get
			Set (value As Boolean)
				m_vaccumOnAfterZUpWhenGET = value
			End Set
	    End Property
		
		Private m_vaccumOffAfterZDownWhenPUT As Boolean = False
		Public Property vaccumOffAfterZDownWhenPUT As Boolean
		 	Get
	            Return m_vaccumOffAfterZDownWhenPUT
	        End Get
			Set (value As Boolean)
				m_vaccumOffAfterZDownWhenPUT = value
			End Set
	    End Property
		
		Private m_magneticWaferDetectSensor As Boolean = False ' for magnatic wafer detect sensor
		Public Property magneticWaferDetectSensor As Boolean
		 	Get
	            Return m_magneticWaferDetectSensor
	        End Get
			Set (value As Boolean)
				m_magneticWaferDetectSensor = value
			End Set
	    End Property
		
		Private Dim singleActer As SingleAct = Nothing
		Private Dim inverseSingleActer As InverseSingleAct = Nothing
		Private Dim multiActer As MultiAct = Nothing
		Private Dim tripleActer As TripleAct = Nothing
		
		Private Dim m_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer
		Private Dim m_reverse_gripSensorIO(MAX_FINGER_COUNT_PER_ARM) As Integer

		Private Dim gripTimer As New TimeStamp
		
		
		
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(singleActer As SingleAct)
			Me.singleActer = singleActer
		End Sub
		
		Public Sub New(inverseSingleActer As InverseSingleAct)
			Me.inverseSingleActer = inverseSingleActer
		End Sub
		
		Public Sub New(multiActer As MultiAct)
			Me.multiActer = multiActer
		End Sub
		
		Public Sub New(tripleActer As TripleAct)
			Me.tripleActer = tripleActer
		End Sub
		
		Public Sub setFinger(fingerIndex As Integer, gripSensorIO As Integer)
			m_gripSensorIO(fingerIndex-1) = gripSensorIO
			m_reverse_gripSensorIO(fingerIndex-1) = -1 * gripSensorIO
		End Sub
		
		Public Function isGrip() As Boolean
			Dim result As Boolean = False
			
			If Not(singleActer Is Nothing) Then
				result = singleActer.isGrip()
			ElseIf Not(inverseSingleActer Is Nothing) Then
				result = inverseSingleActer.isGrip()
			ElseIf Not(multiActer Is Nothing) Then
				result = multiActer.isGrip()
			ElseIf Not(tripleActer Is Nothing) Then
				result = tripleActer.isGrip()
			End If
			
			Return result
		End Function
		
		Public Function isExtraGuideGrip() As Boolean
			Return False
		End Function
		
		Public Sub grip(flag As Boolean)
			If Not(singleActer Is Nothing) Then
				singleActer.grip(flag)
			ElseIf Not(inverseSingleActer Is Nothing) Then
				inverseSingleActer.grip(flag)
			ElseIf Not(multiActer Is Nothing) Then
				multiActer.grip(flag)
			ElseIf Not(tripleActer Is Nothing) Then
				tripleActer.grip(flag)
			End If
		End Sub
		
		Public Sub extraGuideGrip(flag As Boolean)
		End Sub
		
		Public Function pusherGripTimeTest(flag As Boolean, fullStroke As Boolean) As Double
			Dim gripTimer As New TimeStamp
			gripTimer.startTimer()
			If flag = True Then
				grip(True)
				myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,True,m_gripSensorIO)
			Else
				grip(False)
				myRobot(Robot.Selected-1).armGripWaitSignal(theSystem.gripperMaximumTime,Nothing,False,m_reverse_gripSensorIO)
			End If
			Return gripTimer.elapsedTime()
		End Function
		
		Public Function fingerSensorCheck(fingerIndex As Integer) As Boolean
			If m_gripSensorIO(fingerIndex-1) <> 0 Then
				Return robotIO.getDIO(m_gripSensorIO(fingerIndex-1))
			Else
				Return False
			End If
		End Function
		
		Public Function fingerHomeCheck(fingerIndex As Integer) As Boolean
			Return Not(fingerSensorCheck(fingerIndex))
		End Function
		
		Public Function getFingerSensorGripIO(fingerIndex As Integer) As Integer
			Return m_gripSensorIO(fingerIndex-1)
		End Function
		
		
		
		
		
		
		
		' prepare arm motion
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			If mode = PUT_MODE Then
				If targetStation.isUseSmartMotion() = True Then
					loc.liftBack(arm,targetStation.putOffset,targetStation.teachingLocation(arm,2))
				Else
					loc.liftBack(arm,targetStation.putOffset)
				End If
	  		End If
			Return loc
		End Function
		
		Public Function prepareExtendArm(loc As LocationEx, stage As Integer, arm As RobotArm, mode As Integer, offset As Double) As LocationEx
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim distance As Double
			If mode = PUT_MODE Then
				distance = targetStation.putOffset - offset
			Else
				distance =  -offset 
			End If
			If targetStation.isUseSmartMotion() = True Then
				loc.liftBack(arm,distance,targetStation.teachingLocation(arm,2))
			Else
				loc.liftBack(arm,distance)
			End If
			
			Return loc
		End Function
		
		Public Sub prepareRetractArm(arm As RobotArm, mode As Integer)
		End Sub
		
		Public Sub afterRetractArm(arm As RobotArm, mode As Integer)
			
		End Sub
		
		
		
		
		
		
		
		' get/put motion
		
		Public Function getWafer(stage As Integer, armList() As RobotArm, motionStep As Integer, Gripnow As Boolean) As Integer
			Dim i As Integer
			Dim retry As Integer = 0
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim loc As LocationEx = LocationEx.getDestJointPos(False)
			Dim targetStation As Station = theStationManager.getStation(stage)
			Dim retryCount As Integer = theSystem.retryCount
			
			If motionStep <> ALL_STEP Then
				retryCount = 0
			End If
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
			TheSystem.CurrentRetryCount = 0
			For retry = 0 To retryCount
			
				sensorCheckResult = 0
				
STEP1:
			
				If vaccumOnAfterZUpWhenGET = False And gripnow = False Then
					myRobot(Robot.selected-1).armGrip(armList,True,False)
					gripTimer.startTimer()
				End If

				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.getDownOffset)) '1.5mm -> %
				End If
				
				loc.liftUp(targetStation.getDownOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
				
				If vaccumZUp1StepWhenGET = False Then' select 1 step, 2 step sequence
					theMoveEx.waitForEOM()
				End If
			
				If vaccumOnAfterZUpWhenGET = False Then
					gripTimer.assertTimeDelay(theSystem.suctionOnTime)
				Else
					myRobot(Robot.selected-1).armGrip(armList,True,True)
				End If
				
				If motionStep = EXTA_STEP Then
					Goto STEP_END
				End If
				
				If motionStep = CROSS_STEP Then
					Goto STEP_END
				End If
				
STEP2:
				myRobot(Robot.selected-1).armGrip(armList,True,False)
				loc.liftUp(targetStation.getUpOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
				theMoveEx.wait()
								
				If theSystem.demoMode = 0 Then
					Dim ret As Integer
					For i = 0 To armList.GetUpperBound(0) - 1
						If armList(i).plateExistCheckIO <> 0 Then
							If robotIO.getDIO(armList(i).plateExistCheckIO) = False Then
								sensorCheckResult = ERR_PLATE_CHECK
								Exit For
							End If
						End If
						ret = armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime)
						'bowon 150819
						If armlist(i).waferPresenceSensorSpecialCheckIO <> 0 Then
							If (ret = SENSOR_CHECK_RESULT_NOWAFER) And (myRobot(Robot.Selected-1).waferPresenceSensorSpecialCheck(armList) = False) Then
								sensorCheckResult = ERR_NO_WAFER_DURING_GET
								Exit For
							End If
						Else
							If ret = SENSOR_CHECK_RESULT_NOWAFER Then
								sensorCheckResult = ERR_NO_WAFER_DURING_GET
								Exit For
							End If
						End If 
						
						If ret = SENSOR_CHECK_RESULT_OVERWAFER Then
								sensorCheckResult = OVER_WAFER_DURING_GET
								Exit For
						End If
					Next i
				End If

				
				If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
					myRobot(Robot.selected-1).armGrip(armList,False,True)
					
					loc.liftDown(targetStation.getUpOffset)
					theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
					
					theMoveEx.waitForEOM()

					loc.liftDown(targetStation.getDownOffset)
					theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
					
					theMoveEx.wait()
				Else
					Exit For
				End If
				
			Next retry
			
			thesystem.CurrentRetryCount = retry
			
STEP_END:

			Return sensorCheckResult
STEP3:
			myRobot(Robot.selected-1).armGrip(armList,False,True)
			
			theMoveEx.waitForEOM()

			loc.liftDown(targetStation.getDownOffset)
			theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
			
			theMoveEx.wait()
			
			Return sensorCheckResult
		End Function
		
		Public Function putWafer(stage As Integer, armList() As RobotArm, motionStep As Integer, useUpsideMotion As Boolean, gripnow As Boolean) As Integer
			Dim i As Integer
			Dim sensorCheckResult As Integer = 0 'result is error code
			Dim loc As LocationEx = LocationEx.getDestJointPos(False)
			Dim targetStation As Station = theStationManager.getStation(stage)
			
			If motionStep = RETA_STEP Then
				Goto STEP2
			End If
			
			If motionStep = RECO_STEP Then
				Goto STEP3
			End If
			
STEP1:

			If theSystem.demoMode = 0 Then
				For i = 0 To armList.GetUpperBound(0) - 1
					'bowon 150819
					If armlist(i).waferPresenceSensorSpecialCheckIO <> 0 Then
						If (armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime) = SENSOR_CHECK_RESULT_NOWAFER) And (myRobot(Robot.Selected-1).waferPresenceSensorSpecialCheck(armList) = False) Then
							sensorCheckResult = ERR_NO_WAFER_DURING_PUT
							Exit For
						End If
					Else
						If armList(i).sensorCheck_wafer_code_untileOK(theSystem.gripperMaximumTime) = SENSOR_CHECK_RESULT_NOWAFER Then
							sensorCheckResult = ERR_NO_WAFER_DURING_PUT
							Exit For
						End If
					End If
				Next i
			End If
			
			If sensorCheckResult <> 0 Then
				Return sensorCheckResult
			End If

			If targetStation.putUpOffset > 0 Or useUpsideMotion = True Then	
				If ContinuousMotionMode = True Then
					theMoveEx.motionOverlap(0,(1.5*100/targetStation.putUpOffset)) '1.5mm -> %
				End If
				
				loc.liftDown(targetStation.putUpOffset)
				theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
				
				If vaccumOffAfterZDownWhenPUT = False And motionStep = ALL_STEP Then
					myRobot(Robot.selected-1).armGrip(armList,False,True)
				End If
				If vaccumZDown1StepWhenPut = False Then
					theMoveEx.waitForEOM() ' for two step touch
				End If
			Else
				If vaccumOffAfterZDownWhenPUT = False And motionStep = ALL_STEP Then
					theMoveEx.waitForEOM() ' for two step touch
					myRobot(Robot.selected-1).armGrip(armList,False,True)
				End If
			End If
			
			If gripnow = True Then
				myRobot(Robot.selected-1).armGrip(armList,False,False)
			End If
			
			If motionStep = EXTA_STEP Then
				Goto STEP_END
			End If
			
STEP2:

			If vaccumOffAfterZDownWhenPUT = True Or motionStep <> ALL_STEP Then
				theMoveEx.waitForEOM() ' for two step touch
				myRobot(Robot.selected-1).armGrip(armList,False,True)
			End If

			If theSystem.demoMode = 0 And magneticWaferDetectSensor = False Then
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_gripperHome_untileOK(theSystem.gripperMaximumTime) = False Then
						sensorCheckResult = ERR_CANNOT_UNGRIP
						Exit For
					End If
				Next i
			End If

STEP3:			
			If sensorCheckResult <> 0 Or motionstep = RECO_STEP Then
				myRobot(Robot.selected-1).armGrip(armList,True,True)
				
				If targetStation.putUpOffset > 0 Or useUpsideMotion = True Then
					loc.liftUp(targetStation.putUpOffset)
					theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(True))
					
					theMoveEx.wait()
				End If
	
				Return sensorCheckResult
			End If
			
			Dim liftDownDistance As Double
			If targetStation.putUpOffset > 0 Or useUpsideMotion = True Then
				liftDownDistance = targetStation.putDownOffset
			Else
				liftDownDistance = targetStation.putUpOffset + targetStation.putDownOffset
			End If
			
			loc.liftDown(liftDownDistance)
			theMoveEx.loc(loc,myRobot(Robot.Selected-1).theProfileManager.getZProfile(False))
			
			theMoveEx.wait()
			
			If theSystem.demoMode = 0 And magneticWaferDetectSensor = False Then
				myRobot(Robot.selected-1).armGrip(armList,True,True)
				For i = 0 To armList.GetUpperBound(0) - 1
					If armList(i).sensorCheck_noWafer_code_untileOK(theSystem.gripperMaximumTime) = SENSOR_CHECK_RESULT_OK Then
						myRobot(Robot.selected-1).armGrip(armList(i),False,False)
					End If
				Next i
			End If
			
STEP_END:

			Return sensorCheckResult
		End Function
		
	End Class
	
End Module
'Created: 9/13/2013 11:01:53 AM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module InverseSingleActSolenoideModule
    Public Class InverseSingleAct
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private gripSignal As Integer = 0
		Private airBlowSignal As Integer = 0
		

		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(gripSignal As Integer)
			Me.gripSignal = gripSignal
			Me.airBlowSignal = 0
		End Sub
		
		Public Sub New(gripSignal As Integer, airBlowSignal As Integer)
			Me.gripSignal = gripSignal
			Me.airBlowSignal = airBlowSignal
		End Sub
		
		Public Function gripOnSignal() As Integer
			Return -1 * gripSignal
		End Function
		
		Public Function gripOffSignal() As Integer
			Return gripSignal
		End Function
		
		Public Function isGrip() As Boolean
			Return Not(robotIO.getDIO(gripSignal))
		End Function
		
		Public Sub grip(flag As Boolean)
			If robotIO.getDIO(gripSignal) <> (Not flag) Then
				robotIO.setDIO(gripSignal,(Not flag))
				If flag = False And airBlowSignal <> 0 Then
					robotIO.setDIO(airBlowSignal,True)
					robotIO.reservationDIO(airBlowSignal,100,False)
				End If
			End If
		End Sub
		
    End Class 
End Module
'Created: 9/13/2013 11:01:53 AM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module MultiActSolenoideModule
    Public Class MultiAct
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		Private nowGripState As Boolean = False
		Private gripSignal As Integer = 0
		Private ungripSignal As Integer = 0
		Private DoubleActingInterval As Integer = 1000
		Public Property DoubleActingInterval As Integer
			Get
	            Return Me.DoubleActingInterval
	        End Get
			Set (value As Integer)
	            Me.DoubleActingInterval = value
	        End Set
		End Property



		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(gripSignal As Integer, ungripSignal As Integer)
			Me.gripSignal = gripSignal
			Me.ungripSignal = ungripSignal
		End Sub
		
		Public Function gripOnSignal() As Integer
			Return gripSignal
		End Function
		
		Public Function gripOffSignal() As Integer
			Return ungripSignal
		End Function
		
		Public Function isGrip() As Boolean
			Return nowGripState
		End Function
		
		Public Sub grip(flag As Boolean)
			If flag <> nowGripState Then
				robotIO.CancelReservationDIO(gripSignal)
				robotIO.CancelReservationDIO(ungripSignal)
				If flag = True Then
					robotIO.setDIO(gripSignal,True)
					robotIO.setDIO(ungripSignal,False)
					robotIO.reservationDIO(gripSignal,Me.DoubleActingInterval,False)
				Else
					robotIO.setDIO(ungripSignal,True)
					robotIO.setDIO(gripSignal,False)
					robotIO.reservationDIO(ungripSignal,Me.DoubleActingInterval,False)
				End If
				nowGripState = flag
			End If
		End Sub
		
    End Class 
End Module
'Created: 9/13/2013 11:01:53 AM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module SingleActSolenoideModule
    Public Class SingleAct
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Private gripSignal As Integer = 0
		Private airBlowSignal As Integer = 0
		
		

		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(gripSignal As Integer)
			Me.gripSignal = gripSignal
			Me.airBlowSignal = 0
		End Sub
		
		Public Sub New(gripSignal As Integer, airBlowSignal As Integer)
			Me.gripSignal = gripSignal
			Me.airBlowSignal = airBlowSignal
		End Sub
		
		Public Function gripOnSignal() As Integer
			Return gripSignal
		End Function
		
		Public Function gripOffSignal() As Integer
			Return -1 * gripSignal
		End Function
		
		Public Function isGrip() As Boolean
			Return robotIO.getDIO(gripSignal)
		End Function
		
		Public Sub grip(flag As Boolean)
			If robotIO.getDIO(gripSignal) <> flag Then
				robotIO.setDIO(gripSignal,flag)
				If flag = False And airBlowSignal <> 0 Then
					robotIO.CancelReservationDIO(airBlowSignal)
					robotIO.setDIO(airBlowSignal,True)
					robotIO.reservationDIO(airBlowSignal,1000,False)
				End If
			End If
		End Sub
		
    End Class 
End Module
'Created: 9/13/2013 11:01:53 AM

'Copyright Robots and Design 2014
'Writer: JEONG YONG JIN

Module TripleActSolenoideModule
    Public Class TripleAct
	
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PRIVATE ''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		Private nowGripState As Boolean = False
		Private gripSignal As Integer = 0
		Private ungripSignal As Integer = 0
		Private airSignal As Integer = 0
		Private DoubleActingInterval As Integer = 1000
		Public Property DoubleActingInterval As Integer
			Get
	            Return Me.DoubleActingInterval
	        End Get
			Set (value As Integer)
	            Me.DoubleActingInterval = value
	        End Set
		End Property





		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''' PUBLIC '''''''''''''''''''''''''''''
		'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
		
		Public Sub New(gripSignal As Integer, ungripSignal As Integer, airSignal As Integer)
			Me.gripSignal = gripSignal
			Me.ungripSignal = ungripSignal
			Me.airSignal = airSignal
		End Sub
		
		Public Function gripOnSignal() As Integer
			Return gripSignal
		End Function
		
		Public Function gripOffSignal() As Integer
			Return ungripSignal
		End Function
		
		Public Function isGrip() As Boolean
			Return nowGripState
		End Function
		
		Public Sub grip(flag As Boolean)
			If flag <> nowGripState Then
				robotIO.CancelReservationDIO(gripSignal)
				robotIO.CancelReservationDIO(ungripSignal)
				robotIO.CancelReservationDIO(airSignal)
				If flag = True Then
					robotIO.setDIO(gripSignal,True)
					robotIO.setDIO(ungripSignal,False)
					robotIO.reservationDIO(gripSignal,Me.DoubleActingInterval,False)
				Else
					robotIO.setDIO(ungripSignal,True)
					robotIO.setDIO(gripSignal,False)
					robotIO.setDIO(airSignal,True)
					robotIO.reservationDIO(ungripSignal,Me.DoubleActingInterval,False)
					robotIO.reservationDIO(airSignal,Me.DoubleActingInterval,False)
				End If
				nowGripState = flag
			End If
		End Sub
		
    End Class 
End Module
